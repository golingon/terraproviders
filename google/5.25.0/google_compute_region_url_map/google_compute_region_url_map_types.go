// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_region_url_map

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DefaultRouteAction struct {
	// DefaultRouteActionCorsPolicy: optional
	CorsPolicy *DefaultRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// DefaultRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *DefaultRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// DefaultRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *DefaultRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// DefaultRouteActionRetryPolicy: optional
	RetryPolicy *DefaultRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// DefaultRouteActionTimeout: optional
	Timeout *DefaultRouteActionTimeout `hcl:"timeout,block"`
	// DefaultRouteActionUrlRewrite: optional
	UrlRewrite *DefaultRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// DefaultRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []DefaultRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type DefaultRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type DefaultRouteActionFaultInjectionPolicy struct {
	// DefaultRouteActionFaultInjectionPolicyAbort: optional
	Abort *DefaultRouteActionFaultInjectionPolicyAbort `hcl:"abort,block"`
	// DefaultRouteActionFaultInjectionPolicyDelay: optional
	Delay *DefaultRouteActionFaultInjectionPolicyDelay `hcl:"delay,block"`
}

type DefaultRouteActionFaultInjectionPolicyAbort struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type DefaultRouteActionFaultInjectionPolicyDelay struct {
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
	// DefaultRouteActionFaultInjectionPolicyDelayFixedDelay: optional
	FixedDelay *DefaultRouteActionFaultInjectionPolicyDelayFixedDelay `hcl:"fixed_delay,block"`
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionRequestMirrorPolicy struct {
	// BackendService: string, optional
	BackendService terra.StringValue `hcl:"backend_service,attr"`
}

type DefaultRouteActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// DefaultRouteActionRetryPolicyPerTryTimeout: optional
	PerTryTimeout *DefaultRouteActionRetryPolicyPerTryTimeout `hcl:"per_try_timeout,block"`
}

type DefaultRouteActionRetryPolicyPerTryTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, optional
	Seconds terra.StringValue `hcl:"seconds,attr"`
}

type DefaultRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type DefaultRouteActionWeightedBackendServices struct {
	// BackendService: string, optional
	BackendService terra.StringValue `hcl:"backend_service,attr"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
	// DefaultRouteActionWeightedBackendServicesHeaderAction: optional
	HeaderAction *DefaultRouteActionWeightedBackendServicesHeaderAction `hcl:"header_action,block"`
}

type DefaultRouteActionWeightedBackendServicesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, optional
	HeaderName terra.StringValue `hcl:"header_name,attr"`
	// HeaderValue: string, optional
	HeaderValue terra.StringValue `hcl:"header_value,attr"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type DefaultUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type HostRule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Hosts: set of string, required
	Hosts terra.SetValue[terra.StringValue] `hcl:"hosts,attr" validate:"required"`
	// PathMatcher: string, required
	PathMatcher terra.StringValue `hcl:"path_matcher,attr" validate:"required"`
}

type PathMatcher struct {
	// DefaultService: string, optional
	DefaultService terra.StringValue `hcl:"default_service,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PathMatcherDefaultUrlRedirect: optional
	DefaultUrlRedirect *PathMatcherDefaultUrlRedirect `hcl:"default_url_redirect,block"`
	// PathMatcherPathRule: min=0
	PathRule []PathMatcherPathRule `hcl:"path_rule,block" validate:"min=0"`
	// PathMatcherRouteRules: min=0
	RouteRules []PathMatcherRouteRules `hcl:"route_rules,block" validate:"min=0"`
}

type PathMatcherDefaultUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type PathMatcherPathRule struct {
	// Paths: set of string, required
	Paths terra.SetValue[terra.StringValue] `hcl:"paths,attr" validate:"required"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// PathMatcherPathRuleRouteAction: optional
	RouteAction *PathMatcherPathRuleRouteAction `hcl:"route_action,block"`
	// PathMatcherPathRuleUrlRedirect: optional
	UrlRedirect *PathMatcherPathRuleUrlRedirect `hcl:"url_redirect,block"`
}

type PathMatcherPathRuleRouteAction struct {
	// PathMatcherPathRuleRouteActionCorsPolicy: optional
	CorsPolicy *PathMatcherPathRuleRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// PathMatcherPathRuleRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *PathMatcherPathRuleRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// PathMatcherPathRuleRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *PathMatcherPathRuleRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// PathMatcherPathRuleRouteActionRetryPolicy: optional
	RetryPolicy *PathMatcherPathRuleRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// PathMatcherPathRuleRouteActionTimeout: optional
	Timeout *PathMatcherPathRuleRouteActionTimeout `hcl:"timeout,block"`
	// PathMatcherPathRuleRouteActionUrlRewrite: optional
	UrlRewrite *PathMatcherPathRuleRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// PathMatcherPathRuleRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []PathMatcherPathRuleRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type PathMatcherPathRuleRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, required
	Disabled terra.BoolValue `hcl:"disabled,attr" validate:"required"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type PathMatcherPathRuleRouteActionFaultInjectionPolicy struct {
	// PathMatcherPathRuleCa6Fd7F0: optional
	Abort *PathMatcherPathRuleCa6Fd7F0 `hcl:"abort,block"`
	// PathMatcherPathRuleCca2E374: optional
	Delay *PathMatcherPathRuleCca2E374 `hcl:"delay,block"`
}

type PathMatcherPathRuleCa6Fd7F0 struct {
	// HttpStatus: number, required
	HttpStatus terra.NumberValue `hcl:"http_status,attr" validate:"required"`
	// Percentage: number, required
	Percentage terra.NumberValue `hcl:"percentage,attr" validate:"required"`
}

type PathMatcherPathRuleCca2E374 struct {
	// Percentage: number, required
	Percentage terra.NumberValue `hcl:"percentage,attr" validate:"required"`
	// PathMatcherPathRule8422D1E5: required
	FixedDelay *PathMatcherPathRule8422D1E5 `hcl:"fixed_delay,block" validate:"required"`
}

type PathMatcherPathRule8422D1E5 struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherPathRuleRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type PathMatcherPathRuleRouteActionRetryPolicy struct {
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// PathMatcherPathRule867260A6: optional
	PerTryTimeout *PathMatcherPathRule867260A6 `hcl:"per_try_timeout,block"`
}

type PathMatcherPathRule867260A6 struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherPathRuleRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherPathRuleRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
}

type PathMatcherPathRuleRouteActionWeightedBackendServices struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
	// PathMatcherPathRuleBee7358B: optional
	HeaderAction *PathMatcherPathRuleBee7358B `hcl:"header_action,block"`
}

type PathMatcherPathRuleBee7358B struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathMatcherPathRule3F069F0E: min=0
	RequestHeadersToAdd []PathMatcherPathRule3F069F0E `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathMatcherPathRuleD4A4D480: min=0
	ResponseHeadersToAdd []PathMatcherPathRuleD4A4D480 `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathMatcherPathRule3F069F0E struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherPathRuleD4A4D480 struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherPathRuleUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, required
	StripQuery terra.BoolValue `hcl:"strip_query,attr" validate:"required"`
}

type PathMatcherRouteRules struct {
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// PathMatcherRouteRulesHeaderAction: optional
	HeaderAction *PathMatcherRouteRulesHeaderAction `hcl:"header_action,block"`
	// PathMatcherRouteRulesMatchRules: min=0
	MatchRules []PathMatcherRouteRulesMatchRules `hcl:"match_rules,block" validate:"min=0"`
	// PathMatcherRouteRulesRouteAction: optional
	RouteAction *PathMatcherRouteRulesRouteAction `hcl:"route_action,block"`
	// PathMatcherRouteRulesUrlRedirect: optional
	UrlRedirect *PathMatcherRouteRulesUrlRedirect `hcl:"url_redirect,block"`
}

type PathMatcherRouteRulesHeaderAction struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathMatcherRouteRulesHeaderActionRequestHeadersToAdd: min=0
	RequestHeadersToAdd []PathMatcherRouteRulesHeaderActionRequestHeadersToAdd `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathMatcherRouteRulesHeaderActionResponseHeadersToAdd: min=0
	ResponseHeadersToAdd []PathMatcherRouteRulesHeaderActionResponseHeadersToAdd `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathMatcherRouteRulesHeaderActionRequestHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherRouteRulesHeaderActionResponseHeadersToAdd struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherRouteRulesMatchRules struct {
	// FullPathMatch: string, optional
	FullPathMatch terra.StringValue `hcl:"full_path_match,attr"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PathTemplateMatch: string, optional
	PathTemplateMatch terra.StringValue `hcl:"path_template_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// PathMatcherRouteRulesMatchRulesHeaderMatches: min=0
	HeaderMatches []PathMatcherRouteRulesMatchRulesHeaderMatches `hcl:"header_matches,block" validate:"min=0"`
	// PathMatcherRouteRulesMatchRulesMetadataFilters: min=0
	MetadataFilters []PathMatcherRouteRulesMatchRulesMetadataFilters `hcl:"metadata_filters,block" validate:"min=0"`
	// PathMatcherRouteRulesMatchRulesQueryParameterMatches: min=0
	QueryParameterMatches []PathMatcherRouteRulesMatchRulesQueryParameterMatches `hcl:"query_parameter_matches,block" validate:"min=0"`
}

type PathMatcherRouteRulesMatchRulesHeaderMatches struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// InvertMatch: bool, optional
	InvertMatch terra.BoolValue `hcl:"invert_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
	// SuffixMatch: string, optional
	SuffixMatch terra.StringValue `hcl:"suffix_match,attr"`
	// PathMatcherRouteRulesCd026639: optional
	RangeMatch *PathMatcherRouteRulesCd026639 `hcl:"range_match,block"`
}

type PathMatcherRouteRulesCd026639 struct {
	// RangeEnd: number, required
	RangeEnd terra.NumberValue `hcl:"range_end,attr" validate:"required"`
	// RangeStart: number, required
	RangeStart terra.NumberValue `hcl:"range_start,attr" validate:"required"`
}

type PathMatcherRouteRulesMatchRulesMetadataFilters struct {
	// FilterMatchCriteria: string, required
	FilterMatchCriteria terra.StringValue `hcl:"filter_match_criteria,attr" validate:"required"`
	// PathMatcherRouteRulesCf4Abc68: min=1,max=64
	FilterLabels []PathMatcherRouteRulesCf4Abc68 `hcl:"filter_labels,block" validate:"min=1,max=64"`
}

type PathMatcherRouteRulesCf4Abc68 struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type PathMatcherRouteRulesMatchRulesQueryParameterMatches struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// RegexMatch: string, optional
	RegexMatch terra.StringValue `hcl:"regex_match,attr"`
}

type PathMatcherRouteRulesRouteAction struct {
	// PathMatcherRouteRulesRouteActionCorsPolicy: optional
	CorsPolicy *PathMatcherRouteRulesRouteActionCorsPolicy `hcl:"cors_policy,block"`
	// PathMatcherRouteRulesRouteActionFaultInjectionPolicy: optional
	FaultInjectionPolicy *PathMatcherRouteRulesRouteActionFaultInjectionPolicy `hcl:"fault_injection_policy,block"`
	// PathMatcherRouteRulesRouteActionRequestMirrorPolicy: optional
	RequestMirrorPolicy *PathMatcherRouteRulesRouteActionRequestMirrorPolicy `hcl:"request_mirror_policy,block"`
	// PathMatcherRouteRulesRouteActionRetryPolicy: optional
	RetryPolicy *PathMatcherRouteRulesRouteActionRetryPolicy `hcl:"retry_policy,block"`
	// PathMatcherRouteRulesRouteActionTimeout: optional
	Timeout *PathMatcherRouteRulesRouteActionTimeout `hcl:"timeout,block"`
	// PathMatcherRouteRulesRouteActionUrlRewrite: optional
	UrlRewrite *PathMatcherRouteRulesRouteActionUrlRewrite `hcl:"url_rewrite,block"`
	// PathMatcherRouteRulesRouteActionWeightedBackendServices: min=0
	WeightedBackendServices []PathMatcherRouteRulesRouteActionWeightedBackendServices `hcl:"weighted_backend_services,block" validate:"min=0"`
}

type PathMatcherRouteRulesRouteActionCorsPolicy struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOriginRegexes: list of string, optional
	AllowOriginRegexes terra.ListValue[terra.StringValue] `hcl:"allow_origin_regexes,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: number, optional
	MaxAge terra.NumberValue `hcl:"max_age,attr"`
}

type PathMatcherRouteRulesRouteActionFaultInjectionPolicy struct {
	// PathMatcherRouteRulesCa6Fd7F0: optional
	Abort *PathMatcherRouteRulesCa6Fd7F0 `hcl:"abort,block"`
	// PathMatcherRouteRulesCca2E374: optional
	Delay *PathMatcherRouteRulesCca2E374 `hcl:"delay,block"`
}

type PathMatcherRouteRulesCa6Fd7F0 struct {
	// HttpStatus: number, optional
	HttpStatus terra.NumberValue `hcl:"http_status,attr"`
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
}

type PathMatcherRouteRulesCca2E374 struct {
	// Percentage: number, optional
	Percentage terra.NumberValue `hcl:"percentage,attr"`
	// PathMatcherRouteRules8422D1E5: optional
	FixedDelay *PathMatcherRouteRules8422D1E5 `hcl:"fixed_delay,block"`
}

type PathMatcherRouteRules8422D1E5 struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherRouteRulesRouteActionRequestMirrorPolicy struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
}

type PathMatcherRouteRulesRouteActionRetryPolicy struct {
	// NumRetries: number, required
	NumRetries terra.NumberValue `hcl:"num_retries,attr" validate:"required"`
	// RetryConditions: list of string, optional
	RetryConditions terra.ListValue[terra.StringValue] `hcl:"retry_conditions,attr"`
	// PathMatcherRouteRules867260A6: optional
	PerTryTimeout *PathMatcherRouteRules867260A6 `hcl:"per_try_timeout,block"`
}

type PathMatcherRouteRules867260A6 struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherRouteRulesRouteActionTimeout struct {
	// Nanos: number, optional
	Nanos terra.NumberValue `hcl:"nanos,attr"`
	// Seconds: string, required
	Seconds terra.StringValue `hcl:"seconds,attr" validate:"required"`
}

type PathMatcherRouteRulesRouteActionUrlRewrite struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
	// PathTemplateRewrite: string, optional
	PathTemplateRewrite terra.StringValue `hcl:"path_template_rewrite,attr"`
}

type PathMatcherRouteRulesRouteActionWeightedBackendServices struct {
	// BackendService: string, required
	BackendService terra.StringValue `hcl:"backend_service,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
	// PathMatcherRouteRulesBee7358B: optional
	HeaderAction *PathMatcherRouteRulesBee7358B `hcl:"header_action,block"`
}

type PathMatcherRouteRulesBee7358B struct {
	// RequestHeadersToRemove: list of string, optional
	RequestHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"request_headers_to_remove,attr"`
	// ResponseHeadersToRemove: list of string, optional
	ResponseHeadersToRemove terra.ListValue[terra.StringValue] `hcl:"response_headers_to_remove,attr"`
	// PathMatcherRouteRules3F069F0E: min=0
	RequestHeadersToAdd []PathMatcherRouteRules3F069F0E `hcl:"request_headers_to_add,block" validate:"min=0"`
	// PathMatcherRouteRulesD4A4D480: min=0
	ResponseHeadersToAdd []PathMatcherRouteRulesD4A4D480 `hcl:"response_headers_to_add,block" validate:"min=0"`
}

type PathMatcherRouteRules3F069F0E struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherRouteRulesD4A4D480 struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, required
	Replace terra.BoolValue `hcl:"replace,attr" validate:"required"`
}

type PathMatcherRouteRulesUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, optional
	StripQuery terra.BoolValue `hcl:"strip_query,attr"`
}

type Test struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DefaultRouteActionAttributes struct {
	ref terra.Reference
}

func (dra DefaultRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return dra.ref, nil
}

func (dra DefaultRouteActionAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionAttributes {
	return DefaultRouteActionAttributes{ref: ref}
}

func (dra DefaultRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dra.ref.InternalTokens()
}

func (dra DefaultRouteActionAttributes) CorsPolicy() terra.ListValue[DefaultRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionCorsPolicyAttributes](dra.ref.Append("cors_policy"))
}

func (dra DefaultRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[DefaultRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyAttributes](dra.ref.Append("fault_injection_policy"))
}

func (dra DefaultRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[DefaultRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRequestMirrorPolicyAttributes](dra.ref.Append("request_mirror_policy"))
}

func (dra DefaultRouteActionAttributes) RetryPolicy() terra.ListValue[DefaultRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRetryPolicyAttributes](dra.ref.Append("retry_policy"))
}

func (dra DefaultRouteActionAttributes) Timeout() terra.ListValue[DefaultRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionTimeoutAttributes](dra.ref.Append("timeout"))
}

func (dra DefaultRouteActionAttributes) UrlRewrite() terra.ListValue[DefaultRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionUrlRewriteAttributes](dra.ref.Append("url_rewrite"))
}

func (dra DefaultRouteActionAttributes) WeightedBackendServices() terra.ListValue[DefaultRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesAttributes](dra.ref.Append("weighted_backend_services"))
}

type DefaultRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionCorsPolicyAttributes {
	return DefaultRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp DefaultRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp DefaultRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type DefaultRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyAttributes {
	return DefaultRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[DefaultRouteActionFaultInjectionPolicyAbortAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyAbortAttributes](fip.ref.Append("abort"))
}

func (fip DefaultRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[DefaultRouteActionFaultInjectionPolicyDelayAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyDelayAttributes](fip.ref.Append("delay"))
}

type DefaultRouteActionFaultInjectionPolicyAbortAttributes struct {
	ref terra.Reference
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyAbortAttributes {
	return DefaultRouteActionFaultInjectionPolicyAbortAttributes{ref: ref}
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a DefaultRouteActionFaultInjectionPolicyAbortAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type DefaultRouteActionFaultInjectionPolicyDelayAttributes struct {
	ref terra.Reference
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyDelayAttributes {
	return DefaultRouteActionFaultInjectionPolicyDelayAttributes{ref: ref}
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d DefaultRouteActionFaultInjectionPolicyDelayAttributes) FixedDelay() terra.ListValue[DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes](d.ref.Append("fixed_delay"))
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes struct {
	ref terra.Reference
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes {
	return DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes{ref: ref}
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd DefaultRouteActionFaultInjectionPolicyDelayFixedDelayAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type DefaultRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRequestMirrorPolicyAttributes {
	return DefaultRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp DefaultRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type DefaultRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRetryPolicyAttributes {
	return DefaultRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp DefaultRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp DefaultRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp DefaultRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp DefaultRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[DefaultRouteActionRetryPolicyPerTryTimeoutAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionRetryPolicyPerTryTimeoutAttributes](rp.ref.Append("per_try_timeout"))
}

type DefaultRouteActionRetryPolicyPerTryTimeoutAttributes struct {
	ref terra.Reference
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionRetryPolicyPerTryTimeoutAttributes {
	return DefaultRouteActionRetryPolicyPerTryTimeoutAttributes{ref: ref}
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt DefaultRouteActionRetryPolicyPerTryTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type DefaultRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t DefaultRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DefaultRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionTimeoutAttributes {
	return DefaultRouteActionTimeoutAttributes{ref: ref}
}

func (t DefaultRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DefaultRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t DefaultRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type DefaultRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionUrlRewriteAttributes {
	return DefaultRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur DefaultRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur DefaultRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur DefaultRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type DefaultRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesAttributes {
	return DefaultRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs DefaultRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionAttributes](wbs.ref.Append("header_action"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionAttributes{ref: ref}
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha DefaultRouteActionWeightedBackendServicesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes {
	return DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type DefaultUrlRedirectAttributes struct {
	ref terra.Reference
}

func (dur DefaultUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return dur.ref, nil
}

func (dur DefaultUrlRedirectAttributes) InternalWithRef(ref terra.Reference) DefaultUrlRedirectAttributes {
	return DefaultUrlRedirectAttributes{ref: ref}
}

func (dur DefaultUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dur.ref.InternalTokens()
}

func (dur DefaultUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("host_redirect"))
}

func (dur DefaultUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("https_redirect"))
}

func (dur DefaultUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("path_redirect"))
}

func (dur DefaultUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("prefix_redirect"))
}

func (dur DefaultUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("redirect_response_code"))
}

func (dur DefaultUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("strip_query"))
}

type HostRuleAttributes struct {
	ref terra.Reference
}

func (hr HostRuleAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HostRuleAttributes) InternalWithRef(ref terra.Reference) HostRuleAttributes {
	return HostRuleAttributes{ref: ref}
}

func (hr HostRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HostRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("description"))
}

func (hr HostRuleAttributes) Hosts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hr.ref.Append("hosts"))
}

func (hr HostRuleAttributes) PathMatcher() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("path_matcher"))
}

type PathMatcherAttributes struct {
	ref terra.Reference
}

func (pm PathMatcherAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm PathMatcherAttributes) InternalWithRef(ref terra.Reference) PathMatcherAttributes {
	return PathMatcherAttributes{ref: ref}
}

func (pm PathMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm PathMatcherAttributes) DefaultService() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("default_service"))
}

func (pm PathMatcherAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("description"))
}

func (pm PathMatcherAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("name"))
}

func (pm PathMatcherAttributes) DefaultUrlRedirect() terra.ListValue[PathMatcherDefaultUrlRedirectAttributes] {
	return terra.ReferenceAsList[PathMatcherDefaultUrlRedirectAttributes](pm.ref.Append("default_url_redirect"))
}

func (pm PathMatcherAttributes) PathRule() terra.ListValue[PathMatcherPathRuleAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleAttributes](pm.ref.Append("path_rule"))
}

func (pm PathMatcherAttributes) RouteRules() terra.ListValue[PathMatcherRouteRulesAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesAttributes](pm.ref.Append("route_rules"))
}

type PathMatcherDefaultUrlRedirectAttributes struct {
	ref terra.Reference
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return dur.ref, nil
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalWithRef(ref terra.Reference) PathMatcherDefaultUrlRedirectAttributes {
	return PathMatcherDefaultUrlRedirectAttributes{ref: ref}
}

func (dur PathMatcherDefaultUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dur.ref.InternalTokens()
}

func (dur PathMatcherDefaultUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("host_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("https_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("path_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("prefix_redirect"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(dur.ref.Append("redirect_response_code"))
}

func (dur PathMatcherDefaultUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(dur.ref.Append("strip_query"))
}

type PathMatcherPathRuleAttributes struct {
	ref terra.Reference
}

func (pr PathMatcherPathRuleAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr PathMatcherPathRuleAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleAttributes {
	return PathMatcherPathRuleAttributes{ref: ref}
}

func (pr PathMatcherPathRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr PathMatcherPathRuleAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pr.ref.Append("paths"))
}

func (pr PathMatcherPathRuleAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("service"))
}

func (pr PathMatcherPathRuleAttributes) RouteAction() terra.ListValue[PathMatcherPathRuleRouteActionAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionAttributes](pr.ref.Append("route_action"))
}

func (pr PathMatcherPathRuleAttributes) UrlRedirect() terra.ListValue[PathMatcherPathRuleUrlRedirectAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleUrlRedirectAttributes](pr.ref.Append("url_redirect"))
}

type PathMatcherPathRuleRouteActionAttributes struct {
	ref terra.Reference
}

func (ra PathMatcherPathRuleRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra PathMatcherPathRuleRouteActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionAttributes {
	return PathMatcherPathRuleRouteActionAttributes{ref: ref}
}

func (ra PathMatcherPathRuleRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra PathMatcherPathRuleRouteActionAttributes) CorsPolicy() terra.ListValue[PathMatcherPathRuleRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionCorsPolicyAttributes](ra.ref.Append("cors_policy"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes](ra.ref.Append("fault_injection_policy"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes](ra.ref.Append("request_mirror_policy"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) RetryPolicy() terra.ListValue[PathMatcherPathRuleRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionRetryPolicyAttributes](ra.ref.Append("retry_policy"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) Timeout() terra.ListValue[PathMatcherPathRuleRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionTimeoutAttributes](ra.ref.Append("timeout"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) UrlRewrite() terra.ListValue[PathMatcherPathRuleRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionUrlRewriteAttributes](ra.ref.Append("url_rewrite"))
}

func (ra PathMatcherPathRuleRouteActionAttributes) WeightedBackendServices() terra.ListValue[PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes](ra.ref.Append("weighted_backend_services"))
}

type PathMatcherPathRuleRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionCorsPolicyAttributes {
	return PathMatcherPathRuleRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp PathMatcherPathRuleRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes {
	return PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[PathMatcherPathRuleCa6Fd7F0Attributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleCa6Fd7F0Attributes](fip.ref.Append("abort"))
}

func (fip PathMatcherPathRuleRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[PathMatcherPathRuleCca2E374Attributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleCca2E374Attributes](fip.ref.Append("delay"))
}

type PathMatcherPathRuleCa6Fd7F0Attributes struct {
	ref terra.Reference
}

func (a PathMatcherPathRuleCa6Fd7F0Attributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PathMatcherPathRuleCa6Fd7F0Attributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleCa6Fd7F0Attributes {
	return PathMatcherPathRuleCa6Fd7F0Attributes{ref: ref}
}

func (a PathMatcherPathRuleCa6Fd7F0Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PathMatcherPathRuleCa6Fd7F0Attributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a PathMatcherPathRuleCa6Fd7F0Attributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type PathMatcherPathRuleCca2E374Attributes struct {
	ref terra.Reference
}

func (d PathMatcherPathRuleCca2E374Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d PathMatcherPathRuleCca2E374Attributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleCca2E374Attributes {
	return PathMatcherPathRuleCca2E374Attributes{ref: ref}
}

func (d PathMatcherPathRuleCca2E374Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d PathMatcherPathRuleCca2E374Attributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d PathMatcherPathRuleCca2E374Attributes) FixedDelay() terra.ListValue[PathMatcherPathRule8422D1E5Attributes] {
	return terra.ReferenceAsList[PathMatcherPathRule8422D1E5Attributes](d.ref.Append("fixed_delay"))
}

type PathMatcherPathRule8422D1E5Attributes struct {
	ref terra.Reference
}

func (fd PathMatcherPathRule8422D1E5Attributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd PathMatcherPathRule8422D1E5Attributes) InternalWithRef(ref terra.Reference) PathMatcherPathRule8422D1E5Attributes {
	return PathMatcherPathRule8422D1E5Attributes{ref: ref}
}

func (fd PathMatcherPathRule8422D1E5Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd PathMatcherPathRule8422D1E5Attributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd PathMatcherPathRule8422D1E5Attributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes {
	return PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp PathMatcherPathRuleRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type PathMatcherPathRuleRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionRetryPolicyAttributes {
	return PathMatcherPathRuleRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp PathMatcherPathRuleRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[PathMatcherPathRule867260A6Attributes] {
	return terra.ReferenceAsList[PathMatcherPathRule867260A6Attributes](rp.ref.Append("per_try_timeout"))
}

type PathMatcherPathRule867260A6Attributes struct {
	ref terra.Reference
}

func (ptt PathMatcherPathRule867260A6Attributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt PathMatcherPathRule867260A6Attributes) InternalWithRef(ref terra.Reference) PathMatcherPathRule867260A6Attributes {
	return PathMatcherPathRule867260A6Attributes{ref: ref}
}

func (ptt PathMatcherPathRule867260A6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt PathMatcherPathRule867260A6Attributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt PathMatcherPathRule867260A6Attributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type PathMatcherPathRuleRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t PathMatcherPathRuleRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t PathMatcherPathRuleRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionTimeoutAttributes {
	return PathMatcherPathRuleRouteActionTimeoutAttributes{ref: ref}
}

func (t PathMatcherPathRuleRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t PathMatcherPathRuleRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t PathMatcherPathRuleRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type PathMatcherPathRuleRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur PathMatcherPathRuleRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathMatcherPathRuleRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionUrlRewriteAttributes {
	return PathMatcherPathRuleRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur PathMatcherPathRuleRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathMatcherPathRuleRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur PathMatcherPathRuleRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

type PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes {
	return PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs PathMatcherPathRuleRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[PathMatcherPathRuleBee7358BAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleBee7358BAttributes](wbs.ref.Append("header_action"))
}

type PathMatcherPathRuleBee7358BAttributes struct {
	ref terra.Reference
}

func (ha PathMatcherPathRuleBee7358BAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathMatcherPathRuleBee7358BAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleBee7358BAttributes {
	return PathMatcherPathRuleBee7358BAttributes{ref: ref}
}

func (ha PathMatcherPathRuleBee7358BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathMatcherPathRuleBee7358BAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathMatcherPathRuleBee7358BAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathMatcherPathRuleBee7358BAttributes) RequestHeadersToAdd() terra.ListValue[PathMatcherPathRule3F069F0EAttributes] {
	return terra.ReferenceAsList[PathMatcherPathRule3F069F0EAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathMatcherPathRuleBee7358BAttributes) ResponseHeadersToAdd() terra.ListValue[PathMatcherPathRuleD4A4D480Attributes] {
	return terra.ReferenceAsList[PathMatcherPathRuleD4A4D480Attributes](ha.ref.Append("response_headers_to_add"))
}

type PathMatcherPathRule3F069F0EAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherPathRule3F069F0EAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherPathRule3F069F0EAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRule3F069F0EAttributes {
	return PathMatcherPathRule3F069F0EAttributes{ref: ref}
}

func (rhta PathMatcherPathRule3F069F0EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherPathRule3F069F0EAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherPathRule3F069F0EAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherPathRule3F069F0EAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherPathRuleD4A4D480Attributes struct {
	ref terra.Reference
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleD4A4D480Attributes {
	return PathMatcherPathRuleD4A4D480Attributes{ref: ref}
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherPathRuleD4A4D480Attributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherPathRuleUrlRedirectAttributes struct {
	ref terra.Reference
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) InternalWithRef(ref terra.Reference) PathMatcherPathRuleUrlRedirectAttributes {
	return PathMatcherPathRuleUrlRedirectAttributes{ref: ref}
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_redirect"))
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("https_redirect"))
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_redirect"))
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("prefix_redirect"))
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("redirect_response_code"))
}

func (ur PathMatcherPathRuleUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("strip_query"))
}

type PathMatcherRouteRulesAttributes struct {
	ref terra.Reference
}

func (rr PathMatcherRouteRulesAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr PathMatcherRouteRulesAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesAttributes {
	return PathMatcherRouteRulesAttributes{ref: ref}
}

func (rr PathMatcherRouteRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr PathMatcherRouteRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("priority"))
}

func (rr PathMatcherRouteRulesAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("service"))
}

func (rr PathMatcherRouteRulesAttributes) HeaderAction() terra.ListValue[PathMatcherRouteRulesHeaderActionAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesHeaderActionAttributes](rr.ref.Append("header_action"))
}

func (rr PathMatcherRouteRulesAttributes) MatchRules() terra.ListValue[PathMatcherRouteRulesMatchRulesAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesMatchRulesAttributes](rr.ref.Append("match_rules"))
}

func (rr PathMatcherRouteRulesAttributes) RouteAction() terra.ListValue[PathMatcherRouteRulesRouteActionAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionAttributes](rr.ref.Append("route_action"))
}

func (rr PathMatcherRouteRulesAttributes) UrlRedirect() terra.ListValue[PathMatcherRouteRulesUrlRedirectAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesUrlRedirectAttributes](rr.ref.Append("url_redirect"))
}

type PathMatcherRouteRulesHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesHeaderActionAttributes {
	return PathMatcherRouteRulesHeaderActionAttributes{ref: ref}
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) RequestHeadersToAdd() terra.ListValue[PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathMatcherRouteRulesHeaderActionAttributes) ResponseHeadersToAdd() terra.ListValue[PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes](ha.ref.Append("response_headers_to_add"))
}

type PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes {
	return PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherRouteRulesHeaderActionRequestHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes {
	return PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes{ref: ref}
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherRouteRulesHeaderActionResponseHeadersToAddAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherRouteRulesMatchRulesAttributes struct {
	ref terra.Reference
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesMatchRulesAttributes {
	return PathMatcherRouteRulesMatchRulesAttributes{ref: ref}
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) FullPathMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("full_path_match"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(mr.ref.Append("ignore_case"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) PathTemplateMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("path_template_match"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("prefix_match"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("regex_match"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) HeaderMatches() terra.ListValue[PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes](mr.ref.Append("header_matches"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) MetadataFilters() terra.ListValue[PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes](mr.ref.Append("metadata_filters"))
}

func (mr PathMatcherRouteRulesMatchRulesAttributes) QueryParameterMatches() terra.ListValue[PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes](mr.ref.Append("query_parameter_matches"))
}

type PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes struct {
	ref terra.Reference
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) InternalRef() (terra.Reference, error) {
	return hm.ref, nil
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes {
	return PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes{ref: ref}
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hm.ref.InternalTokens()
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("exact_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("header_name"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) InvertMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("invert_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("prefix_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("present_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("regex_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) SuffixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("suffix_match"))
}

func (hm PathMatcherRouteRulesMatchRulesHeaderMatchesAttributes) RangeMatch() terra.ListValue[PathMatcherRouteRulesCd026639Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesCd026639Attributes](hm.ref.Append("range_match"))
}

type PathMatcherRouteRulesCd026639Attributes struct {
	ref terra.Reference
}

func (rm PathMatcherRouteRulesCd026639Attributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm PathMatcherRouteRulesCd026639Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesCd026639Attributes {
	return PathMatcherRouteRulesCd026639Attributes{ref: ref}
}

func (rm PathMatcherRouteRulesCd026639Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm PathMatcherRouteRulesCd026639Attributes) RangeEnd() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("range_end"))
}

func (rm PathMatcherRouteRulesCd026639Attributes) RangeStart() terra.NumberValue {
	return terra.ReferenceAsNumber(rm.ref.Append("range_start"))
}

type PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes struct {
	ref terra.Reference
}

func (mf PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes) InternalRef() (terra.Reference, error) {
	return mf.ref, nil
}

func (mf PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes {
	return PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes{ref: ref}
}

func (mf PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mf.ref.InternalTokens()
}

func (mf PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes) FilterMatchCriteria() terra.StringValue {
	return terra.ReferenceAsString(mf.ref.Append("filter_match_criteria"))
}

func (mf PathMatcherRouteRulesMatchRulesMetadataFiltersAttributes) FilterLabels() terra.ListValue[PathMatcherRouteRulesCf4Abc68Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesCf4Abc68Attributes](mf.ref.Append("filter_labels"))
}

type PathMatcherRouteRulesCf4Abc68Attributes struct {
	ref terra.Reference
}

func (fl PathMatcherRouteRulesCf4Abc68Attributes) InternalRef() (terra.Reference, error) {
	return fl.ref, nil
}

func (fl PathMatcherRouteRulesCf4Abc68Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesCf4Abc68Attributes {
	return PathMatcherRouteRulesCf4Abc68Attributes{ref: ref}
}

func (fl PathMatcherRouteRulesCf4Abc68Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return fl.ref.InternalTokens()
}

func (fl PathMatcherRouteRulesCf4Abc68Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("name"))
}

func (fl PathMatcherRouteRulesCf4Abc68Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(fl.ref.Append("value"))
}

type PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes struct {
	ref terra.Reference
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) InternalRef() (terra.Reference, error) {
	return qpm.ref, nil
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes {
	return PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes{ref: ref}
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qpm.ref.InternalTokens()
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("exact_match"))
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("name"))
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(qpm.ref.Append("present_match"))
}

func (qpm PathMatcherRouteRulesMatchRulesQueryParameterMatchesAttributes) RegexMatch() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("regex_match"))
}

type PathMatcherRouteRulesRouteActionAttributes struct {
	ref terra.Reference
}

func (ra PathMatcherRouteRulesRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra PathMatcherRouteRulesRouteActionAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionAttributes {
	return PathMatcherRouteRulesRouteActionAttributes{ref: ref}
}

func (ra PathMatcherRouteRulesRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra PathMatcherRouteRulesRouteActionAttributes) CorsPolicy() terra.ListValue[PathMatcherRouteRulesRouteActionCorsPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionCorsPolicyAttributes](ra.ref.Append("cors_policy"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) FaultInjectionPolicy() terra.ListValue[PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes](ra.ref.Append("fault_injection_policy"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) RequestMirrorPolicy() terra.ListValue[PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes](ra.ref.Append("request_mirror_policy"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) RetryPolicy() terra.ListValue[PathMatcherRouteRulesRouteActionRetryPolicyAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionRetryPolicyAttributes](ra.ref.Append("retry_policy"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) Timeout() terra.ListValue[PathMatcherRouteRulesRouteActionTimeoutAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionTimeoutAttributes](ra.ref.Append("timeout"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) UrlRewrite() terra.ListValue[PathMatcherRouteRulesRouteActionUrlRewriteAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionUrlRewriteAttributes](ra.ref.Append("url_rewrite"))
}

func (ra PathMatcherRouteRulesRouteActionAttributes) WeightedBackendServices() terra.ListValue[PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes](ra.ref.Append("weighted_backend_services"))
}

type PathMatcherRouteRulesRouteActionCorsPolicyAttributes struct {
	ref terra.Reference
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionCorsPolicyAttributes {
	return PathMatcherRouteRulesRouteActionCorsPolicyAttributes{ref: ref}
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) AllowOriginRegexes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origin_regexes"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp PathMatcherRouteRulesRouteActionCorsPolicyAttributes) MaxAge() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("max_age"))
}

type PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes struct {
	ref terra.Reference
}

func (fip PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes) InternalRef() (terra.Reference, error) {
	return fip.ref, nil
}

func (fip PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes {
	return PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes{ref: ref}
}

func (fip PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fip.ref.InternalTokens()
}

func (fip PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes) Abort() terra.ListValue[PathMatcherRouteRulesCa6Fd7F0Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesCa6Fd7F0Attributes](fip.ref.Append("abort"))
}

func (fip PathMatcherRouteRulesRouteActionFaultInjectionPolicyAttributes) Delay() terra.ListValue[PathMatcherRouteRulesCca2E374Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesCca2E374Attributes](fip.ref.Append("delay"))
}

type PathMatcherRouteRulesCa6Fd7F0Attributes struct {
	ref terra.Reference
}

func (a PathMatcherRouteRulesCa6Fd7F0Attributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PathMatcherRouteRulesCa6Fd7F0Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesCa6Fd7F0Attributes {
	return PathMatcherRouteRulesCa6Fd7F0Attributes{ref: ref}
}

func (a PathMatcherRouteRulesCa6Fd7F0Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PathMatcherRouteRulesCa6Fd7F0Attributes) HttpStatus() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("http_status"))
}

func (a PathMatcherRouteRulesCa6Fd7F0Attributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("percentage"))
}

type PathMatcherRouteRulesCca2E374Attributes struct {
	ref terra.Reference
}

func (d PathMatcherRouteRulesCca2E374Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d PathMatcherRouteRulesCca2E374Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesCca2E374Attributes {
	return PathMatcherRouteRulesCca2E374Attributes{ref: ref}
}

func (d PathMatcherRouteRulesCca2E374Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d PathMatcherRouteRulesCca2E374Attributes) Percentage() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("percentage"))
}

func (d PathMatcherRouteRulesCca2E374Attributes) FixedDelay() terra.ListValue[PathMatcherRouteRules8422D1E5Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRules8422D1E5Attributes](d.ref.Append("fixed_delay"))
}

type PathMatcherRouteRules8422D1E5Attributes struct {
	ref terra.Reference
}

func (fd PathMatcherRouteRules8422D1E5Attributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd PathMatcherRouteRules8422D1E5Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRules8422D1E5Attributes {
	return PathMatcherRouteRules8422D1E5Attributes{ref: ref}
}

func (fd PathMatcherRouteRules8422D1E5Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd PathMatcherRouteRules8422D1E5Attributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(fd.ref.Append("nanos"))
}

func (fd PathMatcherRouteRules8422D1E5Attributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("seconds"))
}

type PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes struct {
	ref terra.Reference
}

func (rmp PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rmp.ref, nil
}

func (rmp PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes {
	return PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes{ref: ref}
}

func (rmp PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmp.ref.InternalTokens()
}

func (rmp PathMatcherRouteRulesRouteActionRequestMirrorPolicyAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(rmp.ref.Append("backend_service"))
}

type PathMatcherRouteRulesRouteActionRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionRetryPolicyAttributes {
	return PathMatcherRouteRulesRouteActionRetryPolicyAttributes{ref: ref}
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("num_retries"))
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) RetryConditions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("retry_conditions"))
}

func (rp PathMatcherRouteRulesRouteActionRetryPolicyAttributes) PerTryTimeout() terra.ListValue[PathMatcherRouteRules867260A6Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRules867260A6Attributes](rp.ref.Append("per_try_timeout"))
}

type PathMatcherRouteRules867260A6Attributes struct {
	ref terra.Reference
}

func (ptt PathMatcherRouteRules867260A6Attributes) InternalRef() (terra.Reference, error) {
	return ptt.ref, nil
}

func (ptt PathMatcherRouteRules867260A6Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRules867260A6Attributes {
	return PathMatcherRouteRules867260A6Attributes{ref: ref}
}

func (ptt PathMatcherRouteRules867260A6Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptt.ref.InternalTokens()
}

func (ptt PathMatcherRouteRules867260A6Attributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(ptt.ref.Append("nanos"))
}

func (ptt PathMatcherRouteRules867260A6Attributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(ptt.ref.Append("seconds"))
}

type PathMatcherRouteRulesRouteActionTimeoutAttributes struct {
	ref terra.Reference
}

func (t PathMatcherRouteRulesRouteActionTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t PathMatcherRouteRulesRouteActionTimeoutAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionTimeoutAttributes {
	return PathMatcherRouteRulesRouteActionTimeoutAttributes{ref: ref}
}

func (t PathMatcherRouteRulesRouteActionTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t PathMatcherRouteRulesRouteActionTimeoutAttributes) Nanos() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("nanos"))
}

func (t PathMatcherRouteRulesRouteActionTimeoutAttributes) Seconds() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("seconds"))
}

type PathMatcherRouteRulesRouteActionUrlRewriteAttributes struct {
	ref terra.Reference
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionUrlRewriteAttributes {
	return PathMatcherRouteRulesRouteActionUrlRewriteAttributes{ref: ref}
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

func (ur PathMatcherRouteRulesRouteActionUrlRewriteAttributes) PathTemplateRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_template_rewrite"))
}

type PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes struct {
	ref terra.Reference
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) InternalRef() (terra.Reference, error) {
	return wbs.ref, nil
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes {
	return PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes{ref: ref}
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wbs.ref.InternalTokens()
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) BackendService() terra.StringValue {
	return terra.ReferenceAsString(wbs.ref.Append("backend_service"))
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wbs.ref.Append("weight"))
}

func (wbs PathMatcherRouteRulesRouteActionWeightedBackendServicesAttributes) HeaderAction() terra.ListValue[PathMatcherRouteRulesBee7358BAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesBee7358BAttributes](wbs.ref.Append("header_action"))
}

type PathMatcherRouteRulesBee7358BAttributes struct {
	ref terra.Reference
}

func (ha PathMatcherRouteRulesBee7358BAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha PathMatcherRouteRulesBee7358BAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesBee7358BAttributes {
	return PathMatcherRouteRulesBee7358BAttributes{ref: ref}
}

func (ha PathMatcherRouteRulesBee7358BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha PathMatcherRouteRulesBee7358BAttributes) RequestHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("request_headers_to_remove"))
}

func (ha PathMatcherRouteRulesBee7358BAttributes) ResponseHeadersToRemove() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ha.ref.Append("response_headers_to_remove"))
}

func (ha PathMatcherRouteRulesBee7358BAttributes) RequestHeadersToAdd() terra.ListValue[PathMatcherRouteRules3F069F0EAttributes] {
	return terra.ReferenceAsList[PathMatcherRouteRules3F069F0EAttributes](ha.ref.Append("request_headers_to_add"))
}

func (ha PathMatcherRouteRulesBee7358BAttributes) ResponseHeadersToAdd() terra.ListValue[PathMatcherRouteRulesD4A4D480Attributes] {
	return terra.ReferenceAsList[PathMatcherRouteRulesD4A4D480Attributes](ha.ref.Append("response_headers_to_add"))
}

type PathMatcherRouteRules3F069F0EAttributes struct {
	ref terra.Reference
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRules3F069F0EAttributes {
	return PathMatcherRouteRules3F069F0EAttributes{ref: ref}
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherRouteRules3F069F0EAttributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherRouteRulesD4A4D480Attributes struct {
	ref terra.Reference
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesD4A4D480Attributes {
	return PathMatcherRouteRulesD4A4D480Attributes{ref: ref}
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta PathMatcherRouteRulesD4A4D480Attributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type PathMatcherRouteRulesUrlRedirectAttributes struct {
	ref terra.Reference
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) InternalWithRef(ref terra.Reference) PathMatcherRouteRulesUrlRedirectAttributes {
	return PathMatcherRouteRulesUrlRedirectAttributes{ref: ref}
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_redirect"))
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("https_redirect"))
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_redirect"))
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("prefix_redirect"))
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("redirect_response_code"))
}

func (ur PathMatcherRouteRulesUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("strip_query"))
}

type TestAttributes struct {
	ref terra.Reference
}

func (t TestAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TestAttributes) InternalWithRef(ref terra.Reference) TestAttributes {
	return TestAttributes{ref: ref}
}

func (t TestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TestAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("description"))
}

func (t TestAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("host"))
}

func (t TestAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("path"))
}

func (t TestAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("service"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DefaultRouteActionState struct {
	CorsPolicy              []DefaultRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []DefaultRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []DefaultRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []DefaultRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []DefaultRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []DefaultRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []DefaultRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type DefaultRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type DefaultRouteActionFaultInjectionPolicyState struct {
	Abort []DefaultRouteActionFaultInjectionPolicyAbortState `json:"abort"`
	Delay []DefaultRouteActionFaultInjectionPolicyDelayState `json:"delay"`
}

type DefaultRouteActionFaultInjectionPolicyAbortState struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type DefaultRouteActionFaultInjectionPolicyDelayState struct {
	Percentage float64                                                      `json:"percentage"`
	FixedDelay []DefaultRouteActionFaultInjectionPolicyDelayFixedDelayState `json:"fixed_delay"`
}

type DefaultRouteActionFaultInjectionPolicyDelayFixedDelayState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type DefaultRouteActionRetryPolicyState struct {
	NumRetries      float64                                           `json:"num_retries"`
	RetryConditions []string                                          `json:"retry_conditions"`
	PerTryTimeout   []DefaultRouteActionRetryPolicyPerTryTimeoutState `json:"per_try_timeout"`
}

type DefaultRouteActionRetryPolicyPerTryTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type DefaultRouteActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type DefaultRouteActionWeightedBackendServicesState struct {
	BackendService string                                                       `json:"backend_service"`
	Weight         float64                                                      `json:"weight"`
	HeaderAction   []DefaultRouteActionWeightedBackendServicesHeaderActionState `json:"header_action"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                                         `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                                         `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type DefaultUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type HostRuleState struct {
	Description string   `json:"description"`
	Hosts       []string `json:"hosts"`
	PathMatcher string   `json:"path_matcher"`
}

type PathMatcherState struct {
	DefaultService     string                               `json:"default_service"`
	Description        string                               `json:"description"`
	Name               string                               `json:"name"`
	DefaultUrlRedirect []PathMatcherDefaultUrlRedirectState `json:"default_url_redirect"`
	PathRule           []PathMatcherPathRuleState           `json:"path_rule"`
	RouteRules         []PathMatcherRouteRulesState         `json:"route_rules"`
}

type PathMatcherDefaultUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type PathMatcherPathRuleState struct {
	Paths       []string                              `json:"paths"`
	Service     string                                `json:"service"`
	RouteAction []PathMatcherPathRuleRouteActionState `json:"route_action"`
	UrlRedirect []PathMatcherPathRuleUrlRedirectState `json:"url_redirect"`
}

type PathMatcherPathRuleRouteActionState struct {
	CorsPolicy              []PathMatcherPathRuleRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []PathMatcherPathRuleRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []PathMatcherPathRuleRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []PathMatcherPathRuleRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []PathMatcherPathRuleRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []PathMatcherPathRuleRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []PathMatcherPathRuleRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type PathMatcherPathRuleRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type PathMatcherPathRuleRouteActionFaultInjectionPolicyState struct {
	Abort []PathMatcherPathRuleCa6Fd7F0State `json:"abort"`
	Delay []PathMatcherPathRuleCca2E374State `json:"delay"`
}

type PathMatcherPathRuleCa6Fd7F0State struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type PathMatcherPathRuleCca2E374State struct {
	Percentage float64                            `json:"percentage"`
	FixedDelay []PathMatcherPathRule8422D1E5State `json:"fixed_delay"`
}

type PathMatcherPathRule8422D1E5State struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherPathRuleRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type PathMatcherPathRuleRouteActionRetryPolicyState struct {
	NumRetries      float64                            `json:"num_retries"`
	RetryConditions []string                           `json:"retry_conditions"`
	PerTryTimeout   []PathMatcherPathRule867260A6State `json:"per_try_timeout"`
}

type PathMatcherPathRule867260A6State struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherPathRuleRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherPathRuleRouteActionUrlRewriteState struct {
	HostRewrite       string `json:"host_rewrite"`
	PathPrefixRewrite string `json:"path_prefix_rewrite"`
}

type PathMatcherPathRuleRouteActionWeightedBackendServicesState struct {
	BackendService string                             `json:"backend_service"`
	Weight         float64                            `json:"weight"`
	HeaderAction   []PathMatcherPathRuleBee7358BState `json:"header_action"`
}

type PathMatcherPathRuleBee7358BState struct {
	RequestHeadersToRemove  []string                           `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                           `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathMatcherPathRule3F069F0EState `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathMatcherPathRuleD4A4D480State `json:"response_headers_to_add"`
}

type PathMatcherPathRule3F069F0EState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherPathRuleD4A4D480State struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherPathRuleUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type PathMatcherRouteRulesState struct {
	Priority     float64                                  `json:"priority"`
	Service      string                                   `json:"service"`
	HeaderAction []PathMatcherRouteRulesHeaderActionState `json:"header_action"`
	MatchRules   []PathMatcherRouteRulesMatchRulesState   `json:"match_rules"`
	RouteAction  []PathMatcherRouteRulesRouteActionState  `json:"route_action"`
	UrlRedirect  []PathMatcherRouteRulesUrlRedirectState  `json:"url_redirect"`
}

type PathMatcherRouteRulesHeaderActionState struct {
	RequestHeadersToRemove  []string                                                     `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                                                     `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathMatcherRouteRulesHeaderActionRequestHeadersToAddState  `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathMatcherRouteRulesHeaderActionResponseHeadersToAddState `json:"response_headers_to_add"`
}

type PathMatcherRouteRulesHeaderActionRequestHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherRouteRulesHeaderActionResponseHeadersToAddState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherRouteRulesMatchRulesState struct {
	FullPathMatch         string                                                      `json:"full_path_match"`
	IgnoreCase            bool                                                        `json:"ignore_case"`
	PathTemplateMatch     string                                                      `json:"path_template_match"`
	PrefixMatch           string                                                      `json:"prefix_match"`
	RegexMatch            string                                                      `json:"regex_match"`
	HeaderMatches         []PathMatcherRouteRulesMatchRulesHeaderMatchesState         `json:"header_matches"`
	MetadataFilters       []PathMatcherRouteRulesMatchRulesMetadataFiltersState       `json:"metadata_filters"`
	QueryParameterMatches []PathMatcherRouteRulesMatchRulesQueryParameterMatchesState `json:"query_parameter_matches"`
}

type PathMatcherRouteRulesMatchRulesHeaderMatchesState struct {
	ExactMatch   string                               `json:"exact_match"`
	HeaderName   string                               `json:"header_name"`
	InvertMatch  bool                                 `json:"invert_match"`
	PrefixMatch  string                               `json:"prefix_match"`
	PresentMatch bool                                 `json:"present_match"`
	RegexMatch   string                               `json:"regex_match"`
	SuffixMatch  string                               `json:"suffix_match"`
	RangeMatch   []PathMatcherRouteRulesCd026639State `json:"range_match"`
}

type PathMatcherRouteRulesCd026639State struct {
	RangeEnd   float64 `json:"range_end"`
	RangeStart float64 `json:"range_start"`
}

type PathMatcherRouteRulesMatchRulesMetadataFiltersState struct {
	FilterMatchCriteria string                               `json:"filter_match_criteria"`
	FilterLabels        []PathMatcherRouteRulesCf4Abc68State `json:"filter_labels"`
}

type PathMatcherRouteRulesCf4Abc68State struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type PathMatcherRouteRulesMatchRulesQueryParameterMatchesState struct {
	ExactMatch   string `json:"exact_match"`
	Name         string `json:"name"`
	PresentMatch bool   `json:"present_match"`
	RegexMatch   string `json:"regex_match"`
}

type PathMatcherRouteRulesRouteActionState struct {
	CorsPolicy              []PathMatcherRouteRulesRouteActionCorsPolicyState              `json:"cors_policy"`
	FaultInjectionPolicy    []PathMatcherRouteRulesRouteActionFaultInjectionPolicyState    `json:"fault_injection_policy"`
	RequestMirrorPolicy     []PathMatcherRouteRulesRouteActionRequestMirrorPolicyState     `json:"request_mirror_policy"`
	RetryPolicy             []PathMatcherRouteRulesRouteActionRetryPolicyState             `json:"retry_policy"`
	Timeout                 []PathMatcherRouteRulesRouteActionTimeoutState                 `json:"timeout"`
	UrlRewrite              []PathMatcherRouteRulesRouteActionUrlRewriteState              `json:"url_rewrite"`
	WeightedBackendServices []PathMatcherRouteRulesRouteActionWeightedBackendServicesState `json:"weighted_backend_services"`
}

type PathMatcherRouteRulesRouteActionCorsPolicyState struct {
	AllowCredentials   bool     `json:"allow_credentials"`
	AllowHeaders       []string `json:"allow_headers"`
	AllowMethods       []string `json:"allow_methods"`
	AllowOriginRegexes []string `json:"allow_origin_regexes"`
	AllowOrigins       []string `json:"allow_origins"`
	Disabled           bool     `json:"disabled"`
	ExposeHeaders      []string `json:"expose_headers"`
	MaxAge             float64  `json:"max_age"`
}

type PathMatcherRouteRulesRouteActionFaultInjectionPolicyState struct {
	Abort []PathMatcherRouteRulesCa6Fd7F0State `json:"abort"`
	Delay []PathMatcherRouteRulesCca2E374State `json:"delay"`
}

type PathMatcherRouteRulesCa6Fd7F0State struct {
	HttpStatus float64 `json:"http_status"`
	Percentage float64 `json:"percentage"`
}

type PathMatcherRouteRulesCca2E374State struct {
	Percentage float64                              `json:"percentage"`
	FixedDelay []PathMatcherRouteRules8422D1E5State `json:"fixed_delay"`
}

type PathMatcherRouteRules8422D1E5State struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherRouteRulesRouteActionRequestMirrorPolicyState struct {
	BackendService string `json:"backend_service"`
}

type PathMatcherRouteRulesRouteActionRetryPolicyState struct {
	NumRetries      float64                              `json:"num_retries"`
	RetryConditions []string                             `json:"retry_conditions"`
	PerTryTimeout   []PathMatcherRouteRules867260A6State `json:"per_try_timeout"`
}

type PathMatcherRouteRules867260A6State struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherRouteRulesRouteActionTimeoutState struct {
	Nanos   float64 `json:"nanos"`
	Seconds string  `json:"seconds"`
}

type PathMatcherRouteRulesRouteActionUrlRewriteState struct {
	HostRewrite         string `json:"host_rewrite"`
	PathPrefixRewrite   string `json:"path_prefix_rewrite"`
	PathTemplateRewrite string `json:"path_template_rewrite"`
}

type PathMatcherRouteRulesRouteActionWeightedBackendServicesState struct {
	BackendService string                               `json:"backend_service"`
	Weight         float64                              `json:"weight"`
	HeaderAction   []PathMatcherRouteRulesBee7358BState `json:"header_action"`
}

type PathMatcherRouteRulesBee7358BState struct {
	RequestHeadersToRemove  []string                             `json:"request_headers_to_remove"`
	ResponseHeadersToRemove []string                             `json:"response_headers_to_remove"`
	RequestHeadersToAdd     []PathMatcherRouteRules3F069F0EState `json:"request_headers_to_add"`
	ResponseHeadersToAdd    []PathMatcherRouteRulesD4A4D480State `json:"response_headers_to_add"`
}

type PathMatcherRouteRules3F069F0EState struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherRouteRulesD4A4D480State struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type PathMatcherRouteRulesUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type TestState struct {
	Description string `json:"description"`
	Host        string `json:"host"`
	Path        string `json:"path"`
	Service     string `json:"service"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
