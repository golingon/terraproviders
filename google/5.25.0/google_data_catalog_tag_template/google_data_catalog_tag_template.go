// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_tag_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_tag_template.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogTagTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdctt *Resource) Type() string {
	return "google_data_catalog_tag_template"
}

// LocalName returns the local name for [Resource].
func (gdctt *Resource) LocalName() string {
	return gdctt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdctt *Resource) Configuration() interface{} {
	return gdctt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdctt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdctt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdctt *Resource) Dependencies() terra.Dependencies {
	return gdctt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdctt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdctt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdctt *Resource) Attributes() googleDataCatalogTagTemplateAttributes {
	return googleDataCatalogTagTemplateAttributes{ref: terra.ReferenceResource(gdctt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdctt *Resource) ImportState(state io.Reader) error {
	gdctt.state = &googleDataCatalogTagTemplateState{}
	if err := json.NewDecoder(state).Decode(gdctt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdctt.Type(), gdctt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdctt *Resource) State() (*googleDataCatalogTagTemplateState, bool) {
	return gdctt.state, gdctt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdctt *Resource) StateMust() *googleDataCatalogTagTemplateState {
	if gdctt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdctt.Type(), gdctt.LocalName()))
	}
	return gdctt.state
}

// Args contains the configurations for google_data_catalog_tag_template.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// TagTemplateId: string, required
	TagTemplateId terra.StringValue `hcl:"tag_template_id,attr" validate:"required"`
	// Fields: min=1
	Fields []Fields `hcl:"fields,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogTagTemplateAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("display_name"))
}

// ForceDelete returns a reference to field force_delete of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(gdctt.ref.Append("force_delete"))
}

// Id returns a reference to field id of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("id"))
}

// Name returns a reference to field name of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("name"))
}

// Project returns a reference to field project of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("project"))
}

// Region returns a reference to field region of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("region"))
}

// TagTemplateId returns a reference to field tag_template_id of google_data_catalog_tag_template.
func (gdctt googleDataCatalogTagTemplateAttributes) TagTemplateId() terra.StringValue {
	return terra.ReferenceAsString(gdctt.ref.Append("tag_template_id"))
}

func (gdctt googleDataCatalogTagTemplateAttributes) Fields() terra.SetValue[FieldsAttributes] {
	return terra.ReferenceAsSet[FieldsAttributes](gdctt.ref.Append("fields"))
}

func (gdctt googleDataCatalogTagTemplateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdctt.ref.Append("timeouts"))
}

type googleDataCatalogTagTemplateState struct {
	DisplayName   string         `json:"display_name"`
	ForceDelete   bool           `json:"force_delete"`
	Id            string         `json:"id"`
	Name          string         `json:"name"`
	Project       string         `json:"project"`
	Region        string         `json:"region"`
	TagTemplateId string         `json:"tag_template_id"`
	Fields        []FieldsState  `json:"fields"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
