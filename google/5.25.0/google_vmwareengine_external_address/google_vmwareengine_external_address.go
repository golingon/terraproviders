// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_external_address

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_external_address.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareengineExternalAddressState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvea *Resource) Type() string {
	return "google_vmwareengine_external_address"
}

// LocalName returns the local name for [Resource].
func (gvea *Resource) LocalName() string {
	return gvea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvea *Resource) Configuration() interface{} {
	return gvea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvea *Resource) Dependencies() terra.Dependencies {
	return gvea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvea *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvea *Resource) Attributes() googleVmwareengineExternalAddressAttributes {
	return googleVmwareengineExternalAddressAttributes{ref: terra.ReferenceResource(gvea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvea *Resource) ImportState(state io.Reader) error {
	gvea.state = &googleVmwareengineExternalAddressState{}
	if err := json.NewDecoder(state).Decode(gvea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvea.Type(), gvea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvea *Resource) State() (*googleVmwareengineExternalAddressState, bool) {
	return gvea.state, gvea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvea *Resource) StateMust() *googleVmwareengineExternalAddressState {
	if gvea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvea.Type(), gvea.LocalName()))
	}
	return gvea.state
}

// Args contains the configurations for google_vmwareengine_external_address.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternalIp: string, required
	InternalIp terra.StringValue `hcl:"internal_ip,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareengineExternalAddressAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("description"))
}

// ExternalIp returns a reference to field external_ip of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) ExternalIp() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("external_ip"))
}

// Id returns a reference to field id of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("id"))
}

// InternalIp returns a reference to field internal_ip of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("internal_ip"))
}

// Name returns a reference to field name of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("name"))
}

// Parent returns a reference to field parent of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("parent"))
}

// State returns a reference to field state of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("state"))
}

// Uid returns a reference to field uid of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_vmwareengine_external_address.
func (gvea googleVmwareengineExternalAddressAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvea.ref.Append("update_time"))
}

func (gvea googleVmwareengineExternalAddressAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvea.ref.Append("timeouts"))
}

type googleVmwareengineExternalAddressState struct {
	CreateTime  string         `json:"create_time"`
	Description string         `json:"description"`
	ExternalIp  string         `json:"external_ip"`
	Id          string         `json:"id"`
	InternalIp  string         `json:"internal_ip"`
	Name        string         `json:"name"`
	Parent      string         `json:"parent"`
	State       string         `json:"state"`
	Uid         string         `json:"uid"`
	UpdateTime  string         `json:"update_time"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
