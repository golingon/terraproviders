// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_asset_organization_feed

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_asset_organization_feed.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudAssetOrganizationFeedState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcaof *Resource) Type() string {
	return "google_cloud_asset_organization_feed"
}

// LocalName returns the local name for [Resource].
func (gcaof *Resource) LocalName() string {
	return gcaof.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcaof *Resource) Configuration() interface{} {
	return gcaof.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcaof *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcaof)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcaof *Resource) Dependencies() terra.Dependencies {
	return gcaof.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcaof *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcaof.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcaof *Resource) Attributes() googleCloudAssetOrganizationFeedAttributes {
	return googleCloudAssetOrganizationFeedAttributes{ref: terra.ReferenceResource(gcaof)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcaof *Resource) ImportState(state io.Reader) error {
	gcaof.state = &googleCloudAssetOrganizationFeedState{}
	if err := json.NewDecoder(state).Decode(gcaof.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcaof.Type(), gcaof.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcaof *Resource) State() (*googleCloudAssetOrganizationFeedState, bool) {
	return gcaof.state, gcaof.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcaof *Resource) StateMust() *googleCloudAssetOrganizationFeedState {
	if gcaof.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcaof.Type(), gcaof.LocalName()))
	}
	return gcaof.state
}

// Args contains the configurations for google_cloud_asset_organization_feed.
type Args struct {
	// AssetNames: list of string, optional
	AssetNames terra.ListValue[terra.StringValue] `hcl:"asset_names,attr"`
	// AssetTypes: list of string, optional
	AssetTypes terra.ListValue[terra.StringValue] `hcl:"asset_types,attr"`
	// BillingProject: string, required
	BillingProject terra.StringValue `hcl:"billing_project,attr" validate:"required"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// FeedId: string, required
	FeedId terra.StringValue `hcl:"feed_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrgId: string, required
	OrgId terra.StringValue `hcl:"org_id,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
	// FeedOutputConfig: required
	FeedOutputConfig *FeedOutputConfig `hcl:"feed_output_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudAssetOrganizationFeedAttributes struct {
	ref terra.Reference
}

// AssetNames returns a reference to field asset_names of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) AssetNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcaof.ref.Append("asset_names"))
}

// AssetTypes returns a reference to field asset_types of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) AssetTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcaof.ref.Append("asset_types"))
}

// BillingProject returns a reference to field billing_project of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) BillingProject() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("billing_project"))
}

// ContentType returns a reference to field content_type of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("content_type"))
}

// FeedId returns a reference to field feed_id of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) FeedId() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("feed_id"))
}

// Id returns a reference to field id of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("id"))
}

// Name returns a reference to field name of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("name"))
}

// OrgId returns a reference to field org_id of google_cloud_asset_organization_feed.
func (gcaof googleCloudAssetOrganizationFeedAttributes) OrgId() terra.StringValue {
	return terra.ReferenceAsString(gcaof.ref.Append("org_id"))
}

func (gcaof googleCloudAssetOrganizationFeedAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gcaof.ref.Append("condition"))
}

func (gcaof googleCloudAssetOrganizationFeedAttributes) FeedOutputConfig() terra.ListValue[FeedOutputConfigAttributes] {
	return terra.ReferenceAsList[FeedOutputConfigAttributes](gcaof.ref.Append("feed_output_config"))
}

func (gcaof googleCloudAssetOrganizationFeedAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcaof.ref.Append("timeouts"))
}

type googleCloudAssetOrganizationFeedState struct {
	AssetNames       []string                `json:"asset_names"`
	AssetTypes       []string                `json:"asset_types"`
	BillingProject   string                  `json:"billing_project"`
	ContentType      string                  `json:"content_type"`
	FeedId           string                  `json:"feed_id"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	OrgId            string                  `json:"org_id"`
	Condition        []ConditionState        `json:"condition"`
	FeedOutputConfig []FeedOutputConfigState `json:"feed_output_config"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
