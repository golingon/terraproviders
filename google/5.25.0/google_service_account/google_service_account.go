// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_service_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_service_account.
type Resource struct {
	Name      string
	Args      Args
	state     *googleServiceAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsa *Resource) Type() string {
	return "google_service_account"
}

// LocalName returns the local name for [Resource].
func (gsa *Resource) LocalName() string {
	return gsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsa *Resource) Configuration() interface{} {
	return gsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsa *Resource) Dependencies() terra.Dependencies {
	return gsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsa *Resource) Attributes() googleServiceAccountAttributes {
	return googleServiceAccountAttributes{ref: terra.ReferenceResource(gsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsa *Resource) ImportState(state io.Reader) error {
	gsa.state = &googleServiceAccountState{}
	if err := json.NewDecoder(state).Decode(gsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsa.Type(), gsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsa *Resource) State() (*googleServiceAccountState, bool) {
	return gsa.state, gsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsa *Resource) StateMust() *googleServiceAccountState {
	if gsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsa.Type(), gsa.LocalName()))
	}
	return gsa.state
}

// Args contains the configurations for google_service_account.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// CreateIgnoreAlreadyExists: bool, optional
	CreateIgnoreAlreadyExists terra.BoolValue `hcl:"create_ignore_already_exists,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleServiceAccountAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of google_service_account.
func (gsa googleServiceAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("account_id"))
}

// CreateIgnoreAlreadyExists returns a reference to field create_ignore_already_exists of google_service_account.
func (gsa googleServiceAccountAttributes) CreateIgnoreAlreadyExists() terra.BoolValue {
	return terra.ReferenceAsBool(gsa.ref.Append("create_ignore_already_exists"))
}

// Description returns a reference to field description of google_service_account.
func (gsa googleServiceAccountAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("description"))
}

// Disabled returns a reference to field disabled of google_service_account.
func (gsa googleServiceAccountAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(gsa.ref.Append("disabled"))
}

// DisplayName returns a reference to field display_name of google_service_account.
func (gsa googleServiceAccountAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("display_name"))
}

// Email returns a reference to field email of google_service_account.
func (gsa googleServiceAccountAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("email"))
}

// Id returns a reference to field id of google_service_account.
func (gsa googleServiceAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("id"))
}

// Member returns a reference to field member of google_service_account.
func (gsa googleServiceAccountAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("member"))
}

// Name returns a reference to field name of google_service_account.
func (gsa googleServiceAccountAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("name"))
}

// Project returns a reference to field project of google_service_account.
func (gsa googleServiceAccountAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("project"))
}

// UniqueId returns a reference to field unique_id of google_service_account.
func (gsa googleServiceAccountAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(gsa.ref.Append("unique_id"))
}

func (gsa googleServiceAccountAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsa.ref.Append("timeouts"))
}

type googleServiceAccountState struct {
	AccountId                 string         `json:"account_id"`
	CreateIgnoreAlreadyExists bool           `json:"create_ignore_already_exists"`
	Description               string         `json:"description"`
	Disabled                  bool           `json:"disabled"`
	DisplayName               string         `json:"display_name"`
	Email                     string         `json:"email"`
	Id                        string         `json:"id"`
	Member                    string         `json:"member"`
	Name                      string         `json:"name"`
	Project                   string         `json:"project"`
	UniqueId                  string         `json:"unique_id"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
