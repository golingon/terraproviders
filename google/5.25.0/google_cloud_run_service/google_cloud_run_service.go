// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_run_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloud_run_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudRunServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcrs *Resource) Type() string {
	return "google_cloud_run_service"
}

// LocalName returns the local name for [Resource].
func (gcrs *Resource) LocalName() string {
	return gcrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcrs *Resource) Configuration() interface{} {
	return gcrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcrs *Resource) Dependencies() terra.Dependencies {
	return gcrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcrs *Resource) Attributes() googleCloudRunServiceAttributes {
	return googleCloudRunServiceAttributes{ref: terra.ReferenceResource(gcrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcrs *Resource) ImportState(state io.Reader) error {
	gcrs.state = &googleCloudRunServiceState{}
	if err := json.NewDecoder(state).Decode(gcrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcrs.Type(), gcrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcrs *Resource) State() (*googleCloudRunServiceState, bool) {
	return gcrs.state, gcrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcrs *Resource) StateMust() *googleCloudRunServiceState {
	if gcrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcrs.Type(), gcrs.LocalName()))
	}
	return gcrs.state
}

// Args contains the configurations for google_cloud_run_service.
type Args struct {
	// AutogenerateRevisionName: bool, optional
	AutogenerateRevisionName terra.BoolValue `hcl:"autogenerate_revision_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Template: optional
	Template *Template `hcl:"template,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Traffic: min=0
	Traffic []Traffic `hcl:"traffic,block" validate:"min=0"`
}

type googleCloudRunServiceAttributes struct {
	ref terra.Reference
}

// AutogenerateRevisionName returns a reference to field autogenerate_revision_name of google_cloud_run_service.
func (gcrs googleCloudRunServiceAttributes) AutogenerateRevisionName() terra.BoolValue {
	return terra.ReferenceAsBool(gcrs.ref.Append("autogenerate_revision_name"))
}

// Id returns a reference to field id of google_cloud_run_service.
func (gcrs googleCloudRunServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcrs.ref.Append("id"))
}

// Location returns a reference to field location of google_cloud_run_service.
func (gcrs googleCloudRunServiceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcrs.ref.Append("location"))
}

// Name returns a reference to field name of google_cloud_run_service.
func (gcrs googleCloudRunServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcrs.ref.Append("name"))
}

// Project returns a reference to field project of google_cloud_run_service.
func (gcrs googleCloudRunServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcrs.ref.Append("project"))
}

func (gcrs googleCloudRunServiceAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](gcrs.ref.Append("status"))
}

func (gcrs googleCloudRunServiceAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](gcrs.ref.Append("metadata"))
}

func (gcrs googleCloudRunServiceAttributes) Template() terra.ListValue[TemplateAttributes] {
	return terra.ReferenceAsList[TemplateAttributes](gcrs.ref.Append("template"))
}

func (gcrs googleCloudRunServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcrs.ref.Append("timeouts"))
}

func (gcrs googleCloudRunServiceAttributes) Traffic() terra.ListValue[TrafficAttributes] {
	return terra.ReferenceAsList[TrafficAttributes](gcrs.ref.Append("traffic"))
}

type googleCloudRunServiceState struct {
	AutogenerateRevisionName bool            `json:"autogenerate_revision_name"`
	Id                       string          `json:"id"`
	Location                 string          `json:"location"`
	Name                     string          `json:"name"`
	Project                  string          `json:"project"`
	Status                   []StatusState   `json:"status"`
	Metadata                 []MetadataState `json:"metadata"`
	Template                 []TemplateState `json:"template"`
	Timeouts                 *TimeoutsState  `json:"timeouts"`
	Traffic                  []TrafficState  `json:"traffic"`
}
