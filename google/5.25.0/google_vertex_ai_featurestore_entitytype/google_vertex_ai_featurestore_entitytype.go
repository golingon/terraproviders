// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vertex_ai_featurestore_entitytype

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vertex_ai_featurestore_entitytype.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVertexAiFeaturestoreEntitytypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvafe *Resource) Type() string {
	return "google_vertex_ai_featurestore_entitytype"
}

// LocalName returns the local name for [Resource].
func (gvafe *Resource) LocalName() string {
	return gvafe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvafe *Resource) Configuration() interface{} {
	return gvafe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvafe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvafe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvafe *Resource) Dependencies() terra.Dependencies {
	return gvafe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvafe *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvafe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvafe *Resource) Attributes() googleVertexAiFeaturestoreEntitytypeAttributes {
	return googleVertexAiFeaturestoreEntitytypeAttributes{ref: terra.ReferenceResource(gvafe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvafe *Resource) ImportState(state io.Reader) error {
	gvafe.state = &googleVertexAiFeaturestoreEntitytypeState{}
	if err := json.NewDecoder(state).Decode(gvafe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvafe.Type(), gvafe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvafe *Resource) State() (*googleVertexAiFeaturestoreEntitytypeState, bool) {
	return gvafe.state, gvafe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvafe *Resource) StateMust() *googleVertexAiFeaturestoreEntitytypeState {
	if gvafe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvafe.Type(), gvafe.LocalName()))
	}
	return gvafe.state
}

// Args contains the configurations for google_vertex_ai_featurestore_entitytype.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Featurestore: string, required
	Featurestore terra.StringValue `hcl:"featurestore,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// MonitoringConfig: optional
	MonitoringConfig *MonitoringConfig `hcl:"monitoring_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVertexAiFeaturestoreEntitytypeAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("create_time"))
}

// Description returns a reference to field description of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafe.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("etag"))
}

// Featurestore returns a reference to field featurestore of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Featurestore() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("featurestore"))
}

// Id returns a reference to field id of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("id"))
}

// Labels returns a reference to field labels of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafe.ref.Append("labels"))
}

// Name returns a reference to field name of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("name"))
}

// Region returns a reference to field region of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gvafe.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_vertex_ai_featurestore_entitytype.
func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gvafe.ref.Append("update_time"))
}

func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) MonitoringConfig() terra.ListValue[MonitoringConfigAttributes] {
	return terra.ReferenceAsList[MonitoringConfigAttributes](gvafe.ref.Append("monitoring_config"))
}

func (gvafe googleVertexAiFeaturestoreEntitytypeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvafe.ref.Append("timeouts"))
}

type googleVertexAiFeaturestoreEntitytypeState struct {
	CreateTime       string                  `json:"create_time"`
	Description      string                  `json:"description"`
	EffectiveLabels  map[string]string       `json:"effective_labels"`
	Etag             string                  `json:"etag"`
	Featurestore     string                  `json:"featurestore"`
	Id               string                  `json:"id"`
	Labels           map[string]string       `json:"labels"`
	Name             string                  `json:"name"`
	Region           string                  `json:"region"`
	TerraformLabels  map[string]string       `json:"terraform_labels"`
	UpdateTime       string                  `json:"update_time"`
	MonitoringConfig []MonitoringConfigState `json:"monitoring_config"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
