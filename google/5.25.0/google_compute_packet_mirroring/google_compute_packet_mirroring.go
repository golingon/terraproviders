// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_packet_mirroring

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_packet_mirroring.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputePacketMirroringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcpm *Resource) Type() string {
	return "google_compute_packet_mirroring"
}

// LocalName returns the local name for [Resource].
func (gcpm *Resource) LocalName() string {
	return gcpm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcpm *Resource) Configuration() interface{} {
	return gcpm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcpm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcpm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcpm *Resource) Dependencies() terra.Dependencies {
	return gcpm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcpm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcpm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcpm *Resource) Attributes() googleComputePacketMirroringAttributes {
	return googleComputePacketMirroringAttributes{ref: terra.ReferenceResource(gcpm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcpm *Resource) ImportState(state io.Reader) error {
	gcpm.state = &googleComputePacketMirroringState{}
	if err := json.NewDecoder(state).Decode(gcpm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcpm.Type(), gcpm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcpm *Resource) State() (*googleComputePacketMirroringState, bool) {
	return gcpm.state, gcpm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcpm *Resource) StateMust() *googleComputePacketMirroringState {
	if gcpm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcpm.Type(), gcpm.LocalName()))
	}
	return gcpm.state
}

// Args contains the configurations for google_compute_packet_mirroring.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// CollectorIlb: required
	CollectorIlb *CollectorIlb `hcl:"collector_ilb,block" validate:"required"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// MirroredResources: required
	MirroredResources *MirroredResources `hcl:"mirrored_resources,block" validate:"required"`
	// Network: required
	Network *Network `hcl:"network,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputePacketMirroringAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("name"))
}

// Priority returns a reference to field priority of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gcpm.ref.Append("priority"))
}

// Project returns a reference to field project of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("project"))
}

// Region returns a reference to field region of google_compute_packet_mirroring.
func (gcpm googleComputePacketMirroringAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gcpm.ref.Append("region"))
}

func (gcpm googleComputePacketMirroringAttributes) CollectorIlb() terra.ListValue[CollectorIlbAttributes] {
	return terra.ReferenceAsList[CollectorIlbAttributes](gcpm.ref.Append("collector_ilb"))
}

func (gcpm googleComputePacketMirroringAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](gcpm.ref.Append("filter"))
}

func (gcpm googleComputePacketMirroringAttributes) MirroredResources() terra.ListValue[MirroredResourcesAttributes] {
	return terra.ReferenceAsList[MirroredResourcesAttributes](gcpm.ref.Append("mirrored_resources"))
}

func (gcpm googleComputePacketMirroringAttributes) Network() terra.ListValue[NetworkAttributes] {
	return terra.ReferenceAsList[NetworkAttributes](gcpm.ref.Append("network"))
}

func (gcpm googleComputePacketMirroringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcpm.ref.Append("timeouts"))
}

type googleComputePacketMirroringState struct {
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	Priority          float64                  `json:"priority"`
	Project           string                   `json:"project"`
	Region            string                   `json:"region"`
	CollectorIlb      []CollectorIlbState      `json:"collector_ilb"`
	Filter            []FilterState            `json:"filter"`
	MirroredResources []MirroredResourcesState `json:"mirrored_resources"`
	Network           []NetworkState           `json:"network"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
