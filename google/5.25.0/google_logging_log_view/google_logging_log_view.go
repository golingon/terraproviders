// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_logging_log_view

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_logging_log_view.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLoggingLogViewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gllv *Resource) Type() string {
	return "google_logging_log_view"
}

// LocalName returns the local name for [Resource].
func (gllv *Resource) LocalName() string {
	return gllv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gllv *Resource) Configuration() interface{} {
	return gllv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gllv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gllv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gllv *Resource) Dependencies() terra.Dependencies {
	return gllv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gllv *Resource) LifecycleManagement() *terra.Lifecycle {
	return gllv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gllv *Resource) Attributes() googleLoggingLogViewAttributes {
	return googleLoggingLogViewAttributes{ref: terra.ReferenceResource(gllv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gllv *Resource) ImportState(state io.Reader) error {
	gllv.state = &googleLoggingLogViewState{}
	if err := json.NewDecoder(state).Decode(gllv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gllv.Type(), gllv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gllv *Resource) State() (*googleLoggingLogViewState, bool) {
	return gllv.state, gllv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gllv *Resource) StateMust() *googleLoggingLogViewState {
	if gllv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gllv.Type(), gllv.LocalName()))
	}
	return gllv.state
}

// Args contains the configurations for google_logging_log_view.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleLoggingLogViewAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("bucket"))
}

// CreateTime returns a reference to field create_time of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("create_time"))
}

// Description returns a reference to field description of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("description"))
}

// Filter returns a reference to field filter of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("filter"))
}

// Id returns a reference to field id of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("id"))
}

// Location returns a reference to field location of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("location"))
}

// Name returns a reference to field name of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("name"))
}

// Parent returns a reference to field parent of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("parent"))
}

// UpdateTime returns a reference to field update_time of google_logging_log_view.
func (gllv googleLoggingLogViewAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gllv.ref.Append("update_time"))
}

func (gllv googleLoggingLogViewAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gllv.ref.Append("timeouts"))
}

type googleLoggingLogViewState struct {
	Bucket      string         `json:"bucket"`
	CreateTime  string         `json:"create_time"`
	Description string         `json:"description"`
	Filter      string         `json:"filter"`
	Id          string         `json:"id"`
	Location    string         `json:"location"`
	Name        string         `json:"name"`
	Parent      string         `json:"parent"`
	UpdateTime  string         `json:"update_time"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
