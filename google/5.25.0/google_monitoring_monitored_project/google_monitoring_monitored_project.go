// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_monitored_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_monitored_project.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringMonitoredProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmmp *Resource) Type() string {
	return "google_monitoring_monitored_project"
}

// LocalName returns the local name for [Resource].
func (gmmp *Resource) LocalName() string {
	return gmmp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmmp *Resource) Configuration() interface{} {
	return gmmp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmmp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmmp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmmp *Resource) Dependencies() terra.Dependencies {
	return gmmp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmmp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmmp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmmp *Resource) Attributes() googleMonitoringMonitoredProjectAttributes {
	return googleMonitoringMonitoredProjectAttributes{ref: terra.ReferenceResource(gmmp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmmp *Resource) ImportState(state io.Reader) error {
	gmmp.state = &googleMonitoringMonitoredProjectState{}
	if err := json.NewDecoder(state).Decode(gmmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmmp.Type(), gmmp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmmp *Resource) State() (*googleMonitoringMonitoredProjectState, bool) {
	return gmmp.state, gmmp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmmp *Resource) StateMust() *googleMonitoringMonitoredProjectState {
	if gmmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmmp.Type(), gmmp.LocalName()))
	}
	return gmmp.state
}

// Args contains the configurations for google_monitoring_monitored_project.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricsScope: string, required
	MetricsScope terra.StringValue `hcl:"metrics_scope,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringMonitoredProjectAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_monitoring_monitored_project.
func (gmmp googleMonitoringMonitoredProjectAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gmmp.ref.Append("create_time"))
}

// Id returns a reference to field id of google_monitoring_monitored_project.
func (gmmp googleMonitoringMonitoredProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmmp.ref.Append("id"))
}

// MetricsScope returns a reference to field metrics_scope of google_monitoring_monitored_project.
func (gmmp googleMonitoringMonitoredProjectAttributes) MetricsScope() terra.StringValue {
	return terra.ReferenceAsString(gmmp.ref.Append("metrics_scope"))
}

// Name returns a reference to field name of google_monitoring_monitored_project.
func (gmmp googleMonitoringMonitoredProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmmp.ref.Append("name"))
}

func (gmmp googleMonitoringMonitoredProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmmp.ref.Append("timeouts"))
}

type googleMonitoringMonitoredProjectState struct {
	CreateTime   string         `json:"create_time"`
	Id           string         `json:"id"`
	MetricsScope string         `json:"metrics_scope"`
	Name         string         `json:"name"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
