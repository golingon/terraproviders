// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_disk_async_replication

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_disk_async_replication.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeDiskAsyncReplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcdar *Resource) Type() string {
	return "google_compute_disk_async_replication"
}

// LocalName returns the local name for [Resource].
func (gcdar *Resource) LocalName() string {
	return gcdar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcdar *Resource) Configuration() interface{} {
	return gcdar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcdar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcdar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcdar *Resource) Dependencies() terra.Dependencies {
	return gcdar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcdar *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcdar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcdar *Resource) Attributes() googleComputeDiskAsyncReplicationAttributes {
	return googleComputeDiskAsyncReplicationAttributes{ref: terra.ReferenceResource(gcdar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcdar *Resource) ImportState(state io.Reader) error {
	gcdar.state = &googleComputeDiskAsyncReplicationState{}
	if err := json.NewDecoder(state).Decode(gcdar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcdar.Type(), gcdar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcdar *Resource) State() (*googleComputeDiskAsyncReplicationState, bool) {
	return gcdar.state, gcdar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcdar *Resource) StateMust() *googleComputeDiskAsyncReplicationState {
	if gcdar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcdar.Type(), gcdar.LocalName()))
	}
	return gcdar.state
}

// Args contains the configurations for google_compute_disk_async_replication.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrimaryDisk: string, required
	PrimaryDisk terra.StringValue `hcl:"primary_disk,attr" validate:"required"`
	// SecondaryDisk: required
	SecondaryDisk *SecondaryDisk `hcl:"secondary_disk,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeDiskAsyncReplicationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_disk_async_replication.
func (gcdar googleComputeDiskAsyncReplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcdar.ref.Append("id"))
}

// PrimaryDisk returns a reference to field primary_disk of google_compute_disk_async_replication.
func (gcdar googleComputeDiskAsyncReplicationAttributes) PrimaryDisk() terra.StringValue {
	return terra.ReferenceAsString(gcdar.ref.Append("primary_disk"))
}

func (gcdar googleComputeDiskAsyncReplicationAttributes) SecondaryDisk() terra.ListValue[SecondaryDiskAttributes] {
	return terra.ReferenceAsList[SecondaryDiskAttributes](gcdar.ref.Append("secondary_disk"))
}

func (gcdar googleComputeDiskAsyncReplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcdar.ref.Append("timeouts"))
}

type googleComputeDiskAsyncReplicationState struct {
	Id            string               `json:"id"`
	PrimaryDisk   string               `json:"primary_disk"`
	SecondaryDisk []SecondaryDiskState `json:"secondary_disk"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
