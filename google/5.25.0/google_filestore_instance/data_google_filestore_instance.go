// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_filestore_instance

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_filestore_instance.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gfi *DataSource) DataSource() string {
	return "google_filestore_instance"
}

// LocalName returns the local name for [DataSource].
func (gfi *DataSource) LocalName() string {
	return gfi.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gfi *DataSource) Configuration() interface{} {
	return gfi.Args
}

// Attributes returns the attributes for [DataSource].
func (gfi *DataSource) Attributes() dataGoogleFilestoreInstanceAttributes {
	return dataGoogleFilestoreInstanceAttributes{ref: terra.ReferenceDataSource(gfi)}
}

// DataArgs contains the configurations for google_filestore_instance.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type dataGoogleFilestoreInstanceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("create_time"))
}

// Description returns a reference to field description of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfi.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("etag"))
}

// Id returns a reference to field id of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfi.ref.Append("labels"))
}

// Location returns a reference to field location of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("location"))
}

// Name returns a reference to field name of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("name"))
}

// Project returns a reference to field project of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gfi.ref.Append("terraform_labels"))
}

// Tier returns a reference to field tier of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("tier"))
}

// Zone returns a reference to field zone of google_filestore_instance.
func (gfi dataGoogleFilestoreInstanceAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("zone"))
}

func (gfi dataGoogleFilestoreInstanceAttributes) FileShares() terra.ListValue[DataFileSharesAttributes] {
	return terra.ReferenceAsList[DataFileSharesAttributes](gfi.ref.Append("file_shares"))
}

func (gfi dataGoogleFilestoreInstanceAttributes) Networks() terra.ListValue[DataNetworksAttributes] {
	return terra.ReferenceAsList[DataNetworksAttributes](gfi.ref.Append("networks"))
}
