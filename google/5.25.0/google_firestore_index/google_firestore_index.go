// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_firestore_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_firestore_index.
type Resource struct {
	Name      string
	Args      Args
	state     *googleFirestoreIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gfi *Resource) Type() string {
	return "google_firestore_index"
}

// LocalName returns the local name for [Resource].
func (gfi *Resource) LocalName() string {
	return gfi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gfi *Resource) Configuration() interface{} {
	return gfi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gfi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gfi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gfi *Resource) Dependencies() terra.Dependencies {
	return gfi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gfi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gfi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gfi *Resource) Attributes() googleFirestoreIndexAttributes {
	return googleFirestoreIndexAttributes{ref: terra.ReferenceResource(gfi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gfi *Resource) ImportState(state io.Reader) error {
	gfi.state = &googleFirestoreIndexState{}
	if err := json.NewDecoder(state).Decode(gfi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gfi.Type(), gfi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gfi *Resource) State() (*googleFirestoreIndexState, bool) {
	return gfi.state, gfi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gfi *Resource) StateMust() *googleFirestoreIndexState {
	if gfi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gfi.Type(), gfi.LocalName()))
	}
	return gfi.state
}

// Args contains the configurations for google_firestore_index.
type Args struct {
	// ApiScope: string, optional
	ApiScope terra.StringValue `hcl:"api_scope,attr"`
	// Collection: string, required
	Collection terra.StringValue `hcl:"collection,attr" validate:"required"`
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// QueryScope: string, optional
	QueryScope terra.StringValue `hcl:"query_scope,attr"`
	// Fields: min=2
	Fields []Fields `hcl:"fields,block" validate:"min=2"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleFirestoreIndexAttributes struct {
	ref terra.Reference
}

// ApiScope returns a reference to field api_scope of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) ApiScope() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("api_scope"))
}

// Collection returns a reference to field collection of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) Collection() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("collection"))
}

// Database returns a reference to field database of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("database"))
}

// Id returns a reference to field id of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("id"))
}

// Name returns a reference to field name of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("name"))
}

// Project returns a reference to field project of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("project"))
}

// QueryScope returns a reference to field query_scope of google_firestore_index.
func (gfi googleFirestoreIndexAttributes) QueryScope() terra.StringValue {
	return terra.ReferenceAsString(gfi.ref.Append("query_scope"))
}

func (gfi googleFirestoreIndexAttributes) Fields() terra.ListValue[FieldsAttributes] {
	return terra.ReferenceAsList[FieldsAttributes](gfi.ref.Append("fields"))
}

func (gfi googleFirestoreIndexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gfi.ref.Append("timeouts"))
}

type googleFirestoreIndexState struct {
	ApiScope   string         `json:"api_scope"`
	Collection string         `json:"collection"`
	Database   string         `json:"database"`
	Id         string         `json:"id"`
	Name       string         `json:"name"`
	Project    string         `json:"project"`
	QueryScope string         `json:"query_scope"`
	Fields     []FieldsState  `json:"fields"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
