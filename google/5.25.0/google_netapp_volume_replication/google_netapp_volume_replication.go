// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_netapp_volume_replication

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_netapp_volume_replication.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNetappVolumeReplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gnvr *Resource) Type() string {
	return "google_netapp_volume_replication"
}

// LocalName returns the local name for [Resource].
func (gnvr *Resource) LocalName() string {
	return gnvr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gnvr *Resource) Configuration() interface{} {
	return gnvr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gnvr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gnvr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gnvr *Resource) Dependencies() terra.Dependencies {
	return gnvr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gnvr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gnvr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gnvr *Resource) Attributes() googleNetappVolumeReplicationAttributes {
	return googleNetappVolumeReplicationAttributes{ref: terra.ReferenceResource(gnvr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gnvr *Resource) ImportState(state io.Reader) error {
	gnvr.state = &googleNetappVolumeReplicationState{}
	if err := json.NewDecoder(state).Decode(gnvr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gnvr.Type(), gnvr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gnvr *Resource) State() (*googleNetappVolumeReplicationState, bool) {
	return gnvr.state, gnvr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gnvr *Resource) StateMust() *googleNetappVolumeReplicationState {
	if gnvr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gnvr.Type(), gnvr.LocalName()))
	}
	return gnvr.state
}

// Args contains the configurations for google_netapp_volume_replication.
type Args struct {
	// DeleteDestinationVolume: bool, optional
	DeleteDestinationVolume terra.BoolValue `hcl:"delete_destination_volume,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceStopping: bool, optional
	ForceStopping terra.BoolValue `hcl:"force_stopping,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReplicationEnabled: bool, optional
	ReplicationEnabled terra.BoolValue `hcl:"replication_enabled,attr"`
	// ReplicationSchedule: string, required
	ReplicationSchedule terra.StringValue `hcl:"replication_schedule,attr" validate:"required"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
	// WaitForMirror: bool, optional
	WaitForMirror terra.BoolValue `hcl:"wait_for_mirror,attr"`
	// DestinationVolumeParameters: optional
	DestinationVolumeParameters *DestinationVolumeParameters `hcl:"destination_volume_parameters,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleNetappVolumeReplicationAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("create_time"))
}

// DeleteDestinationVolume returns a reference to field delete_destination_volume of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) DeleteDestinationVolume() terra.BoolValue {
	return terra.ReferenceAsBool(gnvr.ref.Append("delete_destination_volume"))
}

// Description returns a reference to field description of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("description"))
}

// DestinationVolume returns a reference to field destination_volume of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) DestinationVolume() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("destination_volume"))
}

// EffectiveLabels returns a reference to field effective_labels of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvr.ref.Append("effective_labels"))
}

// ForceStopping returns a reference to field force_stopping of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) ForceStopping() terra.BoolValue {
	return terra.ReferenceAsBool(gnvr.ref.Append("force_stopping"))
}

// Healthy returns a reference to field healthy of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Healthy() terra.BoolValue {
	return terra.ReferenceAsBool(gnvr.ref.Append("healthy"))
}

// Id returns a reference to field id of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("id"))
}

// Labels returns a reference to field labels of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvr.ref.Append("labels"))
}

// Location returns a reference to field location of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("location"))
}

// MirrorState returns a reference to field mirror_state of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) MirrorState() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("mirror_state"))
}

// Name returns a reference to field name of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("name"))
}

// Project returns a reference to field project of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("project"))
}

// ReplicationEnabled returns a reference to field replication_enabled of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) ReplicationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gnvr.ref.Append("replication_enabled"))
}

// ReplicationSchedule returns a reference to field replication_schedule of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) ReplicationSchedule() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("replication_schedule"))
}

// Role returns a reference to field role of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("role"))
}

// SourceVolume returns a reference to field source_volume of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) SourceVolume() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("source_volume"))
}

// State returns a reference to field state of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("state"))
}

// StateDetails returns a reference to field state_details of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) StateDetails() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("state_details"))
}

// TerraformLabels returns a reference to field terraform_labels of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gnvr.ref.Append("terraform_labels"))
}

// VolumeName returns a reference to field volume_name of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(gnvr.ref.Append("volume_name"))
}

// WaitForMirror returns a reference to field wait_for_mirror of google_netapp_volume_replication.
func (gnvr googleNetappVolumeReplicationAttributes) WaitForMirror() terra.BoolValue {
	return terra.ReferenceAsBool(gnvr.ref.Append("wait_for_mirror"))
}

func (gnvr googleNetappVolumeReplicationAttributes) TransferStats() terra.ListValue[TransferStatsAttributes] {
	return terra.ReferenceAsList[TransferStatsAttributes](gnvr.ref.Append("transfer_stats"))
}

func (gnvr googleNetappVolumeReplicationAttributes) DestinationVolumeParameters() terra.ListValue[DestinationVolumeParametersAttributes] {
	return terra.ReferenceAsList[DestinationVolumeParametersAttributes](gnvr.ref.Append("destination_volume_parameters"))
}

func (gnvr googleNetappVolumeReplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gnvr.ref.Append("timeouts"))
}

type googleNetappVolumeReplicationState struct {
	CreateTime                  string                             `json:"create_time"`
	DeleteDestinationVolume     bool                               `json:"delete_destination_volume"`
	Description                 string                             `json:"description"`
	DestinationVolume           string                             `json:"destination_volume"`
	EffectiveLabels             map[string]string                  `json:"effective_labels"`
	ForceStopping               bool                               `json:"force_stopping"`
	Healthy                     bool                               `json:"healthy"`
	Id                          string                             `json:"id"`
	Labels                      map[string]string                  `json:"labels"`
	Location                    string                             `json:"location"`
	MirrorState                 string                             `json:"mirror_state"`
	Name                        string                             `json:"name"`
	Project                     string                             `json:"project"`
	ReplicationEnabled          bool                               `json:"replication_enabled"`
	ReplicationSchedule         string                             `json:"replication_schedule"`
	Role                        string                             `json:"role"`
	SourceVolume                string                             `json:"source_volume"`
	State                       string                             `json:"state"`
	StateDetails                string                             `json:"state_details"`
	TerraformLabels             map[string]string                  `json:"terraform_labels"`
	VolumeName                  string                             `json:"volume_name"`
	WaitForMirror               bool                               `json:"wait_for_mirror"`
	TransferStats               []TransferStatsState               `json:"transfer_stats"`
	DestinationVolumeParameters []DestinationVolumeParametersState `json:"destination_volume_parameters"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
