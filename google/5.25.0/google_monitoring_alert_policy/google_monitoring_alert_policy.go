// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_alert_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_alert_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringAlertPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmap *Resource) Type() string {
	return "google_monitoring_alert_policy"
}

// LocalName returns the local name for [Resource].
func (gmap *Resource) LocalName() string {
	return gmap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmap *Resource) Configuration() interface{} {
	return gmap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmap *Resource) Dependencies() terra.Dependencies {
	return gmap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmap *Resource) Attributes() googleMonitoringAlertPolicyAttributes {
	return googleMonitoringAlertPolicyAttributes{ref: terra.ReferenceResource(gmap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmap *Resource) ImportState(state io.Reader) error {
	gmap.state = &googleMonitoringAlertPolicyState{}
	if err := json.NewDecoder(state).Decode(gmap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmap.Type(), gmap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmap *Resource) State() (*googleMonitoringAlertPolicyState, bool) {
	return gmap.state, gmap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmap *Resource) StateMust() *googleMonitoringAlertPolicyState {
	if gmap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmap.Type(), gmap.LocalName()))
	}
	return gmap.state
}

// Args contains the configurations for google_monitoring_alert_policy.
type Args struct {
	// Combiner: string, required
	Combiner terra.StringValue `hcl:"combiner,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NotificationChannels: list of string, optional
	NotificationChannels terra.ListValue[terra.StringValue] `hcl:"notification_channels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Severity: string, optional
	Severity terra.StringValue `hcl:"severity,attr"`
	// UserLabels: map of string, optional
	UserLabels terra.MapValue[terra.StringValue] `hcl:"user_labels,attr"`
	// AlertStrategy: optional
	AlertStrategy *AlertStrategy `hcl:"alert_strategy,block"`
	// Conditions: min=1
	Conditions []Conditions `hcl:"conditions,block" validate:"min=1"`
	// Documentation: optional
	Documentation *Documentation `hcl:"documentation,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringAlertPolicyAttributes struct {
	ref terra.Reference
}

// Combiner returns a reference to field combiner of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Combiner() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("combiner"))
}

// DisplayName returns a reference to field display_name of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("display_name"))
}

// Enabled returns a reference to field enabled of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gmap.ref.Append("enabled"))
}

// Id returns a reference to field id of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("id"))
}

// Name returns a reference to field name of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("name"))
}

// NotificationChannels returns a reference to field notification_channels of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) NotificationChannels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gmap.ref.Append("notification_channels"))
}

// Project returns a reference to field project of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("project"))
}

// Severity returns a reference to field severity of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) Severity() terra.StringValue {
	return terra.ReferenceAsString(gmap.ref.Append("severity"))
}

// UserLabels returns a reference to field user_labels of google_monitoring_alert_policy.
func (gmap googleMonitoringAlertPolicyAttributes) UserLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gmap.ref.Append("user_labels"))
}

func (gmap googleMonitoringAlertPolicyAttributes) CreationRecord() terra.ListValue[CreationRecordAttributes] {
	return terra.ReferenceAsList[CreationRecordAttributes](gmap.ref.Append("creation_record"))
}

func (gmap googleMonitoringAlertPolicyAttributes) AlertStrategy() terra.ListValue[AlertStrategyAttributes] {
	return terra.ReferenceAsList[AlertStrategyAttributes](gmap.ref.Append("alert_strategy"))
}

func (gmap googleMonitoringAlertPolicyAttributes) Conditions() terra.ListValue[ConditionsAttributes] {
	return terra.ReferenceAsList[ConditionsAttributes](gmap.ref.Append("conditions"))
}

func (gmap googleMonitoringAlertPolicyAttributes) Documentation() terra.ListValue[DocumentationAttributes] {
	return terra.ReferenceAsList[DocumentationAttributes](gmap.ref.Append("documentation"))
}

func (gmap googleMonitoringAlertPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmap.ref.Append("timeouts"))
}

type googleMonitoringAlertPolicyState struct {
	Combiner             string                `json:"combiner"`
	DisplayName          string                `json:"display_name"`
	Enabled              bool                  `json:"enabled"`
	Id                   string                `json:"id"`
	Name                 string                `json:"name"`
	NotificationChannels []string              `json:"notification_channels"`
	Project              string                `json:"project"`
	Severity             string                `json:"severity"`
	UserLabels           map[string]string     `json:"user_labels"`
	CreationRecord       []CreationRecordState `json:"creation_record"`
	AlertStrategy        []AlertStrategyState  `json:"alert_strategy"`
	Conditions           []ConditionsState     `json:"conditions"`
	Documentation        []DocumentationState  `json:"documentation"`
	Timeouts             *TimeoutsState        `json:"timeouts"`
}
