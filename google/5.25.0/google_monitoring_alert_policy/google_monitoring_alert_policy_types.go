// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_alert_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AlertStrategy struct {
	// AutoClose: string, optional
	AutoClose terra.StringValue `hcl:"auto_close,attr"`
	// AlertStrategyNotificationChannelStrategy: min=0
	NotificationChannelStrategy []AlertStrategyNotificationChannelStrategy `hcl:"notification_channel_strategy,block" validate:"min=0"`
	// AlertStrategyNotificationRateLimit: optional
	NotificationRateLimit *AlertStrategyNotificationRateLimit `hcl:"notification_rate_limit,block"`
}

type AlertStrategyNotificationChannelStrategy struct {
	// NotificationChannelNames: list of string, optional
	NotificationChannelNames terra.ListValue[terra.StringValue] `hcl:"notification_channel_names,attr"`
	// RenotifyInterval: string, optional
	RenotifyInterval terra.StringValue `hcl:"renotify_interval,attr"`
}

type AlertStrategyNotificationRateLimit struct {
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
}

type Conditions struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ConditionsConditionAbsent: optional
	ConditionAbsent *ConditionsConditionAbsent `hcl:"condition_absent,block"`
	// ConditionsConditionMatchedLog: optional
	ConditionMatchedLog *ConditionsConditionMatchedLog `hcl:"condition_matched_log,block"`
	// ConditionsConditionMonitoringQueryLanguage: optional
	ConditionMonitoringQueryLanguage *ConditionsConditionMonitoringQueryLanguage `hcl:"condition_monitoring_query_language,block"`
	// ConditionsConditionPrometheusQueryLanguage: optional
	ConditionPrometheusQueryLanguage *ConditionsConditionPrometheusQueryLanguage `hcl:"condition_prometheus_query_language,block"`
	// ConditionsConditionThreshold: optional
	ConditionThreshold *ConditionsConditionThreshold `hcl:"condition_threshold,block"`
}

type ConditionsConditionAbsent struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// ConditionsConditionAbsentAggregations: min=0
	Aggregations []ConditionsConditionAbsentAggregations `hcl:"aggregations,block" validate:"min=0"`
	// ConditionsConditionAbsentTrigger: optional
	Trigger *ConditionsConditionAbsentTrigger `hcl:"trigger,block"`
}

type ConditionsConditionAbsentAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type ConditionsConditionAbsentTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type ConditionsConditionMatchedLog struct {
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// LabelExtractors: map of string, optional
	LabelExtractors terra.MapValue[terra.StringValue] `hcl:"label_extractors,attr"`
}

type ConditionsConditionMonitoringQueryLanguage struct {
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// EvaluationMissingData: string, optional
	EvaluationMissingData terra.StringValue `hcl:"evaluation_missing_data,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// ConditionsConditionMonitoringQueryLanguageTrigger: optional
	Trigger *ConditionsConditionMonitoringQueryLanguageTrigger `hcl:"trigger,block"`
}

type ConditionsConditionMonitoringQueryLanguageTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type ConditionsConditionPrometheusQueryLanguage struct {
	// AlertRule: string, optional
	AlertRule terra.StringValue `hcl:"alert_rule,attr"`
	// Duration: string, optional
	Duration terra.StringValue `hcl:"duration,attr"`
	// EvaluationInterval: string, optional
	EvaluationInterval terra.StringValue `hcl:"evaluation_interval,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// RuleGroup: string, optional
	RuleGroup terra.StringValue `hcl:"rule_group,attr"`
}

type ConditionsConditionThreshold struct {
	// Comparison: string, required
	Comparison terra.StringValue `hcl:"comparison,attr" validate:"required"`
	// DenominatorFilter: string, optional
	DenominatorFilter terra.StringValue `hcl:"denominator_filter,attr"`
	// Duration: string, required
	Duration terra.StringValue `hcl:"duration,attr" validate:"required"`
	// EvaluationMissingData: string, optional
	EvaluationMissingData terra.StringValue `hcl:"evaluation_missing_data,attr"`
	// Filter: string, optional
	Filter terra.StringValue `hcl:"filter,attr"`
	// ThresholdValue: number, optional
	ThresholdValue terra.NumberValue `hcl:"threshold_value,attr"`
	// ConditionsConditionThresholdAggregations: min=0
	Aggregations []ConditionsConditionThresholdAggregations `hcl:"aggregations,block" validate:"min=0"`
	// ConditionsConditionThresholdDenominatorAggregations: min=0
	DenominatorAggregations []ConditionsConditionThresholdDenominatorAggregations `hcl:"denominator_aggregations,block" validate:"min=0"`
	// ConditionsConditionThresholdForecastOptions: optional
	ForecastOptions *ConditionsConditionThresholdForecastOptions `hcl:"forecast_options,block"`
	// ConditionsConditionThresholdTrigger: optional
	Trigger *ConditionsConditionThresholdTrigger `hcl:"trigger,block"`
}

type ConditionsConditionThresholdAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type ConditionsConditionThresholdDenominatorAggregations struct {
	// AlignmentPeriod: string, optional
	AlignmentPeriod terra.StringValue `hcl:"alignment_period,attr"`
	// CrossSeriesReducer: string, optional
	CrossSeriesReducer terra.StringValue `hcl:"cross_series_reducer,attr"`
	// GroupByFields: list of string, optional
	GroupByFields terra.ListValue[terra.StringValue] `hcl:"group_by_fields,attr"`
	// PerSeriesAligner: string, optional
	PerSeriesAligner terra.StringValue `hcl:"per_series_aligner,attr"`
}

type ConditionsConditionThresholdForecastOptions struct {
	// ForecastHorizon: string, required
	ForecastHorizon terra.StringValue `hcl:"forecast_horizon,attr" validate:"required"`
}

type ConditionsConditionThresholdTrigger struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Percent: number, optional
	Percent terra.NumberValue `hcl:"percent,attr"`
}

type Documentation struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// MimeType: string, optional
	MimeType terra.StringValue `hcl:"mime_type,attr"`
	// Subject: string, optional
	Subject terra.StringValue `hcl:"subject,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type CreationRecordAttributes struct {
	ref terra.Reference
}

func (cr CreationRecordAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CreationRecordAttributes) InternalWithRef(ref terra.Reference) CreationRecordAttributes {
	return CreationRecordAttributes{ref: ref}
}

func (cr CreationRecordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr CreationRecordAttributes) MutateTime() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("mutate_time"))
}

func (cr CreationRecordAttributes) MutatedBy() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("mutated_by"))
}

type AlertStrategyAttributes struct {
	ref terra.Reference
}

func (as AlertStrategyAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AlertStrategyAttributes) InternalWithRef(ref terra.Reference) AlertStrategyAttributes {
	return AlertStrategyAttributes{ref: ref}
}

func (as AlertStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AlertStrategyAttributes) AutoClose() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("auto_close"))
}

func (as AlertStrategyAttributes) NotificationChannelStrategy() terra.ListValue[AlertStrategyNotificationChannelStrategyAttributes] {
	return terra.ReferenceAsList[AlertStrategyNotificationChannelStrategyAttributes](as.ref.Append("notification_channel_strategy"))
}

func (as AlertStrategyAttributes) NotificationRateLimit() terra.ListValue[AlertStrategyNotificationRateLimitAttributes] {
	return terra.ReferenceAsList[AlertStrategyNotificationRateLimitAttributes](as.ref.Append("notification_rate_limit"))
}

type AlertStrategyNotificationChannelStrategyAttributes struct {
	ref terra.Reference
}

func (ncs AlertStrategyNotificationChannelStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ncs.ref, nil
}

func (ncs AlertStrategyNotificationChannelStrategyAttributes) InternalWithRef(ref terra.Reference) AlertStrategyNotificationChannelStrategyAttributes {
	return AlertStrategyNotificationChannelStrategyAttributes{ref: ref}
}

func (ncs AlertStrategyNotificationChannelStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncs.ref.InternalTokens()
}

func (ncs AlertStrategyNotificationChannelStrategyAttributes) NotificationChannelNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ncs.ref.Append("notification_channel_names"))
}

func (ncs AlertStrategyNotificationChannelStrategyAttributes) RenotifyInterval() terra.StringValue {
	return terra.ReferenceAsString(ncs.ref.Append("renotify_interval"))
}

type AlertStrategyNotificationRateLimitAttributes struct {
	ref terra.Reference
}

func (nrl AlertStrategyNotificationRateLimitAttributes) InternalRef() (terra.Reference, error) {
	return nrl.ref, nil
}

func (nrl AlertStrategyNotificationRateLimitAttributes) InternalWithRef(ref terra.Reference) AlertStrategyNotificationRateLimitAttributes {
	return AlertStrategyNotificationRateLimitAttributes{ref: ref}
}

func (nrl AlertStrategyNotificationRateLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nrl.ref.InternalTokens()
}

func (nrl AlertStrategyNotificationRateLimitAttributes) Period() terra.StringValue {
	return terra.ReferenceAsString(nrl.ref.Append("period"))
}

type ConditionsAttributes struct {
	ref terra.Reference
}

func (c ConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionsAttributes) InternalWithRef(ref terra.Reference) ConditionsAttributes {
	return ConditionsAttributes{ref: ref}
}

func (c ConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("display_name"))
}

func (c ConditionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c ConditionsAttributes) ConditionAbsent() terra.ListValue[ConditionsConditionAbsentAttributes] {
	return terra.ReferenceAsList[ConditionsConditionAbsentAttributes](c.ref.Append("condition_absent"))
}

func (c ConditionsAttributes) ConditionMatchedLog() terra.ListValue[ConditionsConditionMatchedLogAttributes] {
	return terra.ReferenceAsList[ConditionsConditionMatchedLogAttributes](c.ref.Append("condition_matched_log"))
}

func (c ConditionsAttributes) ConditionMonitoringQueryLanguage() terra.ListValue[ConditionsConditionMonitoringQueryLanguageAttributes] {
	return terra.ReferenceAsList[ConditionsConditionMonitoringQueryLanguageAttributes](c.ref.Append("condition_monitoring_query_language"))
}

func (c ConditionsAttributes) ConditionPrometheusQueryLanguage() terra.ListValue[ConditionsConditionPrometheusQueryLanguageAttributes] {
	return terra.ReferenceAsList[ConditionsConditionPrometheusQueryLanguageAttributes](c.ref.Append("condition_prometheus_query_language"))
}

func (c ConditionsAttributes) ConditionThreshold() terra.ListValue[ConditionsConditionThresholdAttributes] {
	return terra.ReferenceAsList[ConditionsConditionThresholdAttributes](c.ref.Append("condition_threshold"))
}

type ConditionsConditionAbsentAttributes struct {
	ref terra.Reference
}

func (ca ConditionsConditionAbsentAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ConditionsConditionAbsentAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionAbsentAttributes {
	return ConditionsConditionAbsentAttributes{ref: ref}
}

func (ca ConditionsConditionAbsentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ConditionsConditionAbsentAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("duration"))
}

func (ca ConditionsConditionAbsentAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("filter"))
}

func (ca ConditionsConditionAbsentAttributes) Aggregations() terra.ListValue[ConditionsConditionAbsentAggregationsAttributes] {
	return terra.ReferenceAsList[ConditionsConditionAbsentAggregationsAttributes](ca.ref.Append("aggregations"))
}

func (ca ConditionsConditionAbsentAttributes) Trigger() terra.ListValue[ConditionsConditionAbsentTriggerAttributes] {
	return terra.ReferenceAsList[ConditionsConditionAbsentTriggerAttributes](ca.ref.Append("trigger"))
}

type ConditionsConditionAbsentAggregationsAttributes struct {
	ref terra.Reference
}

func (a ConditionsConditionAbsentAggregationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ConditionsConditionAbsentAggregationsAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionAbsentAggregationsAttributes {
	return ConditionsConditionAbsentAggregationsAttributes{ref: ref}
}

func (a ConditionsConditionAbsentAggregationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ConditionsConditionAbsentAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("alignment_period"))
}

func (a ConditionsConditionAbsentAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("cross_series_reducer"))
}

func (a ConditionsConditionAbsentAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("group_by_fields"))
}

func (a ConditionsConditionAbsentAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("per_series_aligner"))
}

type ConditionsConditionAbsentTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionsConditionAbsentTriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConditionsConditionAbsentTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionAbsentTriggerAttributes {
	return ConditionsConditionAbsentTriggerAttributes{ref: ref}
}

func (t ConditionsConditionAbsentTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConditionsConditionAbsentTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("count"))
}

func (t ConditionsConditionAbsentTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

type ConditionsConditionMatchedLogAttributes struct {
	ref terra.Reference
}

func (cml ConditionsConditionMatchedLogAttributes) InternalRef() (terra.Reference, error) {
	return cml.ref, nil
}

func (cml ConditionsConditionMatchedLogAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionMatchedLogAttributes {
	return ConditionsConditionMatchedLogAttributes{ref: ref}
}

func (cml ConditionsConditionMatchedLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cml.ref.InternalTokens()
}

func (cml ConditionsConditionMatchedLogAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(cml.ref.Append("filter"))
}

func (cml ConditionsConditionMatchedLogAttributes) LabelExtractors() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cml.ref.Append("label_extractors"))
}

type ConditionsConditionMonitoringQueryLanguageAttributes struct {
	ref terra.Reference
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) InternalRef() (terra.Reference, error) {
	return cmql.ref, nil
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionMonitoringQueryLanguageAttributes {
	return ConditionsConditionMonitoringQueryLanguageAttributes{ref: ref}
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmql.ref.InternalTokens()
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(cmql.ref.Append("duration"))
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) EvaluationMissingData() terra.StringValue {
	return terra.ReferenceAsString(cmql.ref.Append("evaluation_missing_data"))
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(cmql.ref.Append("query"))
}

func (cmql ConditionsConditionMonitoringQueryLanguageAttributes) Trigger() terra.ListValue[ConditionsConditionMonitoringQueryLanguageTriggerAttributes] {
	return terra.ReferenceAsList[ConditionsConditionMonitoringQueryLanguageTriggerAttributes](cmql.ref.Append("trigger"))
}

type ConditionsConditionMonitoringQueryLanguageTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionsConditionMonitoringQueryLanguageTriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConditionsConditionMonitoringQueryLanguageTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionMonitoringQueryLanguageTriggerAttributes {
	return ConditionsConditionMonitoringQueryLanguageTriggerAttributes{ref: ref}
}

func (t ConditionsConditionMonitoringQueryLanguageTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConditionsConditionMonitoringQueryLanguageTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("count"))
}

func (t ConditionsConditionMonitoringQueryLanguageTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

type ConditionsConditionPrometheusQueryLanguageAttributes struct {
	ref terra.Reference
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) InternalRef() (terra.Reference, error) {
	return cpql.ref, nil
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionPrometheusQueryLanguageAttributes {
	return ConditionsConditionPrometheusQueryLanguageAttributes{ref: ref}
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpql.ref.InternalTokens()
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) AlertRule() terra.StringValue {
	return terra.ReferenceAsString(cpql.ref.Append("alert_rule"))
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(cpql.ref.Append("duration"))
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) EvaluationInterval() terra.StringValue {
	return terra.ReferenceAsString(cpql.ref.Append("evaluation_interval"))
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cpql.ref.Append("labels"))
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(cpql.ref.Append("query"))
}

func (cpql ConditionsConditionPrometheusQueryLanguageAttributes) RuleGroup() terra.StringValue {
	return terra.ReferenceAsString(cpql.ref.Append("rule_group"))
}

type ConditionsConditionThresholdAttributes struct {
	ref terra.Reference
}

func (ct ConditionsConditionThresholdAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ConditionsConditionThresholdAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionThresholdAttributes {
	return ConditionsConditionThresholdAttributes{ref: ref}
}

func (ct ConditionsConditionThresholdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct ConditionsConditionThresholdAttributes) Comparison() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("comparison"))
}

func (ct ConditionsConditionThresholdAttributes) DenominatorFilter() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("denominator_filter"))
}

func (ct ConditionsConditionThresholdAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("duration"))
}

func (ct ConditionsConditionThresholdAttributes) EvaluationMissingData() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("evaluation_missing_data"))
}

func (ct ConditionsConditionThresholdAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("filter"))
}

func (ct ConditionsConditionThresholdAttributes) ThresholdValue() terra.NumberValue {
	return terra.ReferenceAsNumber(ct.ref.Append("threshold_value"))
}

func (ct ConditionsConditionThresholdAttributes) Aggregations() terra.ListValue[ConditionsConditionThresholdAggregationsAttributes] {
	return terra.ReferenceAsList[ConditionsConditionThresholdAggregationsAttributes](ct.ref.Append("aggregations"))
}

func (ct ConditionsConditionThresholdAttributes) DenominatorAggregations() terra.ListValue[ConditionsConditionThresholdDenominatorAggregationsAttributes] {
	return terra.ReferenceAsList[ConditionsConditionThresholdDenominatorAggregationsAttributes](ct.ref.Append("denominator_aggregations"))
}

func (ct ConditionsConditionThresholdAttributes) ForecastOptions() terra.ListValue[ConditionsConditionThresholdForecastOptionsAttributes] {
	return terra.ReferenceAsList[ConditionsConditionThresholdForecastOptionsAttributes](ct.ref.Append("forecast_options"))
}

func (ct ConditionsConditionThresholdAttributes) Trigger() terra.ListValue[ConditionsConditionThresholdTriggerAttributes] {
	return terra.ReferenceAsList[ConditionsConditionThresholdTriggerAttributes](ct.ref.Append("trigger"))
}

type ConditionsConditionThresholdAggregationsAttributes struct {
	ref terra.Reference
}

func (a ConditionsConditionThresholdAggregationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ConditionsConditionThresholdAggregationsAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionThresholdAggregationsAttributes {
	return ConditionsConditionThresholdAggregationsAttributes{ref: ref}
}

func (a ConditionsConditionThresholdAggregationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ConditionsConditionThresholdAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("alignment_period"))
}

func (a ConditionsConditionThresholdAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("cross_series_reducer"))
}

func (a ConditionsConditionThresholdAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("group_by_fields"))
}

func (a ConditionsConditionThresholdAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("per_series_aligner"))
}

type ConditionsConditionThresholdDenominatorAggregationsAttributes struct {
	ref terra.Reference
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) InternalRef() (terra.Reference, error) {
	return da.ref, nil
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionThresholdDenominatorAggregationsAttributes {
	return ConditionsConditionThresholdDenominatorAggregationsAttributes{ref: ref}
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return da.ref.InternalTokens()
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) AlignmentPeriod() terra.StringValue {
	return terra.ReferenceAsString(da.ref.Append("alignment_period"))
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) CrossSeriesReducer() terra.StringValue {
	return terra.ReferenceAsString(da.ref.Append("cross_series_reducer"))
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) GroupByFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](da.ref.Append("group_by_fields"))
}

func (da ConditionsConditionThresholdDenominatorAggregationsAttributes) PerSeriesAligner() terra.StringValue {
	return terra.ReferenceAsString(da.ref.Append("per_series_aligner"))
}

type ConditionsConditionThresholdForecastOptionsAttributes struct {
	ref terra.Reference
}

func (fo ConditionsConditionThresholdForecastOptionsAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo ConditionsConditionThresholdForecastOptionsAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionThresholdForecastOptionsAttributes {
	return ConditionsConditionThresholdForecastOptionsAttributes{ref: ref}
}

func (fo ConditionsConditionThresholdForecastOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo ConditionsConditionThresholdForecastOptionsAttributes) ForecastHorizon() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("forecast_horizon"))
}

type ConditionsConditionThresholdTriggerAttributes struct {
	ref terra.Reference
}

func (t ConditionsConditionThresholdTriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConditionsConditionThresholdTriggerAttributes) InternalWithRef(ref terra.Reference) ConditionsConditionThresholdTriggerAttributes {
	return ConditionsConditionThresholdTriggerAttributes{ref: ref}
}

func (t ConditionsConditionThresholdTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConditionsConditionThresholdTriggerAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("count"))
}

func (t ConditionsConditionThresholdTriggerAttributes) Percent() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("percent"))
}

type DocumentationAttributes struct {
	ref terra.Reference
}

func (d DocumentationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DocumentationAttributes) InternalWithRef(ref terra.Reference) DocumentationAttributes {
	return DocumentationAttributes{ref: ref}
}

func (d DocumentationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DocumentationAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("content"))
}

func (d DocumentationAttributes) MimeType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("mime_type"))
}

func (d DocumentationAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("subject"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CreationRecordState struct {
	MutateTime string `json:"mutate_time"`
	MutatedBy  string `json:"mutated_by"`
}

type AlertStrategyState struct {
	AutoClose                   string                                          `json:"auto_close"`
	NotificationChannelStrategy []AlertStrategyNotificationChannelStrategyState `json:"notification_channel_strategy"`
	NotificationRateLimit       []AlertStrategyNotificationRateLimitState       `json:"notification_rate_limit"`
}

type AlertStrategyNotificationChannelStrategyState struct {
	NotificationChannelNames []string `json:"notification_channel_names"`
	RenotifyInterval         string   `json:"renotify_interval"`
}

type AlertStrategyNotificationRateLimitState struct {
	Period string `json:"period"`
}

type ConditionsState struct {
	DisplayName                      string                                            `json:"display_name"`
	Name                             string                                            `json:"name"`
	ConditionAbsent                  []ConditionsConditionAbsentState                  `json:"condition_absent"`
	ConditionMatchedLog              []ConditionsConditionMatchedLogState              `json:"condition_matched_log"`
	ConditionMonitoringQueryLanguage []ConditionsConditionMonitoringQueryLanguageState `json:"condition_monitoring_query_language"`
	ConditionPrometheusQueryLanguage []ConditionsConditionPrometheusQueryLanguageState `json:"condition_prometheus_query_language"`
	ConditionThreshold               []ConditionsConditionThresholdState               `json:"condition_threshold"`
}

type ConditionsConditionAbsentState struct {
	Duration     string                                       `json:"duration"`
	Filter       string                                       `json:"filter"`
	Aggregations []ConditionsConditionAbsentAggregationsState `json:"aggregations"`
	Trigger      []ConditionsConditionAbsentTriggerState      `json:"trigger"`
}

type ConditionsConditionAbsentAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type ConditionsConditionAbsentTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type ConditionsConditionMatchedLogState struct {
	Filter          string            `json:"filter"`
	LabelExtractors map[string]string `json:"label_extractors"`
}

type ConditionsConditionMonitoringQueryLanguageState struct {
	Duration              string                                                   `json:"duration"`
	EvaluationMissingData string                                                   `json:"evaluation_missing_data"`
	Query                 string                                                   `json:"query"`
	Trigger               []ConditionsConditionMonitoringQueryLanguageTriggerState `json:"trigger"`
}

type ConditionsConditionMonitoringQueryLanguageTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type ConditionsConditionPrometheusQueryLanguageState struct {
	AlertRule          string            `json:"alert_rule"`
	Duration           string            `json:"duration"`
	EvaluationInterval string            `json:"evaluation_interval"`
	Labels             map[string]string `json:"labels"`
	Query              string            `json:"query"`
	RuleGroup          string            `json:"rule_group"`
}

type ConditionsConditionThresholdState struct {
	Comparison              string                                                     `json:"comparison"`
	DenominatorFilter       string                                                     `json:"denominator_filter"`
	Duration                string                                                     `json:"duration"`
	EvaluationMissingData   string                                                     `json:"evaluation_missing_data"`
	Filter                  string                                                     `json:"filter"`
	ThresholdValue          float64                                                    `json:"threshold_value"`
	Aggregations            []ConditionsConditionThresholdAggregationsState            `json:"aggregations"`
	DenominatorAggregations []ConditionsConditionThresholdDenominatorAggregationsState `json:"denominator_aggregations"`
	ForecastOptions         []ConditionsConditionThresholdForecastOptionsState         `json:"forecast_options"`
	Trigger                 []ConditionsConditionThresholdTriggerState                 `json:"trigger"`
}

type ConditionsConditionThresholdAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type ConditionsConditionThresholdDenominatorAggregationsState struct {
	AlignmentPeriod    string   `json:"alignment_period"`
	CrossSeriesReducer string   `json:"cross_series_reducer"`
	GroupByFields      []string `json:"group_by_fields"`
	PerSeriesAligner   string   `json:"per_series_aligner"`
}

type ConditionsConditionThresholdForecastOptionsState struct {
	ForecastHorizon string `json:"forecast_horizon"`
}

type ConditionsConditionThresholdTriggerState struct {
	Count   float64 `json:"count"`
	Percent float64 `json:"percent"`
}

type DocumentationState struct {
	Content  string `json:"content"`
	MimeType string `json:"mime_type"`
	Subject  string `json:"subject"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
