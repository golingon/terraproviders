// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_endpoints_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_endpoints_service.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEndpointsServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ges *Resource) Type() string {
	return "google_endpoints_service"
}

// LocalName returns the local name for [Resource].
func (ges *Resource) LocalName() string {
	return ges.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ges *Resource) Configuration() interface{} {
	return ges.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ges *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ges)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ges *Resource) Dependencies() terra.Dependencies {
	return ges.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ges *Resource) LifecycleManagement() *terra.Lifecycle {
	return ges.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ges *Resource) Attributes() googleEndpointsServiceAttributes {
	return googleEndpointsServiceAttributes{ref: terra.ReferenceResource(ges)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ges *Resource) ImportState(state io.Reader) error {
	ges.state = &googleEndpointsServiceState{}
	if err := json.NewDecoder(state).Decode(ges.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ges.Type(), ges.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ges *Resource) State() (*googleEndpointsServiceState, bool) {
	return ges.state, ges.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ges *Resource) StateMust() *googleEndpointsServiceState {
	if ges.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ges.Type(), ges.LocalName()))
	}
	return ges.state
}

// Args contains the configurations for google_endpoints_service.
type Args struct {
	// GrpcConfig: string, optional
	GrpcConfig terra.StringValue `hcl:"grpc_config,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OpenapiConfig: string, optional
	OpenapiConfig terra.StringValue `hcl:"openapi_config,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ProtocOutputBase64: string, optional
	ProtocOutputBase64 terra.StringValue `hcl:"protoc_output_base64,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEndpointsServiceAttributes struct {
	ref terra.Reference
}

// ConfigId returns a reference to field config_id of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("config_id"))
}

// DnsAddress returns a reference to field dns_address of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) DnsAddress() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("dns_address"))
}

// GrpcConfig returns a reference to field grpc_config of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) GrpcConfig() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("grpc_config"))
}

// Id returns a reference to field id of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("id"))
}

// OpenapiConfig returns a reference to field openapi_config of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) OpenapiConfig() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("openapi_config"))
}

// Project returns a reference to field project of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("project"))
}

// ProtocOutputBase64 returns a reference to field protoc_output_base64 of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) ProtocOutputBase64() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("protoc_output_base64"))
}

// ServiceName returns a reference to field service_name of google_endpoints_service.
func (ges googleEndpointsServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("service_name"))
}

func (ges googleEndpointsServiceAttributes) Apis() terra.ListValue[ApisAttributes] {
	return terra.ReferenceAsList[ApisAttributes](ges.ref.Append("apis"))
}

func (ges googleEndpointsServiceAttributes) Endpoints() terra.ListValue[EndpointsAttributes] {
	return terra.ReferenceAsList[EndpointsAttributes](ges.ref.Append("endpoints"))
}

func (ges googleEndpointsServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ges.ref.Append("timeouts"))
}

type googleEndpointsServiceState struct {
	ConfigId           string           `json:"config_id"`
	DnsAddress         string           `json:"dns_address"`
	GrpcConfig         string           `json:"grpc_config"`
	Id                 string           `json:"id"`
	OpenapiConfig      string           `json:"openapi_config"`
	Project            string           `json:"project"`
	ProtocOutputBase64 string           `json:"protoc_output_base64"`
	ServiceName        string           `json:"service_name"`
	Apis               []ApisState      `json:"apis"`
	Endpoints          []EndpointsState `json:"endpoints"`
	Timeouts           *TimeoutsState   `json:"timeouts"`
}
