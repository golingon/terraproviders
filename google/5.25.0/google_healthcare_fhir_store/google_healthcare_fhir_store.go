// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_healthcare_fhir_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_healthcare_fhir_store.
type Resource struct {
	Name      string
	Args      Args
	state     *googleHealthcareFhirStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ghfs *Resource) Type() string {
	return "google_healthcare_fhir_store"
}

// LocalName returns the local name for [Resource].
func (ghfs *Resource) LocalName() string {
	return ghfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ghfs *Resource) Configuration() interface{} {
	return ghfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ghfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ghfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ghfs *Resource) Dependencies() terra.Dependencies {
	return ghfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ghfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ghfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ghfs *Resource) Attributes() googleHealthcareFhirStoreAttributes {
	return googleHealthcareFhirStoreAttributes{ref: terra.ReferenceResource(ghfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ghfs *Resource) ImportState(state io.Reader) error {
	ghfs.state = &googleHealthcareFhirStoreState{}
	if err := json.NewDecoder(state).Decode(ghfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghfs.Type(), ghfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ghfs *Resource) State() (*googleHealthcareFhirStoreState, bool) {
	return ghfs.state, ghfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ghfs *Resource) StateMust() *googleHealthcareFhirStoreState {
	if ghfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghfs.Type(), ghfs.LocalName()))
	}
	return ghfs.state
}

// Args contains the configurations for google_healthcare_fhir_store.
type Args struct {
	// ComplexDataTypeReferenceParsing: string, optional
	ComplexDataTypeReferenceParsing terra.StringValue `hcl:"complex_data_type_reference_parsing,attr"`
	// Dataset: string, required
	Dataset terra.StringValue `hcl:"dataset,attr" validate:"required"`
	// DefaultSearchHandlingStrict: bool, optional
	DefaultSearchHandlingStrict terra.BoolValue `hcl:"default_search_handling_strict,attr"`
	// DisableReferentialIntegrity: bool, optional
	DisableReferentialIntegrity terra.BoolValue `hcl:"disable_referential_integrity,attr"`
	// DisableResourceVersioning: bool, optional
	DisableResourceVersioning terra.BoolValue `hcl:"disable_resource_versioning,attr"`
	// EnableHistoryImport: bool, optional
	EnableHistoryImport terra.BoolValue `hcl:"enable_history_import,attr"`
	// EnableUpdateCreate: bool, optional
	EnableUpdateCreate terra.BoolValue `hcl:"enable_update_create,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// NotificationConfig: optional
	NotificationConfig *NotificationConfig `hcl:"notification_config,block"`
	// StreamConfigs: min=0
	StreamConfigs []StreamConfigs `hcl:"stream_configs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleHealthcareFhirStoreAttributes struct {
	ref terra.Reference
}

// ComplexDataTypeReferenceParsing returns a reference to field complex_data_type_reference_parsing of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) ComplexDataTypeReferenceParsing() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("complex_data_type_reference_parsing"))
}

// Dataset returns a reference to field dataset of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) Dataset() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("dataset"))
}

// DefaultSearchHandlingStrict returns a reference to field default_search_handling_strict of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) DefaultSearchHandlingStrict() terra.BoolValue {
	return terra.ReferenceAsBool(ghfs.ref.Append("default_search_handling_strict"))
}

// DisableReferentialIntegrity returns a reference to field disable_referential_integrity of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) DisableReferentialIntegrity() terra.BoolValue {
	return terra.ReferenceAsBool(ghfs.ref.Append("disable_referential_integrity"))
}

// DisableResourceVersioning returns a reference to field disable_resource_versioning of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) DisableResourceVersioning() terra.BoolValue {
	return terra.ReferenceAsBool(ghfs.ref.Append("disable_resource_versioning"))
}

// EffectiveLabels returns a reference to field effective_labels of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghfs.ref.Append("effective_labels"))
}

// EnableHistoryImport returns a reference to field enable_history_import of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) EnableHistoryImport() terra.BoolValue {
	return terra.ReferenceAsBool(ghfs.ref.Append("enable_history_import"))
}

// EnableUpdateCreate returns a reference to field enable_update_create of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) EnableUpdateCreate() terra.BoolValue {
	return terra.ReferenceAsBool(ghfs.ref.Append("enable_update_create"))
}

// Id returns a reference to field id of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("id"))
}

// Labels returns a reference to field labels of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghfs.ref.Append("labels"))
}

// Name returns a reference to field name of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("name"))
}

// SelfLink returns a reference to field self_link of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("self_link"))
}

// TerraformLabels returns a reference to field terraform_labels of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghfs.ref.Append("terraform_labels"))
}

// Version returns a reference to field version of google_healthcare_fhir_store.
func (ghfs googleHealthcareFhirStoreAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ghfs.ref.Append("version"))
}

func (ghfs googleHealthcareFhirStoreAttributes) NotificationConfig() terra.ListValue[NotificationConfigAttributes] {
	return terra.ReferenceAsList[NotificationConfigAttributes](ghfs.ref.Append("notification_config"))
}

func (ghfs googleHealthcareFhirStoreAttributes) StreamConfigs() terra.ListValue[StreamConfigsAttributes] {
	return terra.ReferenceAsList[StreamConfigsAttributes](ghfs.ref.Append("stream_configs"))
}

func (ghfs googleHealthcareFhirStoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ghfs.ref.Append("timeouts"))
}

type googleHealthcareFhirStoreState struct {
	ComplexDataTypeReferenceParsing string                    `json:"complex_data_type_reference_parsing"`
	Dataset                         string                    `json:"dataset"`
	DefaultSearchHandlingStrict     bool                      `json:"default_search_handling_strict"`
	DisableReferentialIntegrity     bool                      `json:"disable_referential_integrity"`
	DisableResourceVersioning       bool                      `json:"disable_resource_versioning"`
	EffectiveLabels                 map[string]string         `json:"effective_labels"`
	EnableHistoryImport             bool                      `json:"enable_history_import"`
	EnableUpdateCreate              bool                      `json:"enable_update_create"`
	Id                              string                    `json:"id"`
	Labels                          map[string]string         `json:"labels"`
	Name                            string                    `json:"name"`
	SelfLink                        string                    `json:"self_link"`
	TerraformLabels                 map[string]string         `json:"terraform_labels"`
	Version                         string                    `json:"version"`
	NotificationConfig              []NotificationConfigState `json:"notification_config"`
	StreamConfigs                   []StreamConfigsState      `json:"stream_configs"`
	Timeouts                        *TimeoutsState            `json:"timeouts"`
}
