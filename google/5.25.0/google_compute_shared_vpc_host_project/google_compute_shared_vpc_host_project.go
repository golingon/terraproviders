// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_shared_vpc_host_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_shared_vpc_host_project.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeSharedVpcHostProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcsvhp *Resource) Type() string {
	return "google_compute_shared_vpc_host_project"
}

// LocalName returns the local name for [Resource].
func (gcsvhp *Resource) LocalName() string {
	return gcsvhp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcsvhp *Resource) Configuration() interface{} {
	return gcsvhp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcsvhp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcsvhp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcsvhp *Resource) Dependencies() terra.Dependencies {
	return gcsvhp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcsvhp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcsvhp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcsvhp *Resource) Attributes() googleComputeSharedVpcHostProjectAttributes {
	return googleComputeSharedVpcHostProjectAttributes{ref: terra.ReferenceResource(gcsvhp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcsvhp *Resource) ImportState(state io.Reader) error {
	gcsvhp.state = &googleComputeSharedVpcHostProjectState{}
	if err := json.NewDecoder(state).Decode(gcsvhp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcsvhp.Type(), gcsvhp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcsvhp *Resource) State() (*googleComputeSharedVpcHostProjectState, bool) {
	return gcsvhp.state, gcsvhp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcsvhp *Resource) StateMust() *googleComputeSharedVpcHostProjectState {
	if gcsvhp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcsvhp.Type(), gcsvhp.LocalName()))
	}
	return gcsvhp.state
}

// Args contains the configurations for google_compute_shared_vpc_host_project.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeSharedVpcHostProjectAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_compute_shared_vpc_host_project.
func (gcsvhp googleComputeSharedVpcHostProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcsvhp.ref.Append("id"))
}

// Project returns a reference to field project of google_compute_shared_vpc_host_project.
func (gcsvhp googleComputeSharedVpcHostProjectAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcsvhp.ref.Append("project"))
}

func (gcsvhp googleComputeSharedVpcHostProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcsvhp.ref.Append("timeouts"))
}

type googleComputeSharedVpcHostProjectState struct {
	Id       string         `json:"id"`
	Project  string         `json:"project"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
