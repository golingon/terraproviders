// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_instance_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInstanceSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcis *Resource) Type() string {
	return "google_compute_instance_settings"
}

// LocalName returns the local name for [Resource].
func (gcis *Resource) LocalName() string {
	return gcis.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcis *Resource) Configuration() interface{} {
	return gcis.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcis *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcis)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcis *Resource) Dependencies() terra.Dependencies {
	return gcis.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcis *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcis.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcis *Resource) Attributes() googleComputeInstanceSettingsAttributes {
	return googleComputeInstanceSettingsAttributes{ref: terra.ReferenceResource(gcis)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcis *Resource) ImportState(state io.Reader) error {
	gcis.state = &googleComputeInstanceSettingsState{}
	if err := json.NewDecoder(state).Decode(gcis.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcis.Type(), gcis.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcis *Resource) State() (*googleComputeInstanceSettingsState, bool) {
	return gcis.state, gcis.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcis *Resource) StateMust() *googleComputeInstanceSettingsState {
	if gcis.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcis.Type(), gcis.LocalName()))
	}
	return gcis.state
}

// Args contains the configurations for google_compute_instance_settings.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, required
	Zone terra.StringValue `hcl:"zone,attr" validate:"required"`
	// Metadata: optional
	Metadata *Metadata `hcl:"metadata,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeInstanceSettingsAttributes struct {
	ref terra.Reference
}

// Fingerprint returns a reference to field fingerprint of google_compute_instance_settings.
func (gcis googleComputeInstanceSettingsAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(gcis.ref.Append("fingerprint"))
}

// Id returns a reference to field id of google_compute_instance_settings.
func (gcis googleComputeInstanceSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcis.ref.Append("id"))
}

// Project returns a reference to field project of google_compute_instance_settings.
func (gcis googleComputeInstanceSettingsAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcis.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_instance_settings.
func (gcis googleComputeInstanceSettingsAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcis.ref.Append("zone"))
}

func (gcis googleComputeInstanceSettingsAttributes) Metadata() terra.ListValue[MetadataAttributes] {
	return terra.ReferenceAsList[MetadataAttributes](gcis.ref.Append("metadata"))
}

func (gcis googleComputeInstanceSettingsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcis.ref.Append("timeouts"))
}

type googleComputeInstanceSettingsState struct {
	Fingerprint string          `json:"fingerprint"`
	Id          string          `json:"id"`
	Project     string          `json:"project"`
	Zone        string          `json:"zone"`
	Metadata    []MetadataState `json:"metadata"`
	Timeouts    *TimeoutsState  `json:"timeouts"`
}
