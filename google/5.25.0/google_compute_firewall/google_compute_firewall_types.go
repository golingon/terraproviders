// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_firewall

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Allow struct {
	// Ports: list of string, optional
	Ports terra.ListValue[terra.StringValue] `hcl:"ports,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Deny struct {
	// Ports: list of string, optional
	Ports terra.ListValue[terra.StringValue] `hcl:"ports,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type LogConfig struct {
	// Metadata: string, required
	Metadata terra.StringValue `hcl:"metadata,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AllowAttributes struct {
	ref terra.Reference
}

func (a AllowAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AllowAttributes) InternalWithRef(ref terra.Reference) AllowAttributes {
	return AllowAttributes{ref: ref}
}

func (a AllowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AllowAttributes) Ports() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("ports"))
}

func (a AllowAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("protocol"))
}

type DenyAttributes struct {
	ref terra.Reference
}

func (d DenyAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DenyAttributes) InternalWithRef(ref terra.Reference) DenyAttributes {
	return DenyAttributes{ref: ref}
}

func (d DenyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DenyAttributes) Ports() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("ports"))
}

func (d DenyAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("protocol"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) Metadata() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("metadata"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AllowState struct {
	Ports    []string `json:"ports"`
	Protocol string   `json:"protocol"`
}

type DenyState struct {
	Ports    []string `json:"ports"`
	Protocol string   `json:"protocol"`
}

type LogConfigState struct {
	Metadata string `json:"metadata"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
