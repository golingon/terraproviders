// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_autoscaler

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_autoscaler.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeAutoscalerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gca *Resource) Type() string {
	return "google_compute_autoscaler"
}

// LocalName returns the local name for [Resource].
func (gca *Resource) LocalName() string {
	return gca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gca *Resource) Configuration() interface{} {
	return gca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gca *Resource) Dependencies() terra.Dependencies {
	return gca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gca *Resource) LifecycleManagement() *terra.Lifecycle {
	return gca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gca *Resource) Attributes() googleComputeAutoscalerAttributes {
	return googleComputeAutoscalerAttributes{ref: terra.ReferenceResource(gca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gca *Resource) ImportState(state io.Reader) error {
	gca.state = &googleComputeAutoscalerState{}
	if err := json.NewDecoder(state).Decode(gca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gca.Type(), gca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gca *Resource) State() (*googleComputeAutoscalerState, bool) {
	return gca.state, gca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gca *Resource) StateMust() *googleComputeAutoscalerState {
	if gca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gca.Type(), gca.LocalName()))
	}
	return gca.state
}

// Args contains the configurations for google_compute_autoscaler.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// AutoscalingPolicy: required
	AutoscalingPolicy *AutoscalingPolicy `hcl:"autoscaling_policy,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeAutoscalerAttributes struct {
	ref terra.Reference
}

// CreationTimestamp returns a reference to field creation_timestamp of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("creation_timestamp"))
}

// Description returns a reference to field description of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("description"))
}

// Id returns a reference to field id of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("self_link"))
}

// Target returns a reference to field target of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("target"))
}

// Zone returns a reference to field zone of google_compute_autoscaler.
func (gca googleComputeAutoscalerAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gca.ref.Append("zone"))
}

func (gca googleComputeAutoscalerAttributes) AutoscalingPolicy() terra.ListValue[AutoscalingPolicyAttributes] {
	return terra.ReferenceAsList[AutoscalingPolicyAttributes](gca.ref.Append("autoscaling_policy"))
}

func (gca googleComputeAutoscalerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gca.ref.Append("timeouts"))
}

type googleComputeAutoscalerState struct {
	CreationTimestamp string                   `json:"creation_timestamp"`
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	Project           string                   `json:"project"`
	SelfLink          string                   `json:"self_link"`
	Target            string                   `json:"target"`
	Zone              string                   `json:"zone"`
	AutoscalingPolicy []AutoscalingPolicyState `json:"autoscaling_policy"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
