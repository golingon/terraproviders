// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dns_response_policy_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dns_response_policy_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDnsResponsePolicyRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdrpr *Resource) Type() string {
	return "google_dns_response_policy_rule"
}

// LocalName returns the local name for [Resource].
func (gdrpr *Resource) LocalName() string {
	return gdrpr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdrpr *Resource) Configuration() interface{} {
	return gdrpr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdrpr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdrpr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdrpr *Resource) Dependencies() terra.Dependencies {
	return gdrpr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdrpr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdrpr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdrpr *Resource) Attributes() googleDnsResponsePolicyRuleAttributes {
	return googleDnsResponsePolicyRuleAttributes{ref: terra.ReferenceResource(gdrpr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdrpr *Resource) ImportState(state io.Reader) error {
	gdrpr.state = &googleDnsResponsePolicyRuleState{}
	if err := json.NewDecoder(state).Decode(gdrpr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdrpr.Type(), gdrpr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdrpr *Resource) State() (*googleDnsResponsePolicyRuleState, bool) {
	return gdrpr.state, gdrpr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdrpr *Resource) StateMust() *googleDnsResponsePolicyRuleState {
	if gdrpr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdrpr.Type(), gdrpr.LocalName()))
	}
	return gdrpr.state
}

// Args contains the configurations for google_dns_response_policy_rule.
type Args struct {
	// DnsName: string, required
	DnsName terra.StringValue `hcl:"dns_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ResponsePolicy: string, required
	ResponsePolicy terra.StringValue `hcl:"response_policy,attr" validate:"required"`
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// LocalData: optional
	LocalData *LocalData `hcl:"local_data,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDnsResponsePolicyRuleAttributes struct {
	ref terra.Reference
}

// DnsName returns a reference to field dns_name of google_dns_response_policy_rule.
func (gdrpr googleDnsResponsePolicyRuleAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(gdrpr.ref.Append("dns_name"))
}

// Id returns a reference to field id of google_dns_response_policy_rule.
func (gdrpr googleDnsResponsePolicyRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdrpr.ref.Append("id"))
}

// Project returns a reference to field project of google_dns_response_policy_rule.
func (gdrpr googleDnsResponsePolicyRuleAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdrpr.ref.Append("project"))
}

// ResponsePolicy returns a reference to field response_policy of google_dns_response_policy_rule.
func (gdrpr googleDnsResponsePolicyRuleAttributes) ResponsePolicy() terra.StringValue {
	return terra.ReferenceAsString(gdrpr.ref.Append("response_policy"))
}

// RuleName returns a reference to field rule_name of google_dns_response_policy_rule.
func (gdrpr googleDnsResponsePolicyRuleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(gdrpr.ref.Append("rule_name"))
}

func (gdrpr googleDnsResponsePolicyRuleAttributes) LocalData() terra.ListValue[LocalDataAttributes] {
	return terra.ReferenceAsList[LocalDataAttributes](gdrpr.ref.Append("local_data"))
}

func (gdrpr googleDnsResponsePolicyRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdrpr.ref.Append("timeouts"))
}

type googleDnsResponsePolicyRuleState struct {
	DnsName        string           `json:"dns_name"`
	Id             string           `json:"id"`
	Project        string           `json:"project"`
	ResponsePolicy string           `json:"response_policy"`
	RuleName       string           `json:"rule_name"`
	LocalData      []LocalDataState `json:"local_data"`
	Timeouts       *TimeoutsState   `json:"timeouts"`
}
