// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgecontainer_node_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_edgecontainer_node_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEdgecontainerNodePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (genp *Resource) Type() string {
	return "google_edgecontainer_node_pool"
}

// LocalName returns the local name for [Resource].
func (genp *Resource) LocalName() string {
	return genp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (genp *Resource) Configuration() interface{} {
	return genp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (genp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(genp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (genp *Resource) Dependencies() terra.Dependencies {
	return genp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (genp *Resource) LifecycleManagement() *terra.Lifecycle {
	return genp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (genp *Resource) Attributes() googleEdgecontainerNodePoolAttributes {
	return googleEdgecontainerNodePoolAttributes{ref: terra.ReferenceResource(genp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (genp *Resource) ImportState(state io.Reader) error {
	genp.state = &googleEdgecontainerNodePoolState{}
	if err := json.NewDecoder(state).Decode(genp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", genp.Type(), genp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (genp *Resource) State() (*googleEdgecontainerNodePoolState, bool) {
	return genp.state, genp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (genp *Resource) StateMust() *googleEdgecontainerNodePoolState {
	if genp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", genp.Type(), genp.LocalName()))
	}
	return genp.state
}

// Args contains the configurations for google_edgecontainer_node_pool.
type Args struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MachineFilter: string, optional
	MachineFilter terra.StringValue `hcl:"machine_filter,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NodeCount: number, required
	NodeCount terra.NumberValue `hcl:"node_count,attr" validate:"required"`
	// NodeLocation: string, required
	NodeLocation terra.StringValue `hcl:"node_location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// LocalDiskEncryption: optional
	LocalDiskEncryption *LocalDiskEncryption `hcl:"local_disk_encryption,block"`
	// NodeConfig: optional
	NodeConfig *NodeConfig `hcl:"node_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEdgecontainerNodePoolAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("cluster"))
}

// CreateTime returns a reference to field create_time of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("create_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](genp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](genp.ref.Append("labels"))
}

// Location returns a reference to field location of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("location"))
}

// MachineFilter returns a reference to field machine_filter of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) MachineFilter() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("machine_filter"))
}

// Name returns a reference to field name of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("name"))
}

// NodeCount returns a reference to field node_count of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(genp.ref.Append("node_count"))
}

// NodeLocation returns a reference to field node_location of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) NodeLocation() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("node_location"))
}

// NodeVersion returns a reference to field node_version of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) NodeVersion() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("node_version"))
}

// Project returns a reference to field project of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](genp.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_edgecontainer_node_pool.
func (genp googleEdgecontainerNodePoolAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(genp.ref.Append("update_time"))
}

func (genp googleEdgecontainerNodePoolAttributes) LocalDiskEncryption() terra.ListValue[LocalDiskEncryptionAttributes] {
	return terra.ReferenceAsList[LocalDiskEncryptionAttributes](genp.ref.Append("local_disk_encryption"))
}

func (genp googleEdgecontainerNodePoolAttributes) NodeConfig() terra.ListValue[NodeConfigAttributes] {
	return terra.ReferenceAsList[NodeConfigAttributes](genp.ref.Append("node_config"))
}

func (genp googleEdgecontainerNodePoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](genp.ref.Append("timeouts"))
}

type googleEdgecontainerNodePoolState struct {
	Cluster             string                     `json:"cluster"`
	CreateTime          string                     `json:"create_time"`
	EffectiveLabels     map[string]string          `json:"effective_labels"`
	Id                  string                     `json:"id"`
	Labels              map[string]string          `json:"labels"`
	Location            string                     `json:"location"`
	MachineFilter       string                     `json:"machine_filter"`
	Name                string                     `json:"name"`
	NodeCount           float64                    `json:"node_count"`
	NodeLocation        string                     `json:"node_location"`
	NodeVersion         string                     `json:"node_version"`
	Project             string                     `json:"project"`
	TerraformLabels     map[string]string          `json:"terraform_labels"`
	UpdateTime          string                     `json:"update_time"`
	LocalDiskEncryption []LocalDiskEncryptionState `json:"local_disk_encryption"`
	NodeConfig          []NodeConfigState          `json:"node_config"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
