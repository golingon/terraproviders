// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_edgecontainer_node_pool

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LocalDiskEncryption struct {
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
}

type NodeConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LocalDiskEncryptionAttributes struct {
	ref terra.Reference
}

func (lde LocalDiskEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return lde.ref, nil
}

func (lde LocalDiskEncryptionAttributes) InternalWithRef(ref terra.Reference) LocalDiskEncryptionAttributes {
	return LocalDiskEncryptionAttributes{ref: ref}
}

func (lde LocalDiskEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lde.ref.InternalTokens()
}

func (lde LocalDiskEncryptionAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(lde.ref.Append("kms_key"))
}

func (lde LocalDiskEncryptionAttributes) KmsKeyActiveVersion() terra.StringValue {
	return terra.ReferenceAsString(lde.ref.Append("kms_key_active_version"))
}

func (lde LocalDiskEncryptionAttributes) KmsKeyState() terra.StringValue {
	return terra.ReferenceAsString(lde.ref.Append("kms_key_state"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LocalDiskEncryptionState struct {
	KmsKey              string `json:"kms_key"`
	KmsKeyActiveVersion string `json:"kms_key_active_version"`
	KmsKeyState         string `json:"kms_key_state"`
}

type NodeConfigState struct {
	Labels map[string]string `json:"labels"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
