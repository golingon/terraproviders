// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_feature_membership

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_hub_feature_membership.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeHubFeatureMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gghfm *Resource) Type() string {
	return "google_gke_hub_feature_membership"
}

// LocalName returns the local name for [Resource].
func (gghfm *Resource) LocalName() string {
	return gghfm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gghfm *Resource) Configuration() interface{} {
	return gghfm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gghfm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gghfm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gghfm *Resource) Dependencies() terra.Dependencies {
	return gghfm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gghfm *Resource) LifecycleManagement() *terra.Lifecycle {
	return gghfm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gghfm *Resource) Attributes() googleGkeHubFeatureMembershipAttributes {
	return googleGkeHubFeatureMembershipAttributes{ref: terra.ReferenceResource(gghfm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gghfm *Resource) ImportState(state io.Reader) error {
	gghfm.state = &googleGkeHubFeatureMembershipState{}
	if err := json.NewDecoder(state).Decode(gghfm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gghfm.Type(), gghfm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gghfm *Resource) State() (*googleGkeHubFeatureMembershipState, bool) {
	return gghfm.state, gghfm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gghfm *Resource) StateMust() *googleGkeHubFeatureMembershipState {
	if gghfm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gghfm.Type(), gghfm.LocalName()))
	}
	return gghfm.state
}

// Args contains the configurations for google_gke_hub_feature_membership.
type Args struct {
	// Feature: string, required
	Feature terra.StringValue `hcl:"feature,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Membership: string, required
	Membership terra.StringValue `hcl:"membership,attr" validate:"required"`
	// MembershipLocation: string, optional
	MembershipLocation terra.StringValue `hcl:"membership_location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Configmanagement: optional
	Configmanagement *Configmanagement `hcl:"configmanagement,block"`
	// Mesh: optional
	Mesh *Mesh `hcl:"mesh,block"`
	// Policycontroller: optional
	Policycontroller *Policycontroller `hcl:"policycontroller,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeHubFeatureMembershipAttributes struct {
	ref terra.Reference
}

// Feature returns a reference to field feature of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) Feature() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("feature"))
}

// Id returns a reference to field id of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("id"))
}

// Location returns a reference to field location of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("location"))
}

// Membership returns a reference to field membership of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("membership"))
}

// MembershipLocation returns a reference to field membership_location of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) MembershipLocation() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("membership_location"))
}

// Project returns a reference to field project of google_gke_hub_feature_membership.
func (gghfm googleGkeHubFeatureMembershipAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gghfm.ref.Append("project"))
}

func (gghfm googleGkeHubFeatureMembershipAttributes) Configmanagement() terra.ListValue[ConfigmanagementAttributes] {
	return terra.ReferenceAsList[ConfigmanagementAttributes](gghfm.ref.Append("configmanagement"))
}

func (gghfm googleGkeHubFeatureMembershipAttributes) Mesh() terra.ListValue[MeshAttributes] {
	return terra.ReferenceAsList[MeshAttributes](gghfm.ref.Append("mesh"))
}

func (gghfm googleGkeHubFeatureMembershipAttributes) Policycontroller() terra.ListValue[PolicycontrollerAttributes] {
	return terra.ReferenceAsList[PolicycontrollerAttributes](gghfm.ref.Append("policycontroller"))
}

func (gghfm googleGkeHubFeatureMembershipAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gghfm.ref.Append("timeouts"))
}

type googleGkeHubFeatureMembershipState struct {
	Feature            string                  `json:"feature"`
	Id                 string                  `json:"id"`
	Location           string                  `json:"location"`
	Membership         string                  `json:"membership"`
	MembershipLocation string                  `json:"membership_location"`
	Project            string                  `json:"project"`
	Configmanagement   []ConfigmanagementState `json:"configmanagement"`
	Mesh               []MeshState             `json:"mesh"`
	Policycontroller   []PolicycontrollerState `json:"policycontroller"`
	Timeouts           *TimeoutsState          `json:"timeouts"`
}
