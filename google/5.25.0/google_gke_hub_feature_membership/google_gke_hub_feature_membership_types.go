// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_hub_feature_membership

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configmanagement struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ConfigmanagementBinauthz: optional
	Binauthz *ConfigmanagementBinauthz `hcl:"binauthz,block"`
	// ConfigmanagementConfigSync: optional
	ConfigSync *ConfigmanagementConfigSync `hcl:"config_sync,block"`
	// ConfigmanagementHierarchyController: optional
	HierarchyController *ConfigmanagementHierarchyController `hcl:"hierarchy_controller,block"`
	// ConfigmanagementPolicyController: optional
	PolicyController *ConfigmanagementPolicyController `hcl:"policy_controller,block"`
}

type ConfigmanagementBinauthz struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ConfigmanagementConfigSync struct {
	// MetricsGcpServiceAccountEmail: string, optional
	MetricsGcpServiceAccountEmail terra.StringValue `hcl:"metrics_gcp_service_account_email,attr"`
	// PreventDrift: bool, optional
	PreventDrift terra.BoolValue `hcl:"prevent_drift,attr"`
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// ConfigmanagementConfigSyncGit: optional
	Git *ConfigmanagementConfigSyncGit `hcl:"git,block"`
	// ConfigmanagementConfigSyncOci: optional
	Oci *ConfigmanagementConfigSyncOci `hcl:"oci,block"`
}

type ConfigmanagementConfigSyncGit struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// HttpsProxy: string, optional
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// SyncBranch: string, optional
	SyncBranch terra.StringValue `hcl:"sync_branch,attr"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncRev: string, optional
	SyncRev terra.StringValue `hcl:"sync_rev,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
}

type ConfigmanagementConfigSyncOci struct {
	// GcpServiceAccountEmail: string, optional
	GcpServiceAccountEmail terra.StringValue `hcl:"gcp_service_account_email,attr"`
	// PolicyDir: string, optional
	PolicyDir terra.StringValue `hcl:"policy_dir,attr"`
	// SecretType: string, optional
	SecretType terra.StringValue `hcl:"secret_type,attr"`
	// SyncRepo: string, optional
	SyncRepo terra.StringValue `hcl:"sync_repo,attr"`
	// SyncWaitSecs: string, optional
	SyncWaitSecs terra.StringValue `hcl:"sync_wait_secs,attr"`
}

type ConfigmanagementHierarchyController struct {
	// EnableHierarchicalResourceQuota: bool, optional
	EnableHierarchicalResourceQuota terra.BoolValue `hcl:"enable_hierarchical_resource_quota,attr"`
	// EnablePodTreeLabels: bool, optional
	EnablePodTreeLabels terra.BoolValue `hcl:"enable_pod_tree_labels,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ConfigmanagementPolicyController struct {
	// AuditIntervalSeconds: string, optional
	AuditIntervalSeconds terra.StringValue `hcl:"audit_interval_seconds,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExemptableNamespaces: list of string, optional
	ExemptableNamespaces terra.ListValue[terra.StringValue] `hcl:"exemptable_namespaces,attr"`
	// LogDeniesEnabled: bool, optional
	LogDeniesEnabled terra.BoolValue `hcl:"log_denies_enabled,attr"`
	// MutationEnabled: bool, optional
	MutationEnabled terra.BoolValue `hcl:"mutation_enabled,attr"`
	// ReferentialRulesEnabled: bool, optional
	ReferentialRulesEnabled terra.BoolValue `hcl:"referential_rules_enabled,attr"`
	// TemplateLibraryInstalled: bool, optional
	TemplateLibraryInstalled terra.BoolValue `hcl:"template_library_installed,attr"`
	// ConfigmanagementPolicyControllerMonitoring: optional
	Monitoring *ConfigmanagementPolicyControllerMonitoring `hcl:"monitoring,block"`
}

type ConfigmanagementPolicyControllerMonitoring struct {
	// Backends: list of string, optional
	Backends terra.ListValue[terra.StringValue] `hcl:"backends,attr"`
}

type Mesh struct {
	// ControlPlane: string, optional
	ControlPlane terra.StringValue `hcl:"control_plane,attr"`
	// Management: string, optional
	Management terra.StringValue `hcl:"management,attr"`
}

type Policycontroller struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// PolicycontrollerPolicyControllerHubConfig: required
	PolicyControllerHubConfig *PolicycontrollerPolicyControllerHubConfig `hcl:"policy_controller_hub_config,block" validate:"required"`
}

type PolicycontrollerPolicyControllerHubConfig struct {
	// AuditIntervalSeconds: number, optional
	AuditIntervalSeconds terra.NumberValue `hcl:"audit_interval_seconds,attr"`
	// ConstraintViolationLimit: number, optional
	ConstraintViolationLimit terra.NumberValue `hcl:"constraint_violation_limit,attr"`
	// ExemptableNamespaces: list of string, optional
	ExemptableNamespaces terra.ListValue[terra.StringValue] `hcl:"exemptable_namespaces,attr"`
	// InstallSpec: string, optional
	InstallSpec terra.StringValue `hcl:"install_spec,attr"`
	// LogDeniesEnabled: bool, optional
	LogDeniesEnabled terra.BoolValue `hcl:"log_denies_enabled,attr"`
	// MutationEnabled: bool, optional
	MutationEnabled terra.BoolValue `hcl:"mutation_enabled,attr"`
	// ReferentialRulesEnabled: bool, optional
	ReferentialRulesEnabled terra.BoolValue `hcl:"referential_rules_enabled,attr"`
	// PolicycontrollerPolicyControllerHubConfigDeploymentConfigs: min=0
	DeploymentConfigs []PolicycontrollerPolicyControllerHubConfigDeploymentConfigs `hcl:"deployment_configs,block" validate:"min=0"`
	// PolicycontrollerPolicyControllerHubConfigMonitoring: optional
	Monitoring *PolicycontrollerPolicyControllerHubConfigMonitoring `hcl:"monitoring,block"`
	// PolicycontrollerPolicyControllerHubConfigPolicyContent: optional
	PolicyContent *PolicycontrollerPolicyControllerHubConfigPolicyContent `hcl:"policy_content,block"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigs struct {
	// ComponentName: string, required
	ComponentName terra.StringValue `hcl:"component_name,attr" validate:"required"`
	// PodAffinity: string, optional
	PodAffinity terra.StringValue `hcl:"pod_affinity,attr"`
	// ReplicaCount: number, optional
	ReplicaCount terra.NumberValue `hcl:"replica_count,attr"`
	// PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResources: optional
	ContainerResources *PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResources `hcl:"container_resources,block"`
	// PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerations: min=0
	PodTolerations []PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerations `hcl:"pod_tolerations,block" validate:"min=0"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResources struct {
	// PolicycontrollerPolicyControllerHubConfig30A9Ed30: optional
	Limits *PolicycontrollerPolicyControllerHubConfig30A9Ed30 `hcl:"limits,block"`
	// PolicycontrollerPolicyControllerHubConfig08D6C431: optional
	Requests *PolicycontrollerPolicyControllerHubConfig08D6C431 `hcl:"requests,block"`
}

type PolicycontrollerPolicyControllerHubConfig30A9Ed30 struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type PolicycontrollerPolicyControllerHubConfig08D6C431 struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerations struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type PolicycontrollerPolicyControllerHubConfigMonitoring struct {
	// Backends: list of string, optional
	Backends terra.ListValue[terra.StringValue] `hcl:"backends,attr"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContent struct {
	// PolicycontrollerPolicyControllerHubConfigPolicyContentBundles: min=0
	Bundles []PolicycontrollerPolicyControllerHubConfigPolicyContentBundles `hcl:"bundles,block" validate:"min=0"`
	// PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary: optional
	TemplateLibrary *PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary `hcl:"template_library,block"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentBundles struct {
	// BundleName: string, required
	BundleName terra.StringValue `hcl:"bundle_name,attr" validate:"required"`
	// ExemptedNamespaces: list of string, optional
	ExemptedNamespaces terra.ListValue[terra.StringValue] `hcl:"exempted_namespaces,attr"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary struct {
	// Installation: string, optional
	Installation terra.StringValue `hcl:"installation,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigmanagementAttributes struct {
	ref terra.Reference
}

func (c ConfigmanagementAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigmanagementAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementAttributes {
	return ConfigmanagementAttributes{ref: ref}
}

func (c ConfigmanagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigmanagementAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("version"))
}

func (c ConfigmanagementAttributes) Binauthz() terra.ListValue[ConfigmanagementBinauthzAttributes] {
	return terra.ReferenceAsList[ConfigmanagementBinauthzAttributes](c.ref.Append("binauthz"))
}

func (c ConfigmanagementAttributes) ConfigSync() terra.ListValue[ConfigmanagementConfigSyncAttributes] {
	return terra.ReferenceAsList[ConfigmanagementConfigSyncAttributes](c.ref.Append("config_sync"))
}

func (c ConfigmanagementAttributes) HierarchyController() terra.ListValue[ConfigmanagementHierarchyControllerAttributes] {
	return terra.ReferenceAsList[ConfigmanagementHierarchyControllerAttributes](c.ref.Append("hierarchy_controller"))
}

func (c ConfigmanagementAttributes) PolicyController() terra.ListValue[ConfigmanagementPolicyControllerAttributes] {
	return terra.ReferenceAsList[ConfigmanagementPolicyControllerAttributes](c.ref.Append("policy_controller"))
}

type ConfigmanagementBinauthzAttributes struct {
	ref terra.Reference
}

func (b ConfigmanagementBinauthzAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b ConfigmanagementBinauthzAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementBinauthzAttributes {
	return ConfigmanagementBinauthzAttributes{ref: ref}
}

func (b ConfigmanagementBinauthzAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b ConfigmanagementBinauthzAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("enabled"))
}

type ConfigmanagementConfigSyncAttributes struct {
	ref terra.Reference
}

func (cs ConfigmanagementConfigSyncAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConfigmanagementConfigSyncAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementConfigSyncAttributes {
	return ConfigmanagementConfigSyncAttributes{ref: ref}
}

func (cs ConfigmanagementConfigSyncAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConfigmanagementConfigSyncAttributes) MetricsGcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("metrics_gcp_service_account_email"))
}

func (cs ConfigmanagementConfigSyncAttributes) PreventDrift() terra.BoolValue {
	return terra.ReferenceAsBool(cs.ref.Append("prevent_drift"))
}

func (cs ConfigmanagementConfigSyncAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("source_format"))
}

func (cs ConfigmanagementConfigSyncAttributes) Git() terra.ListValue[ConfigmanagementConfigSyncGitAttributes] {
	return terra.ReferenceAsList[ConfigmanagementConfigSyncGitAttributes](cs.ref.Append("git"))
}

func (cs ConfigmanagementConfigSyncAttributes) Oci() terra.ListValue[ConfigmanagementConfigSyncOciAttributes] {
	return terra.ReferenceAsList[ConfigmanagementConfigSyncOciAttributes](cs.ref.Append("oci"))
}

type ConfigmanagementConfigSyncGitAttributes struct {
	ref terra.Reference
}

func (g ConfigmanagementConfigSyncGitAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g ConfigmanagementConfigSyncGitAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementConfigSyncGitAttributes {
	return ConfigmanagementConfigSyncGitAttributes{ref: ref}
}

func (g ConfigmanagementConfigSyncGitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g ConfigmanagementConfigSyncGitAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("gcp_service_account_email"))
}

func (g ConfigmanagementConfigSyncGitAttributes) HttpsProxy() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("https_proxy"))
}

func (g ConfigmanagementConfigSyncGitAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("policy_dir"))
}

func (g ConfigmanagementConfigSyncGitAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("secret_type"))
}

func (g ConfigmanagementConfigSyncGitAttributes) SyncBranch() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_branch"))
}

func (g ConfigmanagementConfigSyncGitAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_repo"))
}

func (g ConfigmanagementConfigSyncGitAttributes) SyncRev() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_rev"))
}

func (g ConfigmanagementConfigSyncGitAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("sync_wait_secs"))
}

type ConfigmanagementConfigSyncOciAttributes struct {
	ref terra.Reference
}

func (o ConfigmanagementConfigSyncOciAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o ConfigmanagementConfigSyncOciAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementConfigSyncOciAttributes {
	return ConfigmanagementConfigSyncOciAttributes{ref: ref}
}

func (o ConfigmanagementConfigSyncOciAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o ConfigmanagementConfigSyncOciAttributes) GcpServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("gcp_service_account_email"))
}

func (o ConfigmanagementConfigSyncOciAttributes) PolicyDir() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("policy_dir"))
}

func (o ConfigmanagementConfigSyncOciAttributes) SecretType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("secret_type"))
}

func (o ConfigmanagementConfigSyncOciAttributes) SyncRepo() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_repo"))
}

func (o ConfigmanagementConfigSyncOciAttributes) SyncWaitSecs() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("sync_wait_secs"))
}

type ConfigmanagementHierarchyControllerAttributes struct {
	ref terra.Reference
}

func (hc ConfigmanagementHierarchyControllerAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc ConfigmanagementHierarchyControllerAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementHierarchyControllerAttributes {
	return ConfigmanagementHierarchyControllerAttributes{ref: ref}
}

func (hc ConfigmanagementHierarchyControllerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc ConfigmanagementHierarchyControllerAttributes) EnableHierarchicalResourceQuota() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enable_hierarchical_resource_quota"))
}

func (hc ConfigmanagementHierarchyControllerAttributes) EnablePodTreeLabels() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enable_pod_tree_labels"))
}

func (hc ConfigmanagementHierarchyControllerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

type ConfigmanagementPolicyControllerAttributes struct {
	ref terra.Reference
}

func (pc ConfigmanagementPolicyControllerAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ConfigmanagementPolicyControllerAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementPolicyControllerAttributes {
	return ConfigmanagementPolicyControllerAttributes{ref: ref}
}

func (pc ConfigmanagementPolicyControllerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ConfigmanagementPolicyControllerAttributes) AuditIntervalSeconds() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("audit_interval_seconds"))
}

func (pc ConfigmanagementPolicyControllerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc ConfigmanagementPolicyControllerAttributes) ExemptableNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("exemptable_namespaces"))
}

func (pc ConfigmanagementPolicyControllerAttributes) LogDeniesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("log_denies_enabled"))
}

func (pc ConfigmanagementPolicyControllerAttributes) MutationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("mutation_enabled"))
}

func (pc ConfigmanagementPolicyControllerAttributes) ReferentialRulesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("referential_rules_enabled"))
}

func (pc ConfigmanagementPolicyControllerAttributes) TemplateLibraryInstalled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("template_library_installed"))
}

func (pc ConfigmanagementPolicyControllerAttributes) Monitoring() terra.ListValue[ConfigmanagementPolicyControllerMonitoringAttributes] {
	return terra.ReferenceAsList[ConfigmanagementPolicyControllerMonitoringAttributes](pc.ref.Append("monitoring"))
}

type ConfigmanagementPolicyControllerMonitoringAttributes struct {
	ref terra.Reference
}

func (m ConfigmanagementPolicyControllerMonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ConfigmanagementPolicyControllerMonitoringAttributes) InternalWithRef(ref terra.Reference) ConfigmanagementPolicyControllerMonitoringAttributes {
	return ConfigmanagementPolicyControllerMonitoringAttributes{ref: ref}
}

func (m ConfigmanagementPolicyControllerMonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ConfigmanagementPolicyControllerMonitoringAttributes) Backends() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("backends"))
}

type MeshAttributes struct {
	ref terra.Reference
}

func (m MeshAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MeshAttributes) InternalWithRef(ref terra.Reference) MeshAttributes {
	return MeshAttributes{ref: ref}
}

func (m MeshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MeshAttributes) ControlPlane() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("control_plane"))
}

func (m MeshAttributes) Management() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("management"))
}

type PolicycontrollerAttributes struct {
	ref terra.Reference
}

func (p PolicycontrollerAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PolicycontrollerAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerAttributes {
	return PolicycontrollerAttributes{ref: ref}
}

func (p PolicycontrollerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PolicycontrollerAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("version"))
}

func (p PolicycontrollerAttributes) PolicyControllerHubConfig() terra.ListValue[PolicycontrollerPolicyControllerHubConfigAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigAttributes](p.ref.Append("policy_controller_hub_config"))
}

type PolicycontrollerPolicyControllerHubConfigAttributes struct {
	ref terra.Reference
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) InternalRef() (terra.Reference, error) {
	return pchc.ref, nil
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigAttributes {
	return PolicycontrollerPolicyControllerHubConfigAttributes{ref: ref}
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pchc.ref.InternalTokens()
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) AuditIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pchc.ref.Append("audit_interval_seconds"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) ConstraintViolationLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(pchc.ref.Append("constraint_violation_limit"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) ExemptableNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pchc.ref.Append("exemptable_namespaces"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) InstallSpec() terra.StringValue {
	return terra.ReferenceAsString(pchc.ref.Append("install_spec"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) LogDeniesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("log_denies_enabled"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) MutationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("mutation_enabled"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) ReferentialRulesEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pchc.ref.Append("referential_rules_enabled"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) DeploymentConfigs() terra.SetValue[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes] {
	return terra.ReferenceAsSet[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes](pchc.ref.Append("deployment_configs"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) Monitoring() terra.ListValue[PolicycontrollerPolicyControllerHubConfigMonitoringAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigMonitoringAttributes](pchc.ref.Append("monitoring"))
}

func (pchc PolicycontrollerPolicyControllerHubConfigAttributes) PolicyContent() terra.ListValue[PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes](pchc.ref.Append("policy_content"))
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes struct {
	ref terra.Reference
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes {
	return PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes{ref: ref}
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) ComponentName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("component_name"))
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) PodAffinity() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("pod_affinity"))
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) ReplicaCount() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("replica_count"))
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) ContainerResources() terra.ListValue[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes](dc.ref.Append("container_resources"))
}

func (dc PolicycontrollerPolicyControllerHubConfigDeploymentConfigsAttributes) PodTolerations() terra.ListValue[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes](dc.ref.Append("pod_tolerations"))
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes struct {
	ref terra.Reference
}

func (cr PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes {
	return PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes{ref: ref}
}

func (cr PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes) Limits() terra.ListValue[PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes](cr.ref.Append("limits"))
}

func (cr PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesAttributes) Requests() terra.ListValue[PolicycontrollerPolicyControllerHubConfig08D6C431Attributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfig08D6C431Attributes](cr.ref.Append("requests"))
}

type PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes struct {
	ref terra.Reference
}

func (l PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes {
	return PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes{ref: ref}
}

func (l PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("cpu"))
}

func (l PolicycontrollerPolicyControllerHubConfig30A9Ed30Attributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("memory"))
}

type PolicycontrollerPolicyControllerHubConfig08D6C431Attributes struct {
	ref terra.Reference
}

func (r PolicycontrollerPolicyControllerHubConfig08D6C431Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r PolicycontrollerPolicyControllerHubConfig08D6C431Attributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfig08D6C431Attributes {
	return PolicycontrollerPolicyControllerHubConfig08D6C431Attributes{ref: ref}
}

func (r PolicycontrollerPolicyControllerHubConfig08D6C431Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r PolicycontrollerPolicyControllerHubConfig08D6C431Attributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cpu"))
}

func (r PolicycontrollerPolicyControllerHubConfig08D6C431Attributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("memory"))
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes struct {
	ref terra.Reference
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes {
	return PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes{ref: ref}
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("effect"))
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("key"))
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("operator"))
}

func (pt PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("value"))
}

type PolicycontrollerPolicyControllerHubConfigMonitoringAttributes struct {
	ref terra.Reference
}

func (m PolicycontrollerPolicyControllerHubConfigMonitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m PolicycontrollerPolicyControllerHubConfigMonitoringAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigMonitoringAttributes {
	return PolicycontrollerPolicyControllerHubConfigMonitoringAttributes{ref: ref}
}

func (m PolicycontrollerPolicyControllerHubConfigMonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m PolicycontrollerPolicyControllerHubConfigMonitoringAttributes) Backends() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("backends"))
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes struct {
	ref terra.Reference
}

func (pc PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes {
	return PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes{ref: ref}
}

func (pc PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes) Bundles() terra.SetValue[PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes] {
	return terra.ReferenceAsSet[PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes](pc.ref.Append("bundles"))
}

func (pc PolicycontrollerPolicyControllerHubConfigPolicyContentAttributes) TemplateLibrary() terra.ListValue[PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes] {
	return terra.ReferenceAsList[PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes](pc.ref.Append("template_library"))
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes struct {
	ref terra.Reference
}

func (b PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes {
	return PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes{ref: ref}
}

func (b PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes) BundleName() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("bundle_name"))
}

func (b PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesAttributes) ExemptedNamespaces() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("exempted_namespaces"))
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes struct {
	ref terra.Reference
}

func (tl PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes) InternalRef() (terra.Reference, error) {
	return tl.ref, nil
}

func (tl PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes) InternalWithRef(ref terra.Reference) PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes {
	return PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes{ref: ref}
}

func (tl PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tl.ref.InternalTokens()
}

func (tl PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryAttributes) Installation() terra.StringValue {
	return terra.ReferenceAsString(tl.ref.Append("installation"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigmanagementState struct {
	Version             string                                     `json:"version"`
	Binauthz            []ConfigmanagementBinauthzState            `json:"binauthz"`
	ConfigSync          []ConfigmanagementConfigSyncState          `json:"config_sync"`
	HierarchyController []ConfigmanagementHierarchyControllerState `json:"hierarchy_controller"`
	PolicyController    []ConfigmanagementPolicyControllerState    `json:"policy_controller"`
}

type ConfigmanagementBinauthzState struct {
	Enabled bool `json:"enabled"`
}

type ConfigmanagementConfigSyncState struct {
	MetricsGcpServiceAccountEmail string                               `json:"metrics_gcp_service_account_email"`
	PreventDrift                  bool                                 `json:"prevent_drift"`
	SourceFormat                  string                               `json:"source_format"`
	Git                           []ConfigmanagementConfigSyncGitState `json:"git"`
	Oci                           []ConfigmanagementConfigSyncOciState `json:"oci"`
}

type ConfigmanagementConfigSyncGitState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	HttpsProxy             string `json:"https_proxy"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncBranch             string `json:"sync_branch"`
	SyncRepo               string `json:"sync_repo"`
	SyncRev                string `json:"sync_rev"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
}

type ConfigmanagementConfigSyncOciState struct {
	GcpServiceAccountEmail string `json:"gcp_service_account_email"`
	PolicyDir              string `json:"policy_dir"`
	SecretType             string `json:"secret_type"`
	SyncRepo               string `json:"sync_repo"`
	SyncWaitSecs           string `json:"sync_wait_secs"`
}

type ConfigmanagementHierarchyControllerState struct {
	EnableHierarchicalResourceQuota bool `json:"enable_hierarchical_resource_quota"`
	EnablePodTreeLabels             bool `json:"enable_pod_tree_labels"`
	Enabled                         bool `json:"enabled"`
}

type ConfigmanagementPolicyControllerState struct {
	AuditIntervalSeconds     string                                            `json:"audit_interval_seconds"`
	Enabled                  bool                                              `json:"enabled"`
	ExemptableNamespaces     []string                                          `json:"exemptable_namespaces"`
	LogDeniesEnabled         bool                                              `json:"log_denies_enabled"`
	MutationEnabled          bool                                              `json:"mutation_enabled"`
	ReferentialRulesEnabled  bool                                              `json:"referential_rules_enabled"`
	TemplateLibraryInstalled bool                                              `json:"template_library_installed"`
	Monitoring               []ConfigmanagementPolicyControllerMonitoringState `json:"monitoring"`
}

type ConfigmanagementPolicyControllerMonitoringState struct {
	Backends []string `json:"backends"`
}

type MeshState struct {
	ControlPlane string `json:"control_plane"`
	Management   string `json:"management"`
}

type PolicycontrollerState struct {
	Version                   string                                           `json:"version"`
	PolicyControllerHubConfig []PolicycontrollerPolicyControllerHubConfigState `json:"policy_controller_hub_config"`
}

type PolicycontrollerPolicyControllerHubConfigState struct {
	AuditIntervalSeconds     float64                                                           `json:"audit_interval_seconds"`
	ConstraintViolationLimit float64                                                           `json:"constraint_violation_limit"`
	ExemptableNamespaces     []string                                                          `json:"exemptable_namespaces"`
	InstallSpec              string                                                            `json:"install_spec"`
	LogDeniesEnabled         bool                                                              `json:"log_denies_enabled"`
	MutationEnabled          bool                                                              `json:"mutation_enabled"`
	ReferentialRulesEnabled  bool                                                              `json:"referential_rules_enabled"`
	DeploymentConfigs        []PolicycontrollerPolicyControllerHubConfigDeploymentConfigsState `json:"deployment_configs"`
	Monitoring               []PolicycontrollerPolicyControllerHubConfigMonitoringState        `json:"monitoring"`
	PolicyContent            []PolicycontrollerPolicyControllerHubConfigPolicyContentState     `json:"policy_content"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsState struct {
	ComponentName      string                                                                              `json:"component_name"`
	PodAffinity        string                                                                              `json:"pod_affinity"`
	ReplicaCount       float64                                                                             `json:"replica_count"`
	ContainerResources []PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesState `json:"container_resources"`
	PodTolerations     []PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsState     `json:"pod_tolerations"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesState struct {
	Limits   []PolicycontrollerPolicyControllerHubConfig30A9Ed30State `json:"limits"`
	Requests []PolicycontrollerPolicyControllerHubConfig08D6C431State `json:"requests"`
}

type PolicycontrollerPolicyControllerHubConfig30A9Ed30State struct {
	Cpu    string `json:"cpu"`
	Memory string `json:"memory"`
}

type PolicycontrollerPolicyControllerHubConfig08D6C431State struct {
	Cpu    string `json:"cpu"`
	Memory string `json:"memory"`
}

type PolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsState struct {
	Effect   string `json:"effect"`
	Key      string `json:"key"`
	Operator string `json:"operator"`
	Value    string `json:"value"`
}

type PolicycontrollerPolicyControllerHubConfigMonitoringState struct {
	Backends []string `json:"backends"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentState struct {
	Bundles         []PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesState         `json:"bundles"`
	TemplateLibrary []PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryState `json:"template_library"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentBundlesState struct {
	BundleName         string   `json:"bundle_name"`
	ExemptedNamespaces []string `json:"exempted_namespaces"`
}

type PolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryState struct {
	Installation string `json:"installation"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
