// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_shared_vpc_service_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_shared_vpc_service_project.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeSharedVpcServiceProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcsvsp *Resource) Type() string {
	return "google_compute_shared_vpc_service_project"
}

// LocalName returns the local name for [Resource].
func (gcsvsp *Resource) LocalName() string {
	return gcsvsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcsvsp *Resource) Configuration() interface{} {
	return gcsvsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcsvsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcsvsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcsvsp *Resource) Dependencies() terra.Dependencies {
	return gcsvsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcsvsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcsvsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcsvsp *Resource) Attributes() googleComputeSharedVpcServiceProjectAttributes {
	return googleComputeSharedVpcServiceProjectAttributes{ref: terra.ReferenceResource(gcsvsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcsvsp *Resource) ImportState(state io.Reader) error {
	gcsvsp.state = &googleComputeSharedVpcServiceProjectState{}
	if err := json.NewDecoder(state).Decode(gcsvsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcsvsp.Type(), gcsvsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcsvsp *Resource) State() (*googleComputeSharedVpcServiceProjectState, bool) {
	return gcsvsp.state, gcsvsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcsvsp *Resource) StateMust() *googleComputeSharedVpcServiceProjectState {
	if gcsvsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcsvsp.Type(), gcsvsp.LocalName()))
	}
	return gcsvsp.state
}

// Args contains the configurations for google_compute_shared_vpc_service_project.
type Args struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// HostProject: string, required
	HostProject terra.StringValue `hcl:"host_project,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceProject: string, required
	ServiceProject terra.StringValue `hcl:"service_project,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeSharedVpcServiceProjectAttributes struct {
	ref terra.Reference
}

// DeletionPolicy returns a reference to field deletion_policy of google_compute_shared_vpc_service_project.
func (gcsvsp googleComputeSharedVpcServiceProjectAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gcsvsp.ref.Append("deletion_policy"))
}

// HostProject returns a reference to field host_project of google_compute_shared_vpc_service_project.
func (gcsvsp googleComputeSharedVpcServiceProjectAttributes) HostProject() terra.StringValue {
	return terra.ReferenceAsString(gcsvsp.ref.Append("host_project"))
}

// Id returns a reference to field id of google_compute_shared_vpc_service_project.
func (gcsvsp googleComputeSharedVpcServiceProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcsvsp.ref.Append("id"))
}

// ServiceProject returns a reference to field service_project of google_compute_shared_vpc_service_project.
func (gcsvsp googleComputeSharedVpcServiceProjectAttributes) ServiceProject() terra.StringValue {
	return terra.ReferenceAsString(gcsvsp.ref.Append("service_project"))
}

func (gcsvsp googleComputeSharedVpcServiceProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcsvsp.ref.Append("timeouts"))
}

type googleComputeSharedVpcServiceProjectState struct {
	DeletionPolicy string         `json:"deletion_policy"`
	HostProject    string         `json:"host_project"`
	Id             string         `json:"id"`
	ServiceProject string         `json:"service_project"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
