// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudfunctions2_function

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataBuildConfigAttributes struct {
	ref terra.Reference
}

func (bc DataBuildConfigAttributes) InternalRef() (terra.Reference, error) {
	return bc.ref, nil
}

func (bc DataBuildConfigAttributes) InternalWithRef(ref terra.Reference) DataBuildConfigAttributes {
	return DataBuildConfigAttributes{ref: ref}
}

func (bc DataBuildConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bc.ref.InternalTokens()
}

func (bc DataBuildConfigAttributes) Build() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("build"))
}

func (bc DataBuildConfigAttributes) DockerRepository() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("docker_repository"))
}

func (bc DataBuildConfigAttributes) EntryPoint() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("entry_point"))
}

func (bc DataBuildConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bc.ref.Append("environment_variables"))
}

func (bc DataBuildConfigAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("runtime"))
}

func (bc DataBuildConfigAttributes) WorkerPool() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("worker_pool"))
}

func (bc DataBuildConfigAttributes) Source() terra.ListValue[DataBuildConfigSourceAttributes] {
	return terra.ReferenceAsList[DataBuildConfigSourceAttributes](bc.ref.Append("source"))
}

type DataBuildConfigSourceAttributes struct {
	ref terra.Reference
}

func (s DataBuildConfigSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataBuildConfigSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildConfigSourceAttributes {
	return DataBuildConfigSourceAttributes{ref: ref}
}

func (s DataBuildConfigSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataBuildConfigSourceAttributes) RepoSource() terra.ListValue[DataBuildConfigSourceRepoSourceAttributes] {
	return terra.ReferenceAsList[DataBuildConfigSourceRepoSourceAttributes](s.ref.Append("repo_source"))
}

func (s DataBuildConfigSourceAttributes) StorageSource() terra.ListValue[DataBuildConfigSourceStorageSourceAttributes] {
	return terra.ReferenceAsList[DataBuildConfigSourceStorageSourceAttributes](s.ref.Append("storage_source"))
}

type DataBuildConfigSourceRepoSourceAttributes struct {
	ref terra.Reference
}

func (rs DataBuildConfigSourceRepoSourceAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataBuildConfigSourceRepoSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildConfigSourceRepoSourceAttributes {
	return DataBuildConfigSourceRepoSourceAttributes{ref: ref}
}

func (rs DataBuildConfigSourceRepoSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataBuildConfigSourceRepoSourceAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("branch_name"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) CommitSha() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("commit_sha"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) Dir() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("dir"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) InvertRegex() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("invert_regex"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("project_id"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) RepoName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("repo_name"))
}

func (rs DataBuildConfigSourceRepoSourceAttributes) TagName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("tag_name"))
}

type DataBuildConfigSourceStorageSourceAttributes struct {
	ref terra.Reference
}

func (ss DataBuildConfigSourceStorageSourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataBuildConfigSourceStorageSourceAttributes) InternalWithRef(ref terra.Reference) DataBuildConfigSourceStorageSourceAttributes {
	return DataBuildConfigSourceStorageSourceAttributes{ref: ref}
}

func (ss DataBuildConfigSourceStorageSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataBuildConfigSourceStorageSourceAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket"))
}

func (ss DataBuildConfigSourceStorageSourceAttributes) Generation() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("generation"))
}

func (ss DataBuildConfigSourceStorageSourceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("object"))
}

type DataEventTriggerAttributes struct {
	ref terra.Reference
}

func (et DataEventTriggerAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et DataEventTriggerAttributes) InternalWithRef(ref terra.Reference) DataEventTriggerAttributes {
	return DataEventTriggerAttributes{ref: ref}
}

func (et DataEventTriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et DataEventTriggerAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("event_type"))
}

func (et DataEventTriggerAttributes) PubsubTopic() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("pubsub_topic"))
}

func (et DataEventTriggerAttributes) RetryPolicy() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("retry_policy"))
}

func (et DataEventTriggerAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("service_account_email"))
}

func (et DataEventTriggerAttributes) Trigger() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("trigger"))
}

func (et DataEventTriggerAttributes) TriggerRegion() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("trigger_region"))
}

func (et DataEventTriggerAttributes) EventFilters() terra.SetValue[DataEventTriggerEventFiltersAttributes] {
	return terra.ReferenceAsSet[DataEventTriggerEventFiltersAttributes](et.ref.Append("event_filters"))
}

type DataEventTriggerEventFiltersAttributes struct {
	ref terra.Reference
}

func (ef DataEventTriggerEventFiltersAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef DataEventTriggerEventFiltersAttributes) InternalWithRef(ref terra.Reference) DataEventTriggerEventFiltersAttributes {
	return DataEventTriggerEventFiltersAttributes{ref: ref}
}

func (ef DataEventTriggerEventFiltersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef DataEventTriggerEventFiltersAttributes) Attribute() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("attribute"))
}

func (ef DataEventTriggerEventFiltersAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("operator"))
}

func (ef DataEventTriggerEventFiltersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("value"))
}

type DataServiceConfigAttributes struct {
	ref terra.Reference
}

func (sc DataServiceConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataServiceConfigAttributes) InternalWithRef(ref terra.Reference) DataServiceConfigAttributes {
	return DataServiceConfigAttributes{ref: ref}
}

func (sc DataServiceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataServiceConfigAttributes) AllTrafficOnLatestRevision() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("all_traffic_on_latest_revision"))
}

func (sc DataServiceConfigAttributes) AvailableCpu() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("available_cpu"))
}

func (sc DataServiceConfigAttributes) AvailableMemory() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("available_memory"))
}

func (sc DataServiceConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("environment_variables"))
}

func (sc DataServiceConfigAttributes) GcfUri() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("gcf_uri"))
}

func (sc DataServiceConfigAttributes) IngressSettings() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("ingress_settings"))
}

func (sc DataServiceConfigAttributes) MaxInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_instance_count"))
}

func (sc DataServiceConfigAttributes) MaxInstanceRequestConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_instance_request_concurrency"))
}

func (sc DataServiceConfigAttributes) MinInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("min_instance_count"))
}

func (sc DataServiceConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("service"))
}

func (sc DataServiceConfigAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("service_account_email"))
}

func (sc DataServiceConfigAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("timeout_seconds"))
}

func (sc DataServiceConfigAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("uri"))
}

func (sc DataServiceConfigAttributes) VpcConnector() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("vpc_connector"))
}

func (sc DataServiceConfigAttributes) VpcConnectorEgressSettings() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("vpc_connector_egress_settings"))
}

func (sc DataServiceConfigAttributes) SecretEnvironmentVariables() terra.ListValue[DataServiceConfigSecretEnvironmentVariablesAttributes] {
	return terra.ReferenceAsList[DataServiceConfigSecretEnvironmentVariablesAttributes](sc.ref.Append("secret_environment_variables"))
}

func (sc DataServiceConfigAttributes) SecretVolumes() terra.ListValue[DataServiceConfigSecretVolumesAttributes] {
	return terra.ReferenceAsList[DataServiceConfigSecretVolumesAttributes](sc.ref.Append("secret_volumes"))
}

type DataServiceConfigSecretEnvironmentVariablesAttributes struct {
	ref terra.Reference
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) InternalRef() (terra.Reference, error) {
	return sev.ref, nil
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) InternalWithRef(ref terra.Reference) DataServiceConfigSecretEnvironmentVariablesAttributes {
	return DataServiceConfigSecretEnvironmentVariablesAttributes{ref: ref}
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sev.ref.InternalTokens()
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("key"))
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("project_id"))
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("secret"))
}

func (sev DataServiceConfigSecretEnvironmentVariablesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(sev.ref.Append("version"))
}

type DataServiceConfigSecretVolumesAttributes struct {
	ref terra.Reference
}

func (sv DataServiceConfigSecretVolumesAttributes) InternalRef() (terra.Reference, error) {
	return sv.ref, nil
}

func (sv DataServiceConfigSecretVolumesAttributes) InternalWithRef(ref terra.Reference) DataServiceConfigSecretVolumesAttributes {
	return DataServiceConfigSecretVolumesAttributes{ref: ref}
}

func (sv DataServiceConfigSecretVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sv.ref.InternalTokens()
}

func (sv DataServiceConfigSecretVolumesAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("mount_path"))
}

func (sv DataServiceConfigSecretVolumesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("project_id"))
}

func (sv DataServiceConfigSecretVolumesAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(sv.ref.Append("secret"))
}

func (sv DataServiceConfigSecretVolumesAttributes) Versions() terra.ListValue[DataServiceConfigSecretVolumesVersionsAttributes] {
	return terra.ReferenceAsList[DataServiceConfigSecretVolumesVersionsAttributes](sv.ref.Append("versions"))
}

type DataServiceConfigSecretVolumesVersionsAttributes struct {
	ref terra.Reference
}

func (v DataServiceConfigSecretVolumesVersionsAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataServiceConfigSecretVolumesVersionsAttributes) InternalWithRef(ref terra.Reference) DataServiceConfigSecretVolumesVersionsAttributes {
	return DataServiceConfigSecretVolumesVersionsAttributes{ref: ref}
}

func (v DataServiceConfigSecretVolumesVersionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataServiceConfigSecretVolumesVersionsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("path"))
}

func (v DataServiceConfigSecretVolumesVersionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("version"))
}

type DataBuildConfigState struct {
	Build                string                       `json:"build"`
	DockerRepository     string                       `json:"docker_repository"`
	EntryPoint           string                       `json:"entry_point"`
	EnvironmentVariables map[string]string            `json:"environment_variables"`
	Runtime              string                       `json:"runtime"`
	WorkerPool           string                       `json:"worker_pool"`
	Source               []DataBuildConfigSourceState `json:"source"`
}

type DataBuildConfigSourceState struct {
	RepoSource    []DataBuildConfigSourceRepoSourceState    `json:"repo_source"`
	StorageSource []DataBuildConfigSourceStorageSourceState `json:"storage_source"`
}

type DataBuildConfigSourceRepoSourceState struct {
	BranchName  string `json:"branch_name"`
	CommitSha   string `json:"commit_sha"`
	Dir         string `json:"dir"`
	InvertRegex bool   `json:"invert_regex"`
	ProjectId   string `json:"project_id"`
	RepoName    string `json:"repo_name"`
	TagName     string `json:"tag_name"`
}

type DataBuildConfigSourceStorageSourceState struct {
	Bucket     string  `json:"bucket"`
	Generation float64 `json:"generation"`
	Object     string  `json:"object"`
}

type DataEventTriggerState struct {
	EventType           string                              `json:"event_type"`
	PubsubTopic         string                              `json:"pubsub_topic"`
	RetryPolicy         string                              `json:"retry_policy"`
	ServiceAccountEmail string                              `json:"service_account_email"`
	Trigger             string                              `json:"trigger"`
	TriggerRegion       string                              `json:"trigger_region"`
	EventFilters        []DataEventTriggerEventFiltersState `json:"event_filters"`
}

type DataEventTriggerEventFiltersState struct {
	Attribute string `json:"attribute"`
	Operator  string `json:"operator"`
	Value     string `json:"value"`
}

type DataServiceConfigState struct {
	AllTrafficOnLatestRevision    bool                                               `json:"all_traffic_on_latest_revision"`
	AvailableCpu                  string                                             `json:"available_cpu"`
	AvailableMemory               string                                             `json:"available_memory"`
	EnvironmentVariables          map[string]string                                  `json:"environment_variables"`
	GcfUri                        string                                             `json:"gcf_uri"`
	IngressSettings               string                                             `json:"ingress_settings"`
	MaxInstanceCount              float64                                            `json:"max_instance_count"`
	MaxInstanceRequestConcurrency float64                                            `json:"max_instance_request_concurrency"`
	MinInstanceCount              float64                                            `json:"min_instance_count"`
	Service                       string                                             `json:"service"`
	ServiceAccountEmail           string                                             `json:"service_account_email"`
	TimeoutSeconds                float64                                            `json:"timeout_seconds"`
	Uri                           string                                             `json:"uri"`
	VpcConnector                  string                                             `json:"vpc_connector"`
	VpcConnectorEgressSettings    string                                             `json:"vpc_connector_egress_settings"`
	SecretEnvironmentVariables    []DataServiceConfigSecretEnvironmentVariablesState `json:"secret_environment_variables"`
	SecretVolumes                 []DataServiceConfigSecretVolumesState              `json:"secret_volumes"`
}

type DataServiceConfigSecretEnvironmentVariablesState struct {
	Key       string `json:"key"`
	ProjectId string `json:"project_id"`
	Secret    string `json:"secret"`
	Version   string `json:"version"`
}

type DataServiceConfigSecretVolumesState struct {
	MountPath string                                        `json:"mount_path"`
	ProjectId string                                        `json:"project_id"`
	Secret    string                                        `json:"secret"`
	Versions  []DataServiceConfigSecretVolumesVersionsState `json:"versions"`
}

type DataServiceConfigSecretVolumesVersionsState struct {
	Path    string `json:"path"`
	Version string `json:"version"`
}
