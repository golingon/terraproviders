// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloudfunctions2_function

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_cloudfunctions2_function.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCloudfunctions2FunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcf *Resource) Type() string {
	return "google_cloudfunctions2_function"
}

// LocalName returns the local name for [Resource].
func (gcf *Resource) LocalName() string {
	return gcf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcf *Resource) Configuration() interface{} {
	return gcf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcf *Resource) Dependencies() terra.Dependencies {
	return gcf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcf *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcf *Resource) Attributes() googleCloudfunctions2FunctionAttributes {
	return googleCloudfunctions2FunctionAttributes{ref: terra.ReferenceResource(gcf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcf *Resource) ImportState(state io.Reader) error {
	gcf.state = &googleCloudfunctions2FunctionState{}
	if err := json.NewDecoder(state).Decode(gcf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcf.Type(), gcf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcf *Resource) State() (*googleCloudfunctions2FunctionState, bool) {
	return gcf.state, gcf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcf *Resource) StateMust() *googleCloudfunctions2FunctionState {
	if gcf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcf.Type(), gcf.LocalName()))
	}
	return gcf.state
}

// Args contains the configurations for google_cloudfunctions2_function.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyName: string, optional
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BuildConfig: optional
	BuildConfig *BuildConfig `hcl:"build_config,block"`
	// EventTrigger: optional
	EventTrigger *EventTrigger `hcl:"event_trigger,block"`
	// ServiceConfig: optional
	ServiceConfig *ServiceConfig `hcl:"service_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCloudfunctions2FunctionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcf.ref.Append("effective_labels"))
}

// Environment returns a reference to field environment of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("environment"))
}

// Id returns a reference to field id of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("id"))
}

// KmsKeyName returns a reference to field kms_key_name of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("kms_key_name"))
}

// Labels returns a reference to field labels of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcf.ref.Append("labels"))
}

// Location returns a reference to field location of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("location"))
}

// Name returns a reference to field name of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("name"))
}

// Project returns a reference to field project of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("project"))
}

// State returns a reference to field state of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcf.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("update_time"))
}

// Url returns a reference to field url of google_cloudfunctions2_function.
func (gcf googleCloudfunctions2FunctionAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(gcf.ref.Append("url"))
}

func (gcf googleCloudfunctions2FunctionAttributes) BuildConfig() terra.ListValue[BuildConfigAttributes] {
	return terra.ReferenceAsList[BuildConfigAttributes](gcf.ref.Append("build_config"))
}

func (gcf googleCloudfunctions2FunctionAttributes) EventTrigger() terra.ListValue[EventTriggerAttributes] {
	return terra.ReferenceAsList[EventTriggerAttributes](gcf.ref.Append("event_trigger"))
}

func (gcf googleCloudfunctions2FunctionAttributes) ServiceConfig() terra.ListValue[ServiceConfigAttributes] {
	return terra.ReferenceAsList[ServiceConfigAttributes](gcf.ref.Append("service_config"))
}

func (gcf googleCloudfunctions2FunctionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcf.ref.Append("timeouts"))
}

type googleCloudfunctions2FunctionState struct {
	Description     string               `json:"description"`
	EffectiveLabels map[string]string    `json:"effective_labels"`
	Environment     string               `json:"environment"`
	Id              string               `json:"id"`
	KmsKeyName      string               `json:"kms_key_name"`
	Labels          map[string]string    `json:"labels"`
	Location        string               `json:"location"`
	Name            string               `json:"name"`
	Project         string               `json:"project"`
	State           string               `json:"state"`
	TerraformLabels map[string]string    `json:"terraform_labels"`
	UpdateTime      string               `json:"update_time"`
	Url             string               `json:"url"`
	BuildConfig     []BuildConfigState   `json:"build_config"`
	EventTrigger    []EventTriggerState  `json:"event_trigger"`
	ServiceConfig   []ServiceConfigState `json:"service_config"`
	Timeouts        *TimeoutsState       `json:"timeouts"`
}
