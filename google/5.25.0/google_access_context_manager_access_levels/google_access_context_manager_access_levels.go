// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_access_levels

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_access_context_manager_access_levels.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAccessContextManagerAccessLevelsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gacmal *Resource) Type() string {
	return "google_access_context_manager_access_levels"
}

// LocalName returns the local name for [Resource].
func (gacmal *Resource) LocalName() string {
	return gacmal.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gacmal *Resource) Configuration() interface{} {
	return gacmal.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gacmal *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gacmal)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gacmal *Resource) Dependencies() terra.Dependencies {
	return gacmal.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gacmal *Resource) LifecycleManagement() *terra.Lifecycle {
	return gacmal.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gacmal *Resource) Attributes() googleAccessContextManagerAccessLevelsAttributes {
	return googleAccessContextManagerAccessLevelsAttributes{ref: terra.ReferenceResource(gacmal)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gacmal *Resource) ImportState(state io.Reader) error {
	gacmal.state = &googleAccessContextManagerAccessLevelsState{}
	if err := json.NewDecoder(state).Decode(gacmal.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gacmal.Type(), gacmal.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gacmal *Resource) State() (*googleAccessContextManagerAccessLevelsState, bool) {
	return gacmal.state, gacmal.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gacmal *Resource) StateMust() *googleAccessContextManagerAccessLevelsState {
	if gacmal.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gacmal.Type(), gacmal.LocalName()))
	}
	return gacmal.state
}

// Args contains the configurations for google_access_context_manager_access_levels.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// AccessLevels: min=0
	AccessLevels []AccessLevels `hcl:"access_levels,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAccessContextManagerAccessLevelsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_access_context_manager_access_levels.
func (gacmal googleAccessContextManagerAccessLevelsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gacmal.ref.Append("id"))
}

// Parent returns a reference to field parent of google_access_context_manager_access_levels.
func (gacmal googleAccessContextManagerAccessLevelsAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gacmal.ref.Append("parent"))
}

func (gacmal googleAccessContextManagerAccessLevelsAttributes) AccessLevels() terra.SetValue[AccessLevelsAttributes] {
	return terra.ReferenceAsSet[AccessLevelsAttributes](gacmal.ref.Append("access_levels"))
}

func (gacmal googleAccessContextManagerAccessLevelsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gacmal.ref.Append("timeouts"))
}

type googleAccessContextManagerAccessLevelsState struct {
	Id           string              `json:"id"`
	Parent       string              `json:"parent"`
	AccessLevels []AccessLevelsState `json:"access_levels"`
	Timeouts     *TimeoutsState      `json:"timeouts"`
}
