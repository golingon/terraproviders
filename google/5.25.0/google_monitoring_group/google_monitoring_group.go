// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_monitoring_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_monitoring_group.
type Resource struct {
	Name      string
	Args      Args
	state     *googleMonitoringGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gmg *Resource) Type() string {
	return "google_monitoring_group"
}

// LocalName returns the local name for [Resource].
func (gmg *Resource) LocalName() string {
	return gmg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gmg *Resource) Configuration() interface{} {
	return gmg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gmg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gmg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gmg *Resource) Dependencies() terra.Dependencies {
	return gmg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gmg *Resource) LifecycleManagement() *terra.Lifecycle {
	return gmg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gmg *Resource) Attributes() googleMonitoringGroupAttributes {
	return googleMonitoringGroupAttributes{ref: terra.ReferenceResource(gmg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gmg *Resource) ImportState(state io.Reader) error {
	gmg.state = &googleMonitoringGroupState{}
	if err := json.NewDecoder(state).Decode(gmg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmg.Type(), gmg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gmg *Resource) State() (*googleMonitoringGroupState, bool) {
	return gmg.state, gmg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gmg *Resource) StateMust() *googleMonitoringGroupState {
	if gmg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmg.Type(), gmg.LocalName()))
	}
	return gmg.state
}

// Args contains the configurations for google_monitoring_group.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsCluster: bool, optional
	IsCluster terra.BoolValue `hcl:"is_cluster,attr"`
	// ParentName: string, optional
	ParentName terra.StringValue `hcl:"parent_name,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleMonitoringGroupAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("display_name"))
}

// Filter returns a reference to field filter of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("filter"))
}

// Id returns a reference to field id of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("id"))
}

// IsCluster returns a reference to field is_cluster of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) IsCluster() terra.BoolValue {
	return terra.ReferenceAsBool(gmg.ref.Append("is_cluster"))
}

// Name returns a reference to field name of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("name"))
}

// ParentName returns a reference to field parent_name of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) ParentName() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("parent_name"))
}

// Project returns a reference to field project of google_monitoring_group.
func (gmg googleMonitoringGroupAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gmg.ref.Append("project"))
}

func (gmg googleMonitoringGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gmg.ref.Append("timeouts"))
}

type googleMonitoringGroupState struct {
	DisplayName string         `json:"display_name"`
	Filter      string         `json:"filter"`
	Id          string         `json:"id"`
	IsCluster   bool           `json:"is_cluster"`
	Name        string         `json:"name"`
	ParentName  string         `json:"parent_name"`
	Project     string         `json:"project"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
