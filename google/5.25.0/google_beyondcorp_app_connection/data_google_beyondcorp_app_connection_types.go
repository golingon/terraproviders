// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_beyondcorp_app_connection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataApplicationEndpointAttributes struct {
	ref terra.Reference
}

func (ae DataApplicationEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae DataApplicationEndpointAttributes) InternalWithRef(ref terra.Reference) DataApplicationEndpointAttributes {
	return DataApplicationEndpointAttributes{ref: ref}
}

func (ae DataApplicationEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae DataApplicationEndpointAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("host"))
}

func (ae DataApplicationEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ae.ref.Append("port"))
}

type DataGatewayAttributes struct {
	ref terra.Reference
}

func (g DataGatewayAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataGatewayAttributes) InternalWithRef(ref terra.Reference) DataGatewayAttributes {
	return DataGatewayAttributes{ref: ref}
}

func (g DataGatewayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataGatewayAttributes) AppGateway() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("app_gateway"))
}

func (g DataGatewayAttributes) IngressPort() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("ingress_port"))
}

func (g DataGatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("type"))
}

func (g DataGatewayAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("uri"))
}

type DataApplicationEndpointState struct {
	Host string  `json:"host"`
	Port float64 `json:"port"`
}

type DataGatewayState struct {
	AppGateway  string  `json:"app_gateway"`
	IngressPort float64 `json:"ingress_port"`
	Type        string  `json:"type"`
	Uri         string  `json:"uri"`
}
