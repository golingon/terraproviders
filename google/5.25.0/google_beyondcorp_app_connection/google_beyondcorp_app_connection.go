// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_beyondcorp_app_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_beyondcorp_app_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBeyondcorpAppConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbac *Resource) Type() string {
	return "google_beyondcorp_app_connection"
}

// LocalName returns the local name for [Resource].
func (gbac *Resource) LocalName() string {
	return gbac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbac *Resource) Configuration() interface{} {
	return gbac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbac *Resource) Dependencies() terra.Dependencies {
	return gbac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbac *Resource) Attributes() googleBeyondcorpAppConnectionAttributes {
	return googleBeyondcorpAppConnectionAttributes{ref: terra.ReferenceResource(gbac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbac *Resource) ImportState(state io.Reader) error {
	gbac.state = &googleBeyondcorpAppConnectionState{}
	if err := json.NewDecoder(state).Decode(gbac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbac.Type(), gbac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbac *Resource) State() (*googleBeyondcorpAppConnectionState, bool) {
	return gbac.state, gbac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbac *Resource) StateMust() *googleBeyondcorpAppConnectionState {
	if gbac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbac.Type(), gbac.LocalName()))
	}
	return gbac.state
}

// Args contains the configurations for google_beyondcorp_app_connection.
type Args struct {
	// Connectors: list of string, optional
	Connectors terra.ListValue[terra.StringValue] `hcl:"connectors,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// ApplicationEndpoint: required
	ApplicationEndpoint *ApplicationEndpoint `hcl:"application_endpoint,block" validate:"required"`
	// Gateway: optional
	Gateway *Gateway `hcl:"gateway,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBeyondcorpAppConnectionAttributes struct {
	ref terra.Reference
}

// Connectors returns a reference to field connectors of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Connectors() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gbac.ref.Append("connectors"))
}

// DisplayName returns a reference to field display_name of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("id"))
}

// Labels returns a reference to field labels of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("labels"))
}

// Name returns a reference to field name of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("name"))
}

// Project returns a reference to field project of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("project"))
}

// Region returns a reference to field region of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbac.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_beyondcorp_app_connection.
func (gbac googleBeyondcorpAppConnectionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbac.ref.Append("type"))
}

func (gbac googleBeyondcorpAppConnectionAttributes) ApplicationEndpoint() terra.ListValue[ApplicationEndpointAttributes] {
	return terra.ReferenceAsList[ApplicationEndpointAttributes](gbac.ref.Append("application_endpoint"))
}

func (gbac googleBeyondcorpAppConnectionAttributes) Gateway() terra.ListValue[GatewayAttributes] {
	return terra.ReferenceAsList[GatewayAttributes](gbac.ref.Append("gateway"))
}

func (gbac googleBeyondcorpAppConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbac.ref.Append("timeouts"))
}

type googleBeyondcorpAppConnectionState struct {
	Connectors          []string                   `json:"connectors"`
	DisplayName         string                     `json:"display_name"`
	EffectiveLabels     map[string]string          `json:"effective_labels"`
	Id                  string                     `json:"id"`
	Labels              map[string]string          `json:"labels"`
	Name                string                     `json:"name"`
	Project             string                     `json:"project"`
	Region              string                     `json:"region"`
	TerraformLabels     map[string]string          `json:"terraform_labels"`
	Type                string                     `json:"type"`
	ApplicationEndpoint []ApplicationEndpointState `json:"application_endpoint"`
	Gateway             []GatewayState             `json:"gateway"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
