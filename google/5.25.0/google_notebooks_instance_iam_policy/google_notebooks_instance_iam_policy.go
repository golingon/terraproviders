// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_notebooks_instance_iam_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_notebooks_instance_iam_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleNotebooksInstanceIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gniip *Resource) Type() string {
	return "google_notebooks_instance_iam_policy"
}

// LocalName returns the local name for [Resource].
func (gniip *Resource) LocalName() string {
	return gniip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gniip *Resource) Configuration() interface{} {
	return gniip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gniip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gniip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gniip *Resource) Dependencies() terra.Dependencies {
	return gniip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gniip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gniip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gniip *Resource) Attributes() googleNotebooksInstanceIamPolicyAttributes {
	return googleNotebooksInstanceIamPolicyAttributes{ref: terra.ReferenceResource(gniip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gniip *Resource) ImportState(state io.Reader) error {
	gniip.state = &googleNotebooksInstanceIamPolicyState{}
	if err := json.NewDecoder(state).Decode(gniip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gniip.Type(), gniip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gniip *Resource) State() (*googleNotebooksInstanceIamPolicyState, bool) {
	return gniip.state, gniip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gniip *Resource) StateMust() *googleNotebooksInstanceIamPolicyState {
	if gniip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gniip.Type(), gniip.LocalName()))
	}
	return gniip.state
}

// Args contains the configurations for google_notebooks_instance_iam_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
}

type googleNotebooksInstanceIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("etag"))
}

// Id returns a reference to field id of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("instance_name"))
}

// Location returns a reference to field location of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("location"))
}

// PolicyData returns a reference to field policy_data of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_notebooks_instance_iam_policy.
func (gniip googleNotebooksInstanceIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gniip.ref.Append("project"))
}

type googleNotebooksInstanceIamPolicyState struct {
	Etag         string `json:"etag"`
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
	Location     string `json:"location"`
	PolicyData   string `json:"policy_data"`
	Project      string `json:"project"`
}
