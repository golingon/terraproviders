// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_network_services_edge_cache_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LogConfig struct {
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
}

type Routing struct {
	// RoutingHostRule: min=1,max=10
	HostRule []RoutingHostRule `hcl:"host_rule,block" validate:"min=1,max=10"`
	// RoutingPathMatcher: min=1,max=10
	PathMatcher []RoutingPathMatcher `hcl:"path_matcher,block" validate:"min=1,max=10"`
}

type RoutingHostRule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Hosts: list of string, required
	Hosts terra.ListValue[terra.StringValue] `hcl:"hosts,attr" validate:"required"`
	// PathMatcher: string, required
	PathMatcher terra.StringValue `hcl:"path_matcher,attr" validate:"required"`
}

type RoutingPathMatcher struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoutingPathMatcherRouteRule: min=1,max=200
	RouteRule []RoutingPathMatcherRouteRule `hcl:"route_rule,block" validate:"min=1,max=200"`
}

type RoutingPathMatcherRouteRule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Origin: string, optional
	Origin terra.StringValue `hcl:"origin,attr"`
	// Priority: string, required
	Priority terra.StringValue `hcl:"priority,attr" validate:"required"`
	// RoutingPathMatcherRouteRuleHeaderAction: optional
	HeaderAction *RoutingPathMatcherRouteRuleHeaderAction `hcl:"header_action,block"`
	// RoutingPathMatcherRouteRuleMatchRule: min=1,max=5
	MatchRule []RoutingPathMatcherRouteRuleMatchRule `hcl:"match_rule,block" validate:"min=1,max=5"`
	// RoutingPathMatcherRouteRuleRouteAction: optional
	RouteAction *RoutingPathMatcherRouteRuleRouteAction `hcl:"route_action,block"`
	// RoutingPathMatcherRouteRuleUrlRedirect: optional
	UrlRedirect *RoutingPathMatcherRouteRuleUrlRedirect `hcl:"url_redirect,block"`
}

type RoutingPathMatcherRouteRuleHeaderAction struct {
	// RoutingPathMatcher4Cd4E515: min=0,max=25
	RequestHeaderToAdd []RoutingPathMatcher4Cd4E515 `hcl:"request_header_to_add,block" validate:"min=0,max=25"`
	// RoutingPathMatcher30E2C6D1: min=0,max=25
	RequestHeaderToRemove []RoutingPathMatcher30E2C6D1 `hcl:"request_header_to_remove,block" validate:"min=0,max=25"`
	// RoutingPathMatcher0010B710: min=0,max=25
	ResponseHeaderToAdd []RoutingPathMatcher0010B710 `hcl:"response_header_to_add,block" validate:"min=0,max=25"`
	// RoutingPathMatcher7A9E6B7E: min=0,max=25
	ResponseHeaderToRemove []RoutingPathMatcher7A9E6B7E `hcl:"response_header_to_remove,block" validate:"min=0,max=25"`
}

type RoutingPathMatcher4Cd4E515 struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type RoutingPathMatcher30E2C6D1 struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
}

type RoutingPathMatcher0010B710 struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Replace: bool, optional
	Replace terra.BoolValue `hcl:"replace,attr"`
}

type RoutingPathMatcher7A9E6B7E struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
}

type RoutingPathMatcherRouteRuleMatchRule struct {
	// FullPathMatch: string, optional
	FullPathMatch terra.StringValue `hcl:"full_path_match,attr"`
	// IgnoreCase: bool, optional
	IgnoreCase terra.BoolValue `hcl:"ignore_case,attr"`
	// PathTemplateMatch: string, optional
	PathTemplateMatch terra.StringValue `hcl:"path_template_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// RoutingPathMatcherBf5C20Aa: min=0,max=3
	HeaderMatch []RoutingPathMatcherBf5C20Aa `hcl:"header_match,block" validate:"min=0,max=3"`
	// RoutingPathMatcher08De33Bc: min=0,max=5
	QueryParameterMatch []RoutingPathMatcher08De33Bc `hcl:"query_parameter_match,block" validate:"min=0,max=5"`
}

type RoutingPathMatcherBf5C20Aa struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// InvertMatch: bool, optional
	InvertMatch terra.BoolValue `hcl:"invert_match,attr"`
	// PrefixMatch: string, optional
	PrefixMatch terra.StringValue `hcl:"prefix_match,attr"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
	// SuffixMatch: string, optional
	SuffixMatch terra.StringValue `hcl:"suffix_match,attr"`
}

type RoutingPathMatcher08De33Bc struct {
	// ExactMatch: string, optional
	ExactMatch terra.StringValue `hcl:"exact_match,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PresentMatch: bool, optional
	PresentMatch terra.BoolValue `hcl:"present_match,attr"`
}

type RoutingPathMatcherRouteRuleRouteAction struct {
	// RoutingPathMatcher35A3Ab8E: optional
	CdnPolicy *RoutingPathMatcher35A3Ab8E `hcl:"cdn_policy,block"`
	// RoutingPathMatcherA77C79Ff: optional
	CorsPolicy *RoutingPathMatcherA77C79Ff `hcl:"cors_policy,block"`
	// RoutingPathMatcher5C8D0C80: optional
	UrlRewrite *RoutingPathMatcher5C8D0C80 `hcl:"url_rewrite,block"`
}

type RoutingPathMatcher35A3Ab8E struct {
	// CacheMode: string, optional
	CacheMode terra.StringValue `hcl:"cache_mode,attr"`
	// ClientTtl: string, optional
	ClientTtl terra.StringValue `hcl:"client_ttl,attr"`
	// DefaultTtl: string, optional
	DefaultTtl terra.StringValue `hcl:"default_ttl,attr"`
	// MaxTtl: string, optional
	MaxTtl terra.StringValue `hcl:"max_ttl,attr"`
	// NegativeCaching: bool, optional
	NegativeCaching terra.BoolValue `hcl:"negative_caching,attr"`
	// NegativeCachingPolicy: map of string, optional
	NegativeCachingPolicy terra.MapValue[terra.StringValue] `hcl:"negative_caching_policy,attr"`
	// SignedRequestKeyset: string, optional
	SignedRequestKeyset terra.StringValue `hcl:"signed_request_keyset,attr"`
	// SignedRequestMaximumExpirationTtl: string, optional
	SignedRequestMaximumExpirationTtl terra.StringValue `hcl:"signed_request_maximum_expiration_ttl,attr"`
	// SignedRequestMode: string, optional
	SignedRequestMode terra.StringValue `hcl:"signed_request_mode,attr"`
	// RoutingPathMatcher131842E3: optional
	AddSignatures *RoutingPathMatcher131842E3 `hcl:"add_signatures,block"`
	// RoutingPathMatcher13F704E2: optional
	CacheKeyPolicy *RoutingPathMatcher13F704E2 `hcl:"cache_key_policy,block"`
	// RoutingPathMatcher75D068A7: optional
	SignedTokenOptions *RoutingPathMatcher75D068A7 `hcl:"signed_token_options,block"`
}

type RoutingPathMatcher131842E3 struct {
	// Actions: list of string, required
	Actions terra.ListValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// CopiedParameters: list of string, optional
	CopiedParameters terra.ListValue[terra.StringValue] `hcl:"copied_parameters,attr"`
	// Keyset: string, optional
	Keyset terra.StringValue `hcl:"keyset,attr"`
	// TokenQueryParameter: string, optional
	TokenQueryParameter terra.StringValue `hcl:"token_query_parameter,attr"`
	// TokenTtl: string, optional
	TokenTtl terra.StringValue `hcl:"token_ttl,attr"`
}

type RoutingPathMatcher13F704E2 struct {
	// ExcludeHost: bool, optional
	ExcludeHost terra.BoolValue `hcl:"exclude_host,attr"`
	// ExcludeQueryString: bool, optional
	ExcludeQueryString terra.BoolValue `hcl:"exclude_query_string,attr"`
	// ExcludedQueryParameters: list of string, optional
	ExcludedQueryParameters terra.ListValue[terra.StringValue] `hcl:"excluded_query_parameters,attr"`
	// IncludeProtocol: bool, optional
	IncludeProtocol terra.BoolValue `hcl:"include_protocol,attr"`
	// IncludedCookieNames: list of string, optional
	IncludedCookieNames terra.ListValue[terra.StringValue] `hcl:"included_cookie_names,attr"`
	// IncludedHeaderNames: list of string, optional
	IncludedHeaderNames terra.ListValue[terra.StringValue] `hcl:"included_header_names,attr"`
	// IncludedQueryParameters: list of string, optional
	IncludedQueryParameters terra.ListValue[terra.StringValue] `hcl:"included_query_parameters,attr"`
}

type RoutingPathMatcher75D068A7 struct {
	// AllowedSignatureAlgorithms: list of string, optional
	AllowedSignatureAlgorithms terra.ListValue[terra.StringValue] `hcl:"allowed_signature_algorithms,attr"`
	// TokenQueryParameter: string, optional
	TokenQueryParameter terra.StringValue `hcl:"token_query_parameter,attr"`
}

type RoutingPathMatcherA77C79Ff struct {
	// AllowCredentials: bool, optional
	AllowCredentials terra.BoolValue `hcl:"allow_credentials,attr"`
	// AllowHeaders: list of string, optional
	AllowHeaders terra.ListValue[terra.StringValue] `hcl:"allow_headers,attr"`
	// AllowMethods: list of string, optional
	AllowMethods terra.ListValue[terra.StringValue] `hcl:"allow_methods,attr"`
	// AllowOrigins: list of string, optional
	AllowOrigins terra.ListValue[terra.StringValue] `hcl:"allow_origins,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// ExposeHeaders: list of string, optional
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAge: string, required
	MaxAge terra.StringValue `hcl:"max_age,attr" validate:"required"`
}

type RoutingPathMatcher5C8D0C80 struct {
	// HostRewrite: string, optional
	HostRewrite terra.StringValue `hcl:"host_rewrite,attr"`
	// PathPrefixRewrite: string, optional
	PathPrefixRewrite terra.StringValue `hcl:"path_prefix_rewrite,attr"`
	// PathTemplateRewrite: string, optional
	PathTemplateRewrite terra.StringValue `hcl:"path_template_rewrite,attr"`
}

type RoutingPathMatcherRouteRuleUrlRedirect struct {
	// HostRedirect: string, optional
	HostRedirect terra.StringValue `hcl:"host_redirect,attr"`
	// HttpsRedirect: bool, optional
	HttpsRedirect terra.BoolValue `hcl:"https_redirect,attr"`
	// PathRedirect: string, optional
	PathRedirect terra.StringValue `hcl:"path_redirect,attr"`
	// PrefixRedirect: string, optional
	PrefixRedirect terra.StringValue `hcl:"prefix_redirect,attr"`
	// RedirectResponseCode: string, optional
	RedirectResponseCode terra.StringValue `hcl:"redirect_response_code,attr"`
	// StripQuery: bool, optional
	StripQuery terra.BoolValue `hcl:"strip_query,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("enable"))
}

func (lc LogConfigAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("sample_rate"))
}

type RoutingAttributes struct {
	ref terra.Reference
}

func (r RoutingAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RoutingAttributes) InternalWithRef(ref terra.Reference) RoutingAttributes {
	return RoutingAttributes{ref: ref}
}

func (r RoutingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RoutingAttributes) HostRule() terra.ListValue[RoutingHostRuleAttributes] {
	return terra.ReferenceAsList[RoutingHostRuleAttributes](r.ref.Append("host_rule"))
}

func (r RoutingAttributes) PathMatcher() terra.ListValue[RoutingPathMatcherAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherAttributes](r.ref.Append("path_matcher"))
}

type RoutingHostRuleAttributes struct {
	ref terra.Reference
}

func (hr RoutingHostRuleAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr RoutingHostRuleAttributes) InternalWithRef(ref terra.Reference) RoutingHostRuleAttributes {
	return RoutingHostRuleAttributes{ref: ref}
}

func (hr RoutingHostRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr RoutingHostRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("description"))
}

func (hr RoutingHostRuleAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hr.ref.Append("hosts"))
}

func (hr RoutingHostRuleAttributes) PathMatcher() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("path_matcher"))
}

type RoutingPathMatcherAttributes struct {
	ref terra.Reference
}

func (pm RoutingPathMatcherAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm RoutingPathMatcherAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherAttributes {
	return RoutingPathMatcherAttributes{ref: ref}
}

func (pm RoutingPathMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm RoutingPathMatcherAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("description"))
}

func (pm RoutingPathMatcherAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("name"))
}

func (pm RoutingPathMatcherAttributes) RouteRule() terra.ListValue[RoutingPathMatcherRouteRuleAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherRouteRuleAttributes](pm.ref.Append("route_rule"))
}

type RoutingPathMatcherRouteRuleAttributes struct {
	ref terra.Reference
}

func (rr RoutingPathMatcherRouteRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr RoutingPathMatcherRouteRuleAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherRouteRuleAttributes {
	return RoutingPathMatcherRouteRuleAttributes{ref: ref}
}

func (rr RoutingPathMatcherRouteRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr RoutingPathMatcherRouteRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("description"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) Origin() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("origin"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("priority"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) HeaderAction() terra.ListValue[RoutingPathMatcherRouteRuleHeaderActionAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherRouteRuleHeaderActionAttributes](rr.ref.Append("header_action"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) MatchRule() terra.ListValue[RoutingPathMatcherRouteRuleMatchRuleAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherRouteRuleMatchRuleAttributes](rr.ref.Append("match_rule"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) RouteAction() terra.ListValue[RoutingPathMatcherRouteRuleRouteActionAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherRouteRuleRouteActionAttributes](rr.ref.Append("route_action"))
}

func (rr RoutingPathMatcherRouteRuleAttributes) UrlRedirect() terra.ListValue[RoutingPathMatcherRouteRuleUrlRedirectAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherRouteRuleUrlRedirectAttributes](rr.ref.Append("url_redirect"))
}

type RoutingPathMatcherRouteRuleHeaderActionAttributes struct {
	ref terra.Reference
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return ha.ref, nil
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherRouteRuleHeaderActionAttributes {
	return RoutingPathMatcherRouteRuleHeaderActionAttributes{ref: ref}
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ha.ref.InternalTokens()
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) RequestHeaderToAdd() terra.ListValue[RoutingPathMatcher4Cd4E515Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher4Cd4E515Attributes](ha.ref.Append("request_header_to_add"))
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) RequestHeaderToRemove() terra.ListValue[RoutingPathMatcher30E2C6D1Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher30E2C6D1Attributes](ha.ref.Append("request_header_to_remove"))
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) ResponseHeaderToAdd() terra.ListValue[RoutingPathMatcher0010B710Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher0010B710Attributes](ha.ref.Append("response_header_to_add"))
}

func (ha RoutingPathMatcherRouteRuleHeaderActionAttributes) ResponseHeaderToRemove() terra.ListValue[RoutingPathMatcher7A9E6B7EAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcher7A9E6B7EAttributes](ha.ref.Append("response_header_to_remove"))
}

type RoutingPathMatcher4Cd4E515Attributes struct {
	ref terra.Reference
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher4Cd4E515Attributes {
	return RoutingPathMatcher4Cd4E515Attributes{ref: ref}
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RoutingPathMatcher4Cd4E515Attributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type RoutingPathMatcher30E2C6D1Attributes struct {
	ref terra.Reference
}

func (rhtr RoutingPathMatcher30E2C6D1Attributes) InternalRef() (terra.Reference, error) {
	return rhtr.ref, nil
}

func (rhtr RoutingPathMatcher30E2C6D1Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher30E2C6D1Attributes {
	return RoutingPathMatcher30E2C6D1Attributes{ref: ref}
}

func (rhtr RoutingPathMatcher30E2C6D1Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhtr.ref.InternalTokens()
}

func (rhtr RoutingPathMatcher30E2C6D1Attributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhtr.ref.Append("header_name"))
}

type RoutingPathMatcher0010B710Attributes struct {
	ref terra.Reference
}

func (rhta RoutingPathMatcher0010B710Attributes) InternalRef() (terra.Reference, error) {
	return rhta.ref, nil
}

func (rhta RoutingPathMatcher0010B710Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher0010B710Attributes {
	return RoutingPathMatcher0010B710Attributes{ref: ref}
}

func (rhta RoutingPathMatcher0010B710Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhta.ref.InternalTokens()
}

func (rhta RoutingPathMatcher0010B710Attributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_name"))
}

func (rhta RoutingPathMatcher0010B710Attributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(rhta.ref.Append("header_value"))
}

func (rhta RoutingPathMatcher0010B710Attributes) Replace() terra.BoolValue {
	return terra.ReferenceAsBool(rhta.ref.Append("replace"))
}

type RoutingPathMatcher7A9E6B7EAttributes struct {
	ref terra.Reference
}

func (rhtr RoutingPathMatcher7A9E6B7EAttributes) InternalRef() (terra.Reference, error) {
	return rhtr.ref, nil
}

func (rhtr RoutingPathMatcher7A9E6B7EAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher7A9E6B7EAttributes {
	return RoutingPathMatcher7A9E6B7EAttributes{ref: ref}
}

func (rhtr RoutingPathMatcher7A9E6B7EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rhtr.ref.InternalTokens()
}

func (rhtr RoutingPathMatcher7A9E6B7EAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(rhtr.ref.Append("header_name"))
}

type RoutingPathMatcherRouteRuleMatchRuleAttributes struct {
	ref terra.Reference
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherRouteRuleMatchRuleAttributes {
	return RoutingPathMatcherRouteRuleMatchRuleAttributes{ref: ref}
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) FullPathMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("full_path_match"))
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) IgnoreCase() terra.BoolValue {
	return terra.ReferenceAsBool(mr.ref.Append("ignore_case"))
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) PathTemplateMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("path_template_match"))
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("prefix_match"))
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) HeaderMatch() terra.ListValue[RoutingPathMatcherBf5C20AaAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherBf5C20AaAttributes](mr.ref.Append("header_match"))
}

func (mr RoutingPathMatcherRouteRuleMatchRuleAttributes) QueryParameterMatch() terra.ListValue[RoutingPathMatcher08De33BcAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcher08De33BcAttributes](mr.ref.Append("query_parameter_match"))
}

type RoutingPathMatcherBf5C20AaAttributes struct {
	ref terra.Reference
}

func (hm RoutingPathMatcherBf5C20AaAttributes) InternalRef() (terra.Reference, error) {
	return hm.ref, nil
}

func (hm RoutingPathMatcherBf5C20AaAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherBf5C20AaAttributes {
	return RoutingPathMatcherBf5C20AaAttributes{ref: ref}
}

func (hm RoutingPathMatcherBf5C20AaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hm.ref.InternalTokens()
}

func (hm RoutingPathMatcherBf5C20AaAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("exact_match"))
}

func (hm RoutingPathMatcherBf5C20AaAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("header_name"))
}

func (hm RoutingPathMatcherBf5C20AaAttributes) InvertMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("invert_match"))
}

func (hm RoutingPathMatcherBf5C20AaAttributes) PrefixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("prefix_match"))
}

func (hm RoutingPathMatcherBf5C20AaAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("present_match"))
}

func (hm RoutingPathMatcherBf5C20AaAttributes) SuffixMatch() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("suffix_match"))
}

type RoutingPathMatcher08De33BcAttributes struct {
	ref terra.Reference
}

func (qpm RoutingPathMatcher08De33BcAttributes) InternalRef() (terra.Reference, error) {
	return qpm.ref, nil
}

func (qpm RoutingPathMatcher08De33BcAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher08De33BcAttributes {
	return RoutingPathMatcher08De33BcAttributes{ref: ref}
}

func (qpm RoutingPathMatcher08De33BcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qpm.ref.InternalTokens()
}

func (qpm RoutingPathMatcher08De33BcAttributes) ExactMatch() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("exact_match"))
}

func (qpm RoutingPathMatcher08De33BcAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qpm.ref.Append("name"))
}

func (qpm RoutingPathMatcher08De33BcAttributes) PresentMatch() terra.BoolValue {
	return terra.ReferenceAsBool(qpm.ref.Append("present_match"))
}

type RoutingPathMatcherRouteRuleRouteActionAttributes struct {
	ref terra.Reference
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherRouteRuleRouteActionAttributes {
	return RoutingPathMatcherRouteRuleRouteActionAttributes{ref: ref}
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) CdnPolicy() terra.ListValue[RoutingPathMatcher35A3Ab8EAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcher35A3Ab8EAttributes](ra.ref.Append("cdn_policy"))
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) CorsPolicy() terra.ListValue[RoutingPathMatcherA77C79FfAttributes] {
	return terra.ReferenceAsList[RoutingPathMatcherA77C79FfAttributes](ra.ref.Append("cors_policy"))
}

func (ra RoutingPathMatcherRouteRuleRouteActionAttributes) UrlRewrite() terra.ListValue[RoutingPathMatcher5C8D0C80Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher5C8D0C80Attributes](ra.ref.Append("url_rewrite"))
}

type RoutingPathMatcher35A3Ab8EAttributes struct {
	ref terra.Reference
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher35A3Ab8EAttributes {
	return RoutingPathMatcher35A3Ab8EAttributes{ref: ref}
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) CacheMode() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("cache_mode"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) ClientTtl() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("client_ttl"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) DefaultTtl() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("default_ttl"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) MaxTtl() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("max_ttl"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) NegativeCaching() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("negative_caching"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) NegativeCachingPolicy() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cp.ref.Append("negative_caching_policy"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) SignedRequestKeyset() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("signed_request_keyset"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) SignedRequestMaximumExpirationTtl() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("signed_request_maximum_expiration_ttl"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) SignedRequestMode() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("signed_request_mode"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) AddSignatures() terra.ListValue[RoutingPathMatcher131842E3Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher131842E3Attributes](cp.ref.Append("add_signatures"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) CacheKeyPolicy() terra.ListValue[RoutingPathMatcher13F704E2Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher13F704E2Attributes](cp.ref.Append("cache_key_policy"))
}

func (cp RoutingPathMatcher35A3Ab8EAttributes) SignedTokenOptions() terra.ListValue[RoutingPathMatcher75D068A7Attributes] {
	return terra.ReferenceAsList[RoutingPathMatcher75D068A7Attributes](cp.ref.Append("signed_token_options"))
}

type RoutingPathMatcher131842E3Attributes struct {
	ref terra.Reference
}

func (as RoutingPathMatcher131842E3Attributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as RoutingPathMatcher131842E3Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher131842E3Attributes {
	return RoutingPathMatcher131842E3Attributes{ref: ref}
}

func (as RoutingPathMatcher131842E3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as RoutingPathMatcher131842E3Attributes) Actions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("actions"))
}

func (as RoutingPathMatcher131842E3Attributes) CopiedParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("copied_parameters"))
}

func (as RoutingPathMatcher131842E3Attributes) Keyset() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("keyset"))
}

func (as RoutingPathMatcher131842E3Attributes) TokenQueryParameter() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("token_query_parameter"))
}

func (as RoutingPathMatcher131842E3Attributes) TokenTtl() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("token_ttl"))
}

type RoutingPathMatcher13F704E2Attributes struct {
	ref terra.Reference
}

func (ckp RoutingPathMatcher13F704E2Attributes) InternalRef() (terra.Reference, error) {
	return ckp.ref, nil
}

func (ckp RoutingPathMatcher13F704E2Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher13F704E2Attributes {
	return RoutingPathMatcher13F704E2Attributes{ref: ref}
}

func (ckp RoutingPathMatcher13F704E2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ckp.ref.InternalTokens()
}

func (ckp RoutingPathMatcher13F704E2Attributes) ExcludeHost() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("exclude_host"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) ExcludeQueryString() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("exclude_query_string"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) ExcludedQueryParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("excluded_query_parameters"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) IncludeProtocol() terra.BoolValue {
	return terra.ReferenceAsBool(ckp.ref.Append("include_protocol"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) IncludedCookieNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("included_cookie_names"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) IncludedHeaderNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("included_header_names"))
}

func (ckp RoutingPathMatcher13F704E2Attributes) IncludedQueryParameters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ckp.ref.Append("included_query_parameters"))
}

type RoutingPathMatcher75D068A7Attributes struct {
	ref terra.Reference
}

func (sto RoutingPathMatcher75D068A7Attributes) InternalRef() (terra.Reference, error) {
	return sto.ref, nil
}

func (sto RoutingPathMatcher75D068A7Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher75D068A7Attributes {
	return RoutingPathMatcher75D068A7Attributes{ref: ref}
}

func (sto RoutingPathMatcher75D068A7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return sto.ref.InternalTokens()
}

func (sto RoutingPathMatcher75D068A7Attributes) AllowedSignatureAlgorithms() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sto.ref.Append("allowed_signature_algorithms"))
}

func (sto RoutingPathMatcher75D068A7Attributes) TokenQueryParameter() terra.StringValue {
	return terra.ReferenceAsString(sto.ref.Append("token_query_parameter"))
}

type RoutingPathMatcherA77C79FfAttributes struct {
	ref terra.Reference
}

func (cp RoutingPathMatcherA77C79FfAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp RoutingPathMatcherA77C79FfAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherA77C79FfAttributes {
	return RoutingPathMatcherA77C79FfAttributes{ref: ref}
}

func (cp RoutingPathMatcherA77C79FfAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp RoutingPathMatcherA77C79FfAttributes) AllowCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("allow_credentials"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) AllowHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_headers"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) AllowMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_methods"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) AllowOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("allow_origins"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("disabled"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cp.ref.Append("expose_headers"))
}

func (cp RoutingPathMatcherA77C79FfAttributes) MaxAge() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("max_age"))
}

type RoutingPathMatcher5C8D0C80Attributes struct {
	ref terra.Reference
}

func (ur RoutingPathMatcher5C8D0C80Attributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur RoutingPathMatcher5C8D0C80Attributes) InternalWithRef(ref terra.Reference) RoutingPathMatcher5C8D0C80Attributes {
	return RoutingPathMatcher5C8D0C80Attributes{ref: ref}
}

func (ur RoutingPathMatcher5C8D0C80Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur RoutingPathMatcher5C8D0C80Attributes) HostRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_rewrite"))
}

func (ur RoutingPathMatcher5C8D0C80Attributes) PathPrefixRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_prefix_rewrite"))
}

func (ur RoutingPathMatcher5C8D0C80Attributes) PathTemplateRewrite() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_template_rewrite"))
}

type RoutingPathMatcherRouteRuleUrlRedirectAttributes struct {
	ref terra.Reference
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) InternalRef() (terra.Reference, error) {
	return ur.ref, nil
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) InternalWithRef(ref terra.Reference) RoutingPathMatcherRouteRuleUrlRedirectAttributes {
	return RoutingPathMatcherRouteRuleUrlRedirectAttributes{ref: ref}
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ur.ref.InternalTokens()
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) HostRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("host_redirect"))
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) HttpsRedirect() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("https_redirect"))
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) PathRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("path_redirect"))
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) PrefixRedirect() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("prefix_redirect"))
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) RedirectResponseCode() terra.StringValue {
	return terra.ReferenceAsString(ur.ref.Append("redirect_response_code"))
}

func (ur RoutingPathMatcherRouteRuleUrlRedirectAttributes) StripQuery() terra.BoolValue {
	return terra.ReferenceAsBool(ur.ref.Append("strip_query"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LogConfigState struct {
	Enable     bool    `json:"enable"`
	SampleRate float64 `json:"sample_rate"`
}

type RoutingState struct {
	HostRule    []RoutingHostRuleState    `json:"host_rule"`
	PathMatcher []RoutingPathMatcherState `json:"path_matcher"`
}

type RoutingHostRuleState struct {
	Description string   `json:"description"`
	Hosts       []string `json:"hosts"`
	PathMatcher string   `json:"path_matcher"`
}

type RoutingPathMatcherState struct {
	Description string                             `json:"description"`
	Name        string                             `json:"name"`
	RouteRule   []RoutingPathMatcherRouteRuleState `json:"route_rule"`
}

type RoutingPathMatcherRouteRuleState struct {
	Description  string                                         `json:"description"`
	Origin       string                                         `json:"origin"`
	Priority     string                                         `json:"priority"`
	HeaderAction []RoutingPathMatcherRouteRuleHeaderActionState `json:"header_action"`
	MatchRule    []RoutingPathMatcherRouteRuleMatchRuleState    `json:"match_rule"`
	RouteAction  []RoutingPathMatcherRouteRuleRouteActionState  `json:"route_action"`
	UrlRedirect  []RoutingPathMatcherRouteRuleUrlRedirectState  `json:"url_redirect"`
}

type RoutingPathMatcherRouteRuleHeaderActionState struct {
	RequestHeaderToAdd     []RoutingPathMatcher4Cd4E515State `json:"request_header_to_add"`
	RequestHeaderToRemove  []RoutingPathMatcher30E2C6D1State `json:"request_header_to_remove"`
	ResponseHeaderToAdd    []RoutingPathMatcher0010B710State `json:"response_header_to_add"`
	ResponseHeaderToRemove []RoutingPathMatcher7A9E6B7EState `json:"response_header_to_remove"`
}

type RoutingPathMatcher4Cd4E515State struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type RoutingPathMatcher30E2C6D1State struct {
	HeaderName string `json:"header_name"`
}

type RoutingPathMatcher0010B710State struct {
	HeaderName  string `json:"header_name"`
	HeaderValue string `json:"header_value"`
	Replace     bool   `json:"replace"`
}

type RoutingPathMatcher7A9E6B7EState struct {
	HeaderName string `json:"header_name"`
}

type RoutingPathMatcherRouteRuleMatchRuleState struct {
	FullPathMatch       string                            `json:"full_path_match"`
	IgnoreCase          bool                              `json:"ignore_case"`
	PathTemplateMatch   string                            `json:"path_template_match"`
	PrefixMatch         string                            `json:"prefix_match"`
	HeaderMatch         []RoutingPathMatcherBf5C20AaState `json:"header_match"`
	QueryParameterMatch []RoutingPathMatcher08De33BcState `json:"query_parameter_match"`
}

type RoutingPathMatcherBf5C20AaState struct {
	ExactMatch   string `json:"exact_match"`
	HeaderName   string `json:"header_name"`
	InvertMatch  bool   `json:"invert_match"`
	PrefixMatch  string `json:"prefix_match"`
	PresentMatch bool   `json:"present_match"`
	SuffixMatch  string `json:"suffix_match"`
}

type RoutingPathMatcher08De33BcState struct {
	ExactMatch   string `json:"exact_match"`
	Name         string `json:"name"`
	PresentMatch bool   `json:"present_match"`
}

type RoutingPathMatcherRouteRuleRouteActionState struct {
	CdnPolicy  []RoutingPathMatcher35A3Ab8EState `json:"cdn_policy"`
	CorsPolicy []RoutingPathMatcherA77C79FfState `json:"cors_policy"`
	UrlRewrite []RoutingPathMatcher5C8D0C80State `json:"url_rewrite"`
}

type RoutingPathMatcher35A3Ab8EState struct {
	CacheMode                         string                            `json:"cache_mode"`
	ClientTtl                         string                            `json:"client_ttl"`
	DefaultTtl                        string                            `json:"default_ttl"`
	MaxTtl                            string                            `json:"max_ttl"`
	NegativeCaching                   bool                              `json:"negative_caching"`
	NegativeCachingPolicy             map[string]string                 `json:"negative_caching_policy"`
	SignedRequestKeyset               string                            `json:"signed_request_keyset"`
	SignedRequestMaximumExpirationTtl string                            `json:"signed_request_maximum_expiration_ttl"`
	SignedRequestMode                 string                            `json:"signed_request_mode"`
	AddSignatures                     []RoutingPathMatcher131842E3State `json:"add_signatures"`
	CacheKeyPolicy                    []RoutingPathMatcher13F704E2State `json:"cache_key_policy"`
	SignedTokenOptions                []RoutingPathMatcher75D068A7State `json:"signed_token_options"`
}

type RoutingPathMatcher131842E3State struct {
	Actions             []string `json:"actions"`
	CopiedParameters    []string `json:"copied_parameters"`
	Keyset              string   `json:"keyset"`
	TokenQueryParameter string   `json:"token_query_parameter"`
	TokenTtl            string   `json:"token_ttl"`
}

type RoutingPathMatcher13F704E2State struct {
	ExcludeHost             bool     `json:"exclude_host"`
	ExcludeQueryString      bool     `json:"exclude_query_string"`
	ExcludedQueryParameters []string `json:"excluded_query_parameters"`
	IncludeProtocol         bool     `json:"include_protocol"`
	IncludedCookieNames     []string `json:"included_cookie_names"`
	IncludedHeaderNames     []string `json:"included_header_names"`
	IncludedQueryParameters []string `json:"included_query_parameters"`
}

type RoutingPathMatcher75D068A7State struct {
	AllowedSignatureAlgorithms []string `json:"allowed_signature_algorithms"`
	TokenQueryParameter        string   `json:"token_query_parameter"`
}

type RoutingPathMatcherA77C79FfState struct {
	AllowCredentials bool     `json:"allow_credentials"`
	AllowHeaders     []string `json:"allow_headers"`
	AllowMethods     []string `json:"allow_methods"`
	AllowOrigins     []string `json:"allow_origins"`
	Disabled         bool     `json:"disabled"`
	ExposeHeaders    []string `json:"expose_headers"`
	MaxAge           string   `json:"max_age"`
}

type RoutingPathMatcher5C8D0C80State struct {
	HostRewrite         string `json:"host_rewrite"`
	PathPrefixRewrite   string `json:"path_prefix_rewrite"`
	PathTemplateRewrite string `json:"path_template_rewrite"`
}

type RoutingPathMatcherRouteRuleUrlRedirectState struct {
	HostRedirect         string `json:"host_redirect"`
	HttpsRedirect        bool   `json:"https_redirect"`
	PathRedirect         string `json:"path_redirect"`
	PrefixRedirect       string `json:"prefix_redirect"`
	RedirectResponseCode string `json:"redirect_response_code"`
	StripQuery           bool   `json:"strip_query"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
