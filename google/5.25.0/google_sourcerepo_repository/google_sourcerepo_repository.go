// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_sourcerepo_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_sourcerepo_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSourcerepoRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsr *Resource) Type() string {
	return "google_sourcerepo_repository"
}

// LocalName returns the local name for [Resource].
func (gsr *Resource) LocalName() string {
	return gsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsr *Resource) Configuration() interface{} {
	return gsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsr *Resource) Dependencies() terra.Dependencies {
	return gsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsr *Resource) Attributes() googleSourcerepoRepositoryAttributes {
	return googleSourcerepoRepositoryAttributes{ref: terra.ReferenceResource(gsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsr *Resource) ImportState(state io.Reader) error {
	gsr.state = &googleSourcerepoRepositoryState{}
	if err := json.NewDecoder(state).Decode(gsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsr.Type(), gsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsr *Resource) State() (*googleSourcerepoRepositoryState, bool) {
	return gsr.state, gsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsr *Resource) StateMust() *googleSourcerepoRepositoryState {
	if gsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsr.Type(), gsr.LocalName()))
	}
	return gsr.state
}

// Args contains the configurations for google_sourcerepo_repository.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PubsubConfigs: min=0
	PubsubConfigs []PubsubConfigs `hcl:"pubsub_configs,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSourcerepoRepositoryAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_sourcerepo_repository.
func (gsr googleSourcerepoRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("id"))
}

// Name returns a reference to field name of google_sourcerepo_repository.
func (gsr googleSourcerepoRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("name"))
}

// Project returns a reference to field project of google_sourcerepo_repository.
func (gsr googleSourcerepoRepositoryAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("project"))
}

// Size returns a reference to field size of google_sourcerepo_repository.
func (gsr googleSourcerepoRepositoryAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(gsr.ref.Append("size"))
}

// Url returns a reference to field url of google_sourcerepo_repository.
func (gsr googleSourcerepoRepositoryAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(gsr.ref.Append("url"))
}

func (gsr googleSourcerepoRepositoryAttributes) PubsubConfigs() terra.SetValue[PubsubConfigsAttributes] {
	return terra.ReferenceAsSet[PubsubConfigsAttributes](gsr.ref.Append("pubsub_configs"))
}

func (gsr googleSourcerepoRepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsr.ref.Append("timeouts"))
}

type googleSourcerepoRepositoryState struct {
	Id            string               `json:"id"`
	Name          string               `json:"name"`
	Project       string               `json:"project"`
	Size          float64              `json:"size"`
	Url           string               `json:"url"`
	PubsubConfigs []PubsubConfigsState `json:"pubsub_configs"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
