// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_app_engine_service_split_traffic

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_app_engine_service_split_traffic.
type Resource struct {
	Name      string
	Args      Args
	state     *googleAppEngineServiceSplitTrafficState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gaesst *Resource) Type() string {
	return "google_app_engine_service_split_traffic"
}

// LocalName returns the local name for [Resource].
func (gaesst *Resource) LocalName() string {
	return gaesst.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gaesst *Resource) Configuration() interface{} {
	return gaesst.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gaesst *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gaesst)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gaesst *Resource) Dependencies() terra.Dependencies {
	return gaesst.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gaesst *Resource) LifecycleManagement() *terra.Lifecycle {
	return gaesst.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gaesst *Resource) Attributes() googleAppEngineServiceSplitTrafficAttributes {
	return googleAppEngineServiceSplitTrafficAttributes{ref: terra.ReferenceResource(gaesst)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gaesst *Resource) ImportState(state io.Reader) error {
	gaesst.state = &googleAppEngineServiceSplitTrafficState{}
	if err := json.NewDecoder(state).Decode(gaesst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gaesst.Type(), gaesst.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gaesst *Resource) State() (*googleAppEngineServiceSplitTrafficState, bool) {
	return gaesst.state, gaesst.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gaesst *Resource) StateMust() *googleAppEngineServiceSplitTrafficState {
	if gaesst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gaesst.Type(), gaesst.LocalName()))
	}
	return gaesst.state
}

// Args contains the configurations for google_app_engine_service_split_traffic.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MigrateTraffic: bool, optional
	MigrateTraffic terra.BoolValue `hcl:"migrate_traffic,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Split: required
	Split *Split `hcl:"split,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleAppEngineServiceSplitTrafficAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_app_engine_service_split_traffic.
func (gaesst googleAppEngineServiceSplitTrafficAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gaesst.ref.Append("id"))
}

// MigrateTraffic returns a reference to field migrate_traffic of google_app_engine_service_split_traffic.
func (gaesst googleAppEngineServiceSplitTrafficAttributes) MigrateTraffic() terra.BoolValue {
	return terra.ReferenceAsBool(gaesst.ref.Append("migrate_traffic"))
}

// Project returns a reference to field project of google_app_engine_service_split_traffic.
func (gaesst googleAppEngineServiceSplitTrafficAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gaesst.ref.Append("project"))
}

// Service returns a reference to field service of google_app_engine_service_split_traffic.
func (gaesst googleAppEngineServiceSplitTrafficAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(gaesst.ref.Append("service"))
}

func (gaesst googleAppEngineServiceSplitTrafficAttributes) Split() terra.ListValue[SplitAttributes] {
	return terra.ReferenceAsList[SplitAttributes](gaesst.ref.Append("split"))
}

func (gaesst googleAppEngineServiceSplitTrafficAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gaesst.ref.Append("timeouts"))
}

type googleAppEngineServiceSplitTrafficState struct {
	Id             string         `json:"id"`
	MigrateTraffic bool           `json:"migrate_traffic"`
	Project        string         `json:"project"`
	Service        string         `json:"service"`
	Split          []SplitState   `json:"split"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
