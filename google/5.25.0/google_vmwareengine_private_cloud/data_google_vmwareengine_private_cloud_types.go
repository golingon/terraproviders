// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_private_cloud

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataHcxAttributes struct {
	ref terra.Reference
}

func (h DataHcxAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h DataHcxAttributes) InternalWithRef(ref terra.Reference) DataHcxAttributes {
	return DataHcxAttributes{ref: ref}
}

func (h DataHcxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h DataHcxAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("fqdn"))
}

func (h DataHcxAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("internal_ip"))
}

func (h DataHcxAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("state"))
}

func (h DataHcxAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("version"))
}

type DataManagementClusterAttributes struct {
	ref terra.Reference
}

func (mc DataManagementClusterAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc DataManagementClusterAttributes) InternalWithRef(ref terra.Reference) DataManagementClusterAttributes {
	return DataManagementClusterAttributes{ref: ref}
}

func (mc DataManagementClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc DataManagementClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cluster_id"))
}

func (mc DataManagementClusterAttributes) NodeTypeConfigs() terra.SetValue[DataManagementClusterNodeTypeConfigsAttributes] {
	return terra.ReferenceAsSet[DataManagementClusterNodeTypeConfigsAttributes](mc.ref.Append("node_type_configs"))
}

type DataManagementClusterNodeTypeConfigsAttributes struct {
	ref terra.Reference
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return ntc.ref, nil
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) InternalWithRef(ref terra.Reference) DataManagementClusterNodeTypeConfigsAttributes {
	return DataManagementClusterNodeTypeConfigsAttributes{ref: ref}
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ntc.ref.InternalTokens()
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) CustomCoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ntc.ref.Append("custom_core_count"))
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ntc.ref.Append("node_count"))
}

func (ntc DataManagementClusterNodeTypeConfigsAttributes) NodeTypeId() terra.StringValue {
	return terra.ReferenceAsString(ntc.ref.Append("node_type_id"))
}

type DataNetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc DataNetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc DataNetworkConfigAttributes) InternalWithRef(ref terra.Reference) DataNetworkConfigAttributes {
	return DataNetworkConfigAttributes{ref: ref}
}

func (nc DataNetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc DataNetworkConfigAttributes) DnsServerIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("dns_server_ip"))
}

func (nc DataNetworkConfigAttributes) ManagementCidr() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("management_cidr"))
}

func (nc DataNetworkConfigAttributes) ManagementIpAddressLayoutVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("management_ip_address_layout_version"))
}

func (nc DataNetworkConfigAttributes) VmwareEngineNetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("vmware_engine_network"))
}

func (nc DataNetworkConfigAttributes) VmwareEngineNetworkCanonical() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("vmware_engine_network_canonical"))
}

type DataNsxAttributes struct {
	ref terra.Reference
}

func (n DataNsxAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataNsxAttributes) InternalWithRef(ref terra.Reference) DataNsxAttributes {
	return DataNsxAttributes{ref: ref}
}

func (n DataNsxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataNsxAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("fqdn"))
}

func (n DataNsxAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("internal_ip"))
}

func (n DataNsxAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("state"))
}

func (n DataNsxAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("version"))
}

type DataVcenterAttributes struct {
	ref terra.Reference
}

func (v DataVcenterAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v DataVcenterAttributes) InternalWithRef(ref terra.Reference) DataVcenterAttributes {
	return DataVcenterAttributes{ref: ref}
}

func (v DataVcenterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v DataVcenterAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("fqdn"))
}

func (v DataVcenterAttributes) InternalIp() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("internal_ip"))
}

func (v DataVcenterAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("state"))
}

func (v DataVcenterAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("version"))
}

type DataHcxState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}

type DataManagementClusterState struct {
	ClusterId       string                                      `json:"cluster_id"`
	NodeTypeConfigs []DataManagementClusterNodeTypeConfigsState `json:"node_type_configs"`
}

type DataManagementClusterNodeTypeConfigsState struct {
	CustomCoreCount float64 `json:"custom_core_count"`
	NodeCount       float64 `json:"node_count"`
	NodeTypeId      string  `json:"node_type_id"`
}

type DataNetworkConfigState struct {
	DnsServerIp                      string  `json:"dns_server_ip"`
	ManagementCidr                   string  `json:"management_cidr"`
	ManagementIpAddressLayoutVersion float64 `json:"management_ip_address_layout_version"`
	VmwareEngineNetwork              string  `json:"vmware_engine_network"`
	VmwareEngineNetworkCanonical     string  `json:"vmware_engine_network_canonical"`
}

type DataNsxState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}

type DataVcenterState struct {
	Fqdn       string `json:"fqdn"`
	InternalIp string `json:"internal_ip"`
	State      string `json:"state"`
	Version    string `json:"version"`
}
