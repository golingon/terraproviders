// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_vmwareengine_private_cloud

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_vmwareengine_private_cloud.
type Resource struct {
	Name      string
	Args      Args
	state     *googleVmwareenginePrivateCloudState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gvpc *Resource) Type() string {
	return "google_vmwareengine_private_cloud"
}

// LocalName returns the local name for [Resource].
func (gvpc *Resource) LocalName() string {
	return gvpc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gvpc *Resource) Configuration() interface{} {
	return gvpc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gvpc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gvpc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gvpc *Resource) Dependencies() terra.Dependencies {
	return gvpc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gvpc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gvpc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gvpc *Resource) Attributes() googleVmwareenginePrivateCloudAttributes {
	return googleVmwareenginePrivateCloudAttributes{ref: terra.ReferenceResource(gvpc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gvpc *Resource) ImportState(state io.Reader) error {
	gvpc.state = &googleVmwareenginePrivateCloudState{}
	if err := json.NewDecoder(state).Decode(gvpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvpc.Type(), gvpc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gvpc *Resource) State() (*googleVmwareenginePrivateCloudState, bool) {
	return gvpc.state, gvpc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gvpc *Resource) StateMust() *googleVmwareenginePrivateCloudState {
	if gvpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvpc.Type(), gvpc.LocalName()))
	}
	return gvpc.state
}

// Args contains the configurations for google_vmwareengine_private_cloud.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PreferredZone: string, optional
	PreferredZone terra.StringValue `hcl:"preferred_zone,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// SecondaryZone: string, optional
	SecondaryZone terra.StringValue `hcl:"secondary_zone,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// ManagementCluster: required
	ManagementCluster *ManagementCluster `hcl:"management_cluster,block" validate:"required"`
	// NetworkConfig: required
	NetworkConfig *NetworkConfig `hcl:"network_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleVmwareenginePrivateCloudAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("description"))
}

// Id returns a reference to field id of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("id"))
}

// Location returns a reference to field location of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("location"))
}

// Name returns a reference to field name of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("name"))
}

// PreferredZone returns a reference to field preferred_zone of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) PreferredZone() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("preferred_zone"))
}

// Project returns a reference to field project of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("project"))
}

// SecondaryZone returns a reference to field secondary_zone of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) SecondaryZone() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("secondary_zone"))
}

// State returns a reference to field state of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("state"))
}

// Type returns a reference to field type of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("type"))
}

// Uid returns a reference to field uid of google_vmwareengine_private_cloud.
func (gvpc googleVmwareenginePrivateCloudAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gvpc.ref.Append("uid"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) Hcx() terra.ListValue[HcxAttributes] {
	return terra.ReferenceAsList[HcxAttributes](gvpc.ref.Append("hcx"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) Nsx() terra.ListValue[NsxAttributes] {
	return terra.ReferenceAsList[NsxAttributes](gvpc.ref.Append("nsx"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) Vcenter() terra.ListValue[VcenterAttributes] {
	return terra.ReferenceAsList[VcenterAttributes](gvpc.ref.Append("vcenter"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) ManagementCluster() terra.ListValue[ManagementClusterAttributes] {
	return terra.ReferenceAsList[ManagementClusterAttributes](gvpc.ref.Append("management_cluster"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) NetworkConfig() terra.ListValue[NetworkConfigAttributes] {
	return terra.ReferenceAsList[NetworkConfigAttributes](gvpc.ref.Append("network_config"))
}

func (gvpc googleVmwareenginePrivateCloudAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gvpc.ref.Append("timeouts"))
}

type googleVmwareenginePrivateCloudState struct {
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Location          string                   `json:"location"`
	Name              string                   `json:"name"`
	PreferredZone     string                   `json:"preferred_zone"`
	Project           string                   `json:"project"`
	SecondaryZone     string                   `json:"secondary_zone"`
	State             string                   `json:"state"`
	Type              string                   `json:"type"`
	Uid               string                   `json:"uid"`
	Hcx               []HcxState               `json:"hcx"`
	Nsx               []NsxState               `json:"nsx"`
	Vcenter           []VcenterState           `json:"vcenter"`
	ManagementCluster []ManagementClusterState `json:"management_cluster"`
	NetworkConfig     []NetworkConfigState     `json:"network_config"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
