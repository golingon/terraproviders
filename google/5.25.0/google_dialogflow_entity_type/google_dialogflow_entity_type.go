// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_entity_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_entity_type.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowEntityTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdet *Resource) Type() string {
	return "google_dialogflow_entity_type"
}

// LocalName returns the local name for [Resource].
func (gdet *Resource) LocalName() string {
	return gdet.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdet *Resource) Configuration() interface{} {
	return gdet.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdet *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdet)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdet *Resource) Dependencies() terra.Dependencies {
	return gdet.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdet *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdet.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdet *Resource) Attributes() googleDialogflowEntityTypeAttributes {
	return googleDialogflowEntityTypeAttributes{ref: terra.ReferenceResource(gdet)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdet *Resource) ImportState(state io.Reader) error {
	gdet.state = &googleDialogflowEntityTypeState{}
	if err := json.NewDecoder(state).Decode(gdet.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdet.Type(), gdet.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdet *Resource) State() (*googleDialogflowEntityTypeState, bool) {
	return gdet.state, gdet.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdet *Resource) StateMust() *googleDialogflowEntityTypeState {
	if gdet.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdet.Type(), gdet.LocalName()))
	}
	return gdet.state
}

// Args contains the configurations for google_dialogflow_entity_type.
type Args struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// EnableFuzzyExtraction: bool, optional
	EnableFuzzyExtraction terra.BoolValue `hcl:"enable_fuzzy_extraction,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Kind: string, required
	Kind terra.StringValue `hcl:"kind,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Entities: min=0
	Entities []Entities `hcl:"entities,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDialogflowEntityTypeAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdet.ref.Append("display_name"))
}

// EnableFuzzyExtraction returns a reference to field enable_fuzzy_extraction of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) EnableFuzzyExtraction() terra.BoolValue {
	return terra.ReferenceAsBool(gdet.ref.Append("enable_fuzzy_extraction"))
}

// Id returns a reference to field id of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdet.ref.Append("id"))
}

// Kind returns a reference to field kind of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(gdet.ref.Append("kind"))
}

// Name returns a reference to field name of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdet.ref.Append("name"))
}

// Project returns a reference to field project of google_dialogflow_entity_type.
func (gdet googleDialogflowEntityTypeAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdet.ref.Append("project"))
}

func (gdet googleDialogflowEntityTypeAttributes) Entities() terra.ListValue[EntitiesAttributes] {
	return terra.ReferenceAsList[EntitiesAttributes](gdet.ref.Append("entities"))
}

func (gdet googleDialogflowEntityTypeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdet.ref.Append("timeouts"))
}

type googleDialogflowEntityTypeState struct {
	DisplayName           string          `json:"display_name"`
	EnableFuzzyExtraction bool            `json:"enable_fuzzy_extraction"`
	Id                    string          `json:"id"`
	Kind                  string          `json:"kind"`
	Name                  string          `json:"name"`
	Project               string          `json:"project"`
	Entities              []EntitiesState `json:"entities"`
	Timeouts              *TimeoutsState  `json:"timeouts"`
}
