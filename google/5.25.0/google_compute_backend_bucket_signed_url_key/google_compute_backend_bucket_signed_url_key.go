// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_backend_bucket_signed_url_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_backend_bucket_signed_url_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeBackendBucketSignedUrlKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcbbsuk *Resource) Type() string {
	return "google_compute_backend_bucket_signed_url_key"
}

// LocalName returns the local name for [Resource].
func (gcbbsuk *Resource) LocalName() string {
	return gcbbsuk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcbbsuk *Resource) Configuration() interface{} {
	return gcbbsuk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcbbsuk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcbbsuk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcbbsuk *Resource) Dependencies() terra.Dependencies {
	return gcbbsuk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcbbsuk *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcbbsuk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcbbsuk *Resource) Attributes() googleComputeBackendBucketSignedUrlKeyAttributes {
	return googleComputeBackendBucketSignedUrlKeyAttributes{ref: terra.ReferenceResource(gcbbsuk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcbbsuk *Resource) ImportState(state io.Reader) error {
	gcbbsuk.state = &googleComputeBackendBucketSignedUrlKeyState{}
	if err := json.NewDecoder(state).Decode(gcbbsuk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcbbsuk.Type(), gcbbsuk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcbbsuk *Resource) State() (*googleComputeBackendBucketSignedUrlKeyState, bool) {
	return gcbbsuk.state, gcbbsuk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcbbsuk *Resource) StateMust() *googleComputeBackendBucketSignedUrlKeyState {
	if gcbbsuk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcbbsuk.Type(), gcbbsuk.LocalName()))
	}
	return gcbbsuk.state
}

// Args contains the configurations for google_compute_backend_bucket_signed_url_key.
type Args struct {
	// BackendBucket: string, required
	BackendBucket terra.StringValue `hcl:"backend_bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyValue: string, required
	KeyValue terra.StringValue `hcl:"key_value,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeBackendBucketSignedUrlKeyAttributes struct {
	ref terra.Reference
}

// BackendBucket returns a reference to field backend_bucket of google_compute_backend_bucket_signed_url_key.
func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) BackendBucket() terra.StringValue {
	return terra.ReferenceAsString(gcbbsuk.ref.Append("backend_bucket"))
}

// Id returns a reference to field id of google_compute_backend_bucket_signed_url_key.
func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcbbsuk.ref.Append("id"))
}

// KeyValue returns a reference to field key_value of google_compute_backend_bucket_signed_url_key.
func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) KeyValue() terra.StringValue {
	return terra.ReferenceAsString(gcbbsuk.ref.Append("key_value"))
}

// Name returns a reference to field name of google_compute_backend_bucket_signed_url_key.
func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcbbsuk.ref.Append("name"))
}

// Project returns a reference to field project of google_compute_backend_bucket_signed_url_key.
func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcbbsuk.ref.Append("project"))
}

func (gcbbsuk googleComputeBackendBucketSignedUrlKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcbbsuk.ref.Append("timeouts"))
}

type googleComputeBackendBucketSignedUrlKeyState struct {
	BackendBucket string         `json:"backend_bucket"`
	Id            string         `json:"id"`
	KeyValue      string         `json:"key_value"`
	Name          string         `json:"name"`
	Project       string         `json:"project"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
