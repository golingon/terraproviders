// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_composer_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataConfigAttributes struct {
	ref terra.Reference
}

func (c DataConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigAttributes {
	return DataConfigAttributes{ref: ref}
}

func (c DataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataConfigAttributes) AirflowUri() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("airflow_uri"))
}

func (c DataConfigAttributes) DagGcsPrefix() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("dag_gcs_prefix"))
}

func (c DataConfigAttributes) EnvironmentSize() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("environment_size"))
}

func (c DataConfigAttributes) GkeCluster() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("gke_cluster"))
}

func (c DataConfigAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("node_count"))
}

func (c DataConfigAttributes) ResilienceMode() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("resilience_mode"))
}

func (c DataConfigAttributes) DataRetentionConfig() terra.ListValue[DataConfigDataRetentionConfigAttributes] {
	return terra.ReferenceAsList[DataConfigDataRetentionConfigAttributes](c.ref.Append("data_retention_config"))
}

func (c DataConfigAttributes) DatabaseConfig() terra.ListValue[DataConfigDatabaseConfigAttributes] {
	return terra.ReferenceAsList[DataConfigDatabaseConfigAttributes](c.ref.Append("database_config"))
}

func (c DataConfigAttributes) EncryptionConfig() terra.ListValue[DataConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[DataConfigEncryptionConfigAttributes](c.ref.Append("encryption_config"))
}

func (c DataConfigAttributes) MaintenanceWindow() terra.ListValue[DataConfigMaintenanceWindowAttributes] {
	return terra.ReferenceAsList[DataConfigMaintenanceWindowAttributes](c.ref.Append("maintenance_window"))
}

func (c DataConfigAttributes) MasterAuthorizedNetworksConfig() terra.ListValue[DataConfigMasterAuthorizedNetworksConfigAttributes] {
	return terra.ReferenceAsList[DataConfigMasterAuthorizedNetworksConfigAttributes](c.ref.Append("master_authorized_networks_config"))
}

func (c DataConfigAttributes) NodeConfig() terra.ListValue[DataConfigNodeConfigAttributes] {
	return terra.ReferenceAsList[DataConfigNodeConfigAttributes](c.ref.Append("node_config"))
}

func (c DataConfigAttributes) PrivateEnvironmentConfig() terra.ListValue[DataConfigPrivateEnvironmentConfigAttributes] {
	return terra.ReferenceAsList[DataConfigPrivateEnvironmentConfigAttributes](c.ref.Append("private_environment_config"))
}

func (c DataConfigAttributes) RecoveryConfig() terra.ListValue[DataConfigRecoveryConfigAttributes] {
	return terra.ReferenceAsList[DataConfigRecoveryConfigAttributes](c.ref.Append("recovery_config"))
}

func (c DataConfigAttributes) SoftwareConfig() terra.ListValue[DataConfigSoftwareConfigAttributes] {
	return terra.ReferenceAsList[DataConfigSoftwareConfigAttributes](c.ref.Append("software_config"))
}

func (c DataConfigAttributes) WebServerConfig() terra.ListValue[DataConfigWebServerConfigAttributes] {
	return terra.ReferenceAsList[DataConfigWebServerConfigAttributes](c.ref.Append("web_server_config"))
}

func (c DataConfigAttributes) WebServerNetworkAccessControl() terra.ListValue[DataConfigWebServerNetworkAccessControlAttributes] {
	return terra.ReferenceAsList[DataConfigWebServerNetworkAccessControlAttributes](c.ref.Append("web_server_network_access_control"))
}

func (c DataConfigAttributes) WorkloadsConfig() terra.ListValue[DataConfigWorkloadsConfigAttributes] {
	return terra.ReferenceAsList[DataConfigWorkloadsConfigAttributes](c.ref.Append("workloads_config"))
}

type DataConfigDataRetentionConfigAttributes struct {
	ref terra.Reference
}

func (drc DataConfigDataRetentionConfigAttributes) InternalRef() (terra.Reference, error) {
	return drc.ref, nil
}

func (drc DataConfigDataRetentionConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigDataRetentionConfigAttributes {
	return DataConfigDataRetentionConfigAttributes{ref: ref}
}

func (drc DataConfigDataRetentionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drc.ref.InternalTokens()
}

func (drc DataConfigDataRetentionConfigAttributes) TaskLogsRetentionConfig() terra.ListValue[DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes] {
	return terra.ReferenceAsList[DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes](drc.ref.Append("task_logs_retention_config"))
}

type DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes struct {
	ref terra.Reference
}

func (tlrc DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalRef() (terra.Reference, error) {
	return tlrc.ref, nil
}

func (tlrc DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes {
	return DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes{ref: ref}
}

func (tlrc DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlrc.ref.InternalTokens()
}

func (tlrc DataConfigDataRetentionConfigTaskLogsRetentionConfigAttributes) StorageMode() terra.StringValue {
	return terra.ReferenceAsString(tlrc.ref.Append("storage_mode"))
}

type DataConfigDatabaseConfigAttributes struct {
	ref terra.Reference
}

func (dc DataConfigDatabaseConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc DataConfigDatabaseConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigDatabaseConfigAttributes {
	return DataConfigDatabaseConfigAttributes{ref: ref}
}

func (dc DataConfigDatabaseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc DataConfigDatabaseConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("machine_type"))
}

func (dc DataConfigDatabaseConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("zone"))
}

type DataConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec DataConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec DataConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigEncryptionConfigAttributes {
	return DataConfigEncryptionConfigAttributes{ref: ref}
}

func (ec DataConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec DataConfigEncryptionConfigAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

type DataConfigMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (mw DataConfigMaintenanceWindowAttributes) InternalRef() (terra.Reference, error) {
	return mw.ref, nil
}

func (mw DataConfigMaintenanceWindowAttributes) InternalWithRef(ref terra.Reference) DataConfigMaintenanceWindowAttributes {
	return DataConfigMaintenanceWindowAttributes{ref: ref}
}

func (mw DataConfigMaintenanceWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mw.ref.InternalTokens()
}

func (mw DataConfigMaintenanceWindowAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("end_time"))
}

func (mw DataConfigMaintenanceWindowAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("recurrence"))
}

func (mw DataConfigMaintenanceWindowAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(mw.ref.Append("start_time"))
}

type DataConfigMasterAuthorizedNetworksConfigAttributes struct {
	ref terra.Reference
}

func (manc DataConfigMasterAuthorizedNetworksConfigAttributes) InternalRef() (terra.Reference, error) {
	return manc.ref, nil
}

func (manc DataConfigMasterAuthorizedNetworksConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigMasterAuthorizedNetworksConfigAttributes {
	return DataConfigMasterAuthorizedNetworksConfigAttributes{ref: ref}
}

func (manc DataConfigMasterAuthorizedNetworksConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return manc.ref.InternalTokens()
}

func (manc DataConfigMasterAuthorizedNetworksConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(manc.ref.Append("enabled"))
}

func (manc DataConfigMasterAuthorizedNetworksConfigAttributes) CidrBlocks() terra.SetValue[DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes] {
	return terra.ReferenceAsSet[DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes](manc.ref.Append("cidr_blocks"))
}

type DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes struct {
	ref terra.Reference
}

func (cb DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalWithRef(ref terra.Reference) DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes {
	return DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes{ref: ref}
}

func (cb DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("cidr_block"))
}

func (cb DataConfigMasterAuthorizedNetworksConfigCidrBlocksAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("display_name"))
}

type DataConfigNodeConfigAttributes struct {
	ref terra.Reference
}

func (nc DataConfigNodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc DataConfigNodeConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigNodeConfigAttributes {
	return DataConfigNodeConfigAttributes{ref: ref}
}

func (nc DataConfigNodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc DataConfigNodeConfigAttributes) DiskSizeGb() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("disk_size_gb"))
}

func (nc DataConfigNodeConfigAttributes) EnableIpMasqAgent() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_ip_masq_agent"))
}

func (nc DataConfigNodeConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("machine_type"))
}

func (nc DataConfigNodeConfigAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("network"))
}

func (nc DataConfigNodeConfigAttributes) OauthScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("oauth_scopes"))
}

func (nc DataConfigNodeConfigAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("service_account"))
}

func (nc DataConfigNodeConfigAttributes) Subnetwork() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("subnetwork"))
}

func (nc DataConfigNodeConfigAttributes) Tags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("tags"))
}

func (nc DataConfigNodeConfigAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("zone"))
}

func (nc DataConfigNodeConfigAttributes) IpAllocationPolicy() terra.ListValue[DataConfigNodeConfigIpAllocationPolicyAttributes] {
	return terra.ReferenceAsList[DataConfigNodeConfigIpAllocationPolicyAttributes](nc.ref.Append("ip_allocation_policy"))
}

type DataConfigNodeConfigIpAllocationPolicyAttributes struct {
	ref terra.Reference
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return iap.ref, nil
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) InternalWithRef(ref terra.Reference) DataConfigNodeConfigIpAllocationPolicyAttributes {
	return DataConfigNodeConfigIpAllocationPolicyAttributes{ref: ref}
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iap.ref.InternalTokens()
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) ClusterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_ipv4_cidr_block"))
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) ClusterSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("cluster_secondary_range_name"))
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) ServicesIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_ipv4_cidr_block"))
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) ServicesSecondaryRangeName() terra.StringValue {
	return terra.ReferenceAsString(iap.ref.Append("services_secondary_range_name"))
}

func (iap DataConfigNodeConfigIpAllocationPolicyAttributes) UseIpAliases() terra.BoolValue {
	return terra.ReferenceAsBool(iap.ref.Append("use_ip_aliases"))
}

type DataConfigPrivateEnvironmentConfigAttributes struct {
	ref terra.Reference
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) InternalRef() (terra.Reference, error) {
	return pec.ref, nil
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigPrivateEnvironmentConfigAttributes {
	return DataConfigPrivateEnvironmentConfigAttributes{ref: ref}
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pec.ref.InternalTokens()
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) CloudComposerConnectionSubnetwork() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_composer_connection_subnetwork"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) CloudComposerNetworkIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_composer_network_ipv4_cidr_block"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) CloudSqlIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("cloud_sql_ipv4_cidr_block"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("connection_type"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) EnablePrivateEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(pec.ref.Append("enable_private_endpoint"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) EnablePrivatelyUsedPublicIps() terra.BoolValue {
	return terra.ReferenceAsBool(pec.ref.Append("enable_privately_used_public_ips"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) MasterIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("master_ipv4_cidr_block"))
}

func (pec DataConfigPrivateEnvironmentConfigAttributes) WebServerIpv4CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(pec.ref.Append("web_server_ipv4_cidr_block"))
}

type DataConfigRecoveryConfigAttributes struct {
	ref terra.Reference
}

func (rc DataConfigRecoveryConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc DataConfigRecoveryConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigRecoveryConfigAttributes {
	return DataConfigRecoveryConfigAttributes{ref: ref}
}

func (rc DataConfigRecoveryConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc DataConfigRecoveryConfigAttributes) ScheduledSnapshotsConfig() terra.ListValue[DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes] {
	return terra.ReferenceAsList[DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes](rc.ref.Append("scheduled_snapshots_config"))
}

type DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes struct {
	ref terra.Reference
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes {
	return DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes{ref: ref}
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssc.ref.Append("enabled"))
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) SnapshotCreationSchedule() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("snapshot_creation_schedule"))
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) SnapshotLocation() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("snapshot_location"))
}

func (ssc DataConfigRecoveryConfigScheduledSnapshotsConfigAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("time_zone"))
}

type DataConfigSoftwareConfigAttributes struct {
	ref terra.Reference
}

func (sc DataConfigSoftwareConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataConfigSoftwareConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigSoftwareConfigAttributes {
	return DataConfigSoftwareConfigAttributes{ref: ref}
}

func (sc DataConfigSoftwareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataConfigSoftwareConfigAttributes) AirflowConfigOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("airflow_config_overrides"))
}

func (sc DataConfigSoftwareConfigAttributes) EnvVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("env_variables"))
}

func (sc DataConfigSoftwareConfigAttributes) ImageVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("image_version"))
}

func (sc DataConfigSoftwareConfigAttributes) PypiPackages() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sc.ref.Append("pypi_packages"))
}

func (sc DataConfigSoftwareConfigAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("python_version"))
}

func (sc DataConfigSoftwareConfigAttributes) SchedulerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("scheduler_count"))
}

type DataConfigWebServerConfigAttributes struct {
	ref terra.Reference
}

func (wsc DataConfigWebServerConfigAttributes) InternalRef() (terra.Reference, error) {
	return wsc.ref, nil
}

func (wsc DataConfigWebServerConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigWebServerConfigAttributes {
	return DataConfigWebServerConfigAttributes{ref: ref}
}

func (wsc DataConfigWebServerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wsc.ref.InternalTokens()
}

func (wsc DataConfigWebServerConfigAttributes) MachineType() terra.StringValue {
	return terra.ReferenceAsString(wsc.ref.Append("machine_type"))
}

type DataConfigWebServerNetworkAccessControlAttributes struct {
	ref terra.Reference
}

func (wsnac DataConfigWebServerNetworkAccessControlAttributes) InternalRef() (terra.Reference, error) {
	return wsnac.ref, nil
}

func (wsnac DataConfigWebServerNetworkAccessControlAttributes) InternalWithRef(ref terra.Reference) DataConfigWebServerNetworkAccessControlAttributes {
	return DataConfigWebServerNetworkAccessControlAttributes{ref: ref}
}

func (wsnac DataConfigWebServerNetworkAccessControlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wsnac.ref.InternalTokens()
}

func (wsnac DataConfigWebServerNetworkAccessControlAttributes) AllowedIpRange() terra.SetValue[DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes] {
	return terra.ReferenceAsSet[DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes](wsnac.ref.Append("allowed_ip_range"))
}

type DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes struct {
	ref terra.Reference
}

func (air DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalRef() (terra.Reference, error) {
	return air.ref, nil
}

func (air DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalWithRef(ref terra.Reference) DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes {
	return DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes{ref: ref}
}

func (air DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return air.ref.InternalTokens()
}

func (air DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("description"))
}

func (air DataConfigWebServerNetworkAccessControlAllowedIpRangeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("value"))
}

type DataConfigWorkloadsConfigAttributes struct {
	ref terra.Reference
}

func (wc DataConfigWorkloadsConfigAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc DataConfigWorkloadsConfigAttributes) InternalWithRef(ref terra.Reference) DataConfigWorkloadsConfigAttributes {
	return DataConfigWorkloadsConfigAttributes{ref: ref}
}

func (wc DataConfigWorkloadsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc DataConfigWorkloadsConfigAttributes) Scheduler() terra.ListValue[DataConfigWorkloadsConfigSchedulerAttributes] {
	return terra.ReferenceAsList[DataConfigWorkloadsConfigSchedulerAttributes](wc.ref.Append("scheduler"))
}

func (wc DataConfigWorkloadsConfigAttributes) Triggerer() terra.ListValue[DataConfigWorkloadsConfigTriggererAttributes] {
	return terra.ReferenceAsList[DataConfigWorkloadsConfigTriggererAttributes](wc.ref.Append("triggerer"))
}

func (wc DataConfigWorkloadsConfigAttributes) WebServer() terra.ListValue[DataConfigWorkloadsConfigWebServerAttributes] {
	return terra.ReferenceAsList[DataConfigWorkloadsConfigWebServerAttributes](wc.ref.Append("web_server"))
}

func (wc DataConfigWorkloadsConfigAttributes) Worker() terra.ListValue[DataConfigWorkloadsConfigWorkerAttributes] {
	return terra.ReferenceAsList[DataConfigWorkloadsConfigWorkerAttributes](wc.ref.Append("worker"))
}

type DataConfigWorkloadsConfigSchedulerAttributes struct {
	ref terra.Reference
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) InternalWithRef(ref terra.Reference) DataConfigWorkloadsConfigSchedulerAttributes {
	return DataConfigWorkloadsConfigSchedulerAttributes{ref: ref}
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("count"))
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("cpu"))
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("memory_gb"))
}

func (s DataConfigWorkloadsConfigSchedulerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("storage_gb"))
}

type DataConfigWorkloadsConfigTriggererAttributes struct {
	ref terra.Reference
}

func (t DataConfigWorkloadsConfigTriggererAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataConfigWorkloadsConfigTriggererAttributes) InternalWithRef(ref terra.Reference) DataConfigWorkloadsConfigTriggererAttributes {
	return DataConfigWorkloadsConfigTriggererAttributes{ref: ref}
}

func (t DataConfigWorkloadsConfigTriggererAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataConfigWorkloadsConfigTriggererAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("count"))
}

func (t DataConfigWorkloadsConfigTriggererAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("cpu"))
}

func (t DataConfigWorkloadsConfigTriggererAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("memory_gb"))
}

type DataConfigWorkloadsConfigWebServerAttributes struct {
	ref terra.Reference
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) InternalWithRef(ref terra.Reference) DataConfigWorkloadsConfigWebServerAttributes {
	return DataConfigWorkloadsConfigWebServerAttributes{ref: ref}
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("cpu"))
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("memory_gb"))
}

func (ws DataConfigWorkloadsConfigWebServerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("storage_gb"))
}

type DataConfigWorkloadsConfigWorkerAttributes struct {
	ref terra.Reference
}

func (w DataConfigWorkloadsConfigWorkerAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w DataConfigWorkloadsConfigWorkerAttributes) InternalWithRef(ref terra.Reference) DataConfigWorkloadsConfigWorkerAttributes {
	return DataConfigWorkloadsConfigWorkerAttributes{ref: ref}
}

func (w DataConfigWorkloadsConfigWorkerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w DataConfigWorkloadsConfigWorkerAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("cpu"))
}

func (w DataConfigWorkloadsConfigWorkerAttributes) MaxCount() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("max_count"))
}

func (w DataConfigWorkloadsConfigWorkerAttributes) MemoryGb() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("memory_gb"))
}

func (w DataConfigWorkloadsConfigWorkerAttributes) MinCount() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("min_count"))
}

func (w DataConfigWorkloadsConfigWorkerAttributes) StorageGb() terra.NumberValue {
	return terra.ReferenceAsNumber(w.ref.Append("storage_gb"))
}

type DataStorageConfigAttributes struct {
	ref terra.Reference
}

func (sc DataStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataStorageConfigAttributes) InternalWithRef(ref terra.Reference) DataStorageConfigAttributes {
	return DataStorageConfigAttributes{ref: ref}
}

func (sc DataStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataStorageConfigAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket"))
}

type DataConfigState struct {
	AirflowUri                     string                                          `json:"airflow_uri"`
	DagGcsPrefix                   string                                          `json:"dag_gcs_prefix"`
	EnvironmentSize                string                                          `json:"environment_size"`
	GkeCluster                     string                                          `json:"gke_cluster"`
	NodeCount                      float64                                         `json:"node_count"`
	ResilienceMode                 string                                          `json:"resilience_mode"`
	DataRetentionConfig            []DataConfigDataRetentionConfigState            `json:"data_retention_config"`
	DatabaseConfig                 []DataConfigDatabaseConfigState                 `json:"database_config"`
	EncryptionConfig               []DataConfigEncryptionConfigState               `json:"encryption_config"`
	MaintenanceWindow              []DataConfigMaintenanceWindowState              `json:"maintenance_window"`
	MasterAuthorizedNetworksConfig []DataConfigMasterAuthorizedNetworksConfigState `json:"master_authorized_networks_config"`
	NodeConfig                     []DataConfigNodeConfigState                     `json:"node_config"`
	PrivateEnvironmentConfig       []DataConfigPrivateEnvironmentConfigState       `json:"private_environment_config"`
	RecoveryConfig                 []DataConfigRecoveryConfigState                 `json:"recovery_config"`
	SoftwareConfig                 []DataConfigSoftwareConfigState                 `json:"software_config"`
	WebServerConfig                []DataConfigWebServerConfigState                `json:"web_server_config"`
	WebServerNetworkAccessControl  []DataConfigWebServerNetworkAccessControlState  `json:"web_server_network_access_control"`
	WorkloadsConfig                []DataConfigWorkloadsConfigState                `json:"workloads_config"`
}

type DataConfigDataRetentionConfigState struct {
	TaskLogsRetentionConfig []DataConfigDataRetentionConfigTaskLogsRetentionConfigState `json:"task_logs_retention_config"`
}

type DataConfigDataRetentionConfigTaskLogsRetentionConfigState struct {
	StorageMode string `json:"storage_mode"`
}

type DataConfigDatabaseConfigState struct {
	MachineType string `json:"machine_type"`
	Zone        string `json:"zone"`
}

type DataConfigEncryptionConfigState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type DataConfigMaintenanceWindowState struct {
	EndTime    string `json:"end_time"`
	Recurrence string `json:"recurrence"`
	StartTime  string `json:"start_time"`
}

type DataConfigMasterAuthorizedNetworksConfigState struct {
	Enabled    bool                                                      `json:"enabled"`
	CidrBlocks []DataConfigMasterAuthorizedNetworksConfigCidrBlocksState `json:"cidr_blocks"`
}

type DataConfigMasterAuthorizedNetworksConfigCidrBlocksState struct {
	CidrBlock   string `json:"cidr_block"`
	DisplayName string `json:"display_name"`
}

type DataConfigNodeConfigState struct {
	DiskSizeGb         float64                                       `json:"disk_size_gb"`
	EnableIpMasqAgent  bool                                          `json:"enable_ip_masq_agent"`
	MachineType        string                                        `json:"machine_type"`
	Network            string                                        `json:"network"`
	OauthScopes        []string                                      `json:"oauth_scopes"`
	ServiceAccount     string                                        `json:"service_account"`
	Subnetwork         string                                        `json:"subnetwork"`
	Tags               []string                                      `json:"tags"`
	Zone               string                                        `json:"zone"`
	IpAllocationPolicy []DataConfigNodeConfigIpAllocationPolicyState `json:"ip_allocation_policy"`
}

type DataConfigNodeConfigIpAllocationPolicyState struct {
	ClusterIpv4CidrBlock       string `json:"cluster_ipv4_cidr_block"`
	ClusterSecondaryRangeName  string `json:"cluster_secondary_range_name"`
	ServicesIpv4CidrBlock      string `json:"services_ipv4_cidr_block"`
	ServicesSecondaryRangeName string `json:"services_secondary_range_name"`
	UseIpAliases               bool   `json:"use_ip_aliases"`
}

type DataConfigPrivateEnvironmentConfigState struct {
	CloudComposerConnectionSubnetwork string `json:"cloud_composer_connection_subnetwork"`
	CloudComposerNetworkIpv4CidrBlock string `json:"cloud_composer_network_ipv4_cidr_block"`
	CloudSqlIpv4CidrBlock             string `json:"cloud_sql_ipv4_cidr_block"`
	ConnectionType                    string `json:"connection_type"`
	EnablePrivateEndpoint             bool   `json:"enable_private_endpoint"`
	EnablePrivatelyUsedPublicIps      bool   `json:"enable_privately_used_public_ips"`
	MasterIpv4CidrBlock               string `json:"master_ipv4_cidr_block"`
	WebServerIpv4CidrBlock            string `json:"web_server_ipv4_cidr_block"`
}

type DataConfigRecoveryConfigState struct {
	ScheduledSnapshotsConfig []DataConfigRecoveryConfigScheduledSnapshotsConfigState `json:"scheduled_snapshots_config"`
}

type DataConfigRecoveryConfigScheduledSnapshotsConfigState struct {
	Enabled                  bool   `json:"enabled"`
	SnapshotCreationSchedule string `json:"snapshot_creation_schedule"`
	SnapshotLocation         string `json:"snapshot_location"`
	TimeZone                 string `json:"time_zone"`
}

type DataConfigSoftwareConfigState struct {
	AirflowConfigOverrides map[string]string `json:"airflow_config_overrides"`
	EnvVariables           map[string]string `json:"env_variables"`
	ImageVersion           string            `json:"image_version"`
	PypiPackages           map[string]string `json:"pypi_packages"`
	PythonVersion          string            `json:"python_version"`
	SchedulerCount         float64           `json:"scheduler_count"`
}

type DataConfigWebServerConfigState struct {
	MachineType string `json:"machine_type"`
}

type DataConfigWebServerNetworkAccessControlState struct {
	AllowedIpRange []DataConfigWebServerNetworkAccessControlAllowedIpRangeState `json:"allowed_ip_range"`
}

type DataConfigWebServerNetworkAccessControlAllowedIpRangeState struct {
	Description string `json:"description"`
	Value       string `json:"value"`
}

type DataConfigWorkloadsConfigState struct {
	Scheduler []DataConfigWorkloadsConfigSchedulerState `json:"scheduler"`
	Triggerer []DataConfigWorkloadsConfigTriggererState `json:"triggerer"`
	WebServer []DataConfigWorkloadsConfigWebServerState `json:"web_server"`
	Worker    []DataConfigWorkloadsConfigWorkerState    `json:"worker"`
}

type DataConfigWorkloadsConfigSchedulerState struct {
	Count     float64 `json:"count"`
	Cpu       float64 `json:"cpu"`
	MemoryGb  float64 `json:"memory_gb"`
	StorageGb float64 `json:"storage_gb"`
}

type DataConfigWorkloadsConfigTriggererState struct {
	Count    float64 `json:"count"`
	Cpu      float64 `json:"cpu"`
	MemoryGb float64 `json:"memory_gb"`
}

type DataConfigWorkloadsConfigWebServerState struct {
	Cpu       float64 `json:"cpu"`
	MemoryGb  float64 `json:"memory_gb"`
	StorageGb float64 `json:"storage_gb"`
}

type DataConfigWorkloadsConfigWorkerState struct {
	Cpu       float64 `json:"cpu"`
	MaxCount  float64 `json:"max_count"`
	MemoryGb  float64 `json:"memory_gb"`
	MinCount  float64 `json:"min_count"`
	StorageGb float64 `json:"storage_gb"`
}

type DataStorageConfigState struct {
	Bucket string `json:"bucket"`
}
