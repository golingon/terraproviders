// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_composer_environment

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource google_composer_environment.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (gce *DataSource) DataSource() string {
	return "google_composer_environment"
}

// LocalName returns the local name for [DataSource].
func (gce *DataSource) LocalName() string {
	return gce.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (gce *DataSource) Configuration() interface{} {
	return gce.Args
}

// Attributes returns the attributes for [DataSource].
func (gce *DataSource) Attributes() dataGoogleComposerEnvironmentAttributes {
	return dataGoogleComposerEnvironmentAttributes{ref: terra.ReferenceDataSource(gce)}
}

// DataArgs contains the configurations for google_composer_environment.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type dataGoogleComposerEnvironmentAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("id"))
}

// Labels returns a reference to field labels of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("labels"))
}

// Name returns a reference to field name of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("name"))
}

// Project returns a reference to field project of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("project"))
}

// Region returns a reference to field region of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_composer_environment.
func (gce dataGoogleComposerEnvironmentAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("terraform_labels"))
}

func (gce dataGoogleComposerEnvironmentAttributes) Config() terra.ListValue[DataConfigAttributes] {
	return terra.ReferenceAsList[DataConfigAttributes](gce.ref.Append("config"))
}

func (gce dataGoogleComposerEnvironmentAttributes) StorageConfig() terra.ListValue[DataStorageConfigAttributes] {
	return terra.ReferenceAsList[DataStorageConfigAttributes](gce.ref.Append("storage_config"))
}
