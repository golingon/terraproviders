// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_composer_environment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_composer_environment.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComposerEnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gce *Resource) Type() string {
	return "google_composer_environment"
}

// LocalName returns the local name for [Resource].
func (gce *Resource) LocalName() string {
	return gce.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gce *Resource) Configuration() interface{} {
	return gce.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gce *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gce)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gce *Resource) Dependencies() terra.Dependencies {
	return gce.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gce *Resource) LifecycleManagement() *terra.Lifecycle {
	return gce.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gce *Resource) Attributes() googleComposerEnvironmentAttributes {
	return googleComposerEnvironmentAttributes{ref: terra.ReferenceResource(gce)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gce *Resource) ImportState(state io.Reader) error {
	gce.state = &googleComposerEnvironmentState{}
	if err := json.NewDecoder(state).Decode(gce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gce.Type(), gce.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gce *Resource) State() (*googleComposerEnvironmentState, bool) {
	return gce.state, gce.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gce *Resource) StateMust() *googleComposerEnvironmentState {
	if gce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gce.Type(), gce.LocalName()))
	}
	return gce.state
}

// Args contains the configurations for google_composer_environment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Config: optional
	Config *Config `hcl:"config,block"`
	// StorageConfig: optional
	StorageConfig *StorageConfig `hcl:"storage_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComposerEnvironmentAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("id"))
}

// Labels returns a reference to field labels of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("labels"))
}

// Name returns a reference to field name of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("name"))
}

// Project returns a reference to field project of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("project"))
}

// Region returns a reference to field region of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gce.ref.Append("region"))
}

// TerraformLabels returns a reference to field terraform_labels of google_composer_environment.
func (gce googleComposerEnvironmentAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gce.ref.Append("terraform_labels"))
}

func (gce googleComposerEnvironmentAttributes) Config() terra.ListValue[ConfigAttributes] {
	return terra.ReferenceAsList[ConfigAttributes](gce.ref.Append("config"))
}

func (gce googleComposerEnvironmentAttributes) StorageConfig() terra.ListValue[StorageConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigAttributes](gce.ref.Append("storage_config"))
}

func (gce googleComposerEnvironmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gce.ref.Append("timeouts"))
}

type googleComposerEnvironmentState struct {
	EffectiveLabels map[string]string    `json:"effective_labels"`
	Id              string               `json:"id"`
	Labels          map[string]string    `json:"labels"`
	Name            string               `json:"name"`
	Project         string               `json:"project"`
	Region          string               `json:"region"`
	TerraformLabels map[string]string    `json:"terraform_labels"`
	Config          []ConfigState        `json:"config"`
	StorageConfig   []StorageConfigState `json:"storage_config"`
	Timeouts        *TimeoutsState       `json:"timeouts"`
}
