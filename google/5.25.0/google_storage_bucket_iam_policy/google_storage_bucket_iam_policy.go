// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_bucket_iam_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_bucket_iam_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageBucketIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsbip *Resource) Type() string {
	return "google_storage_bucket_iam_policy"
}

// LocalName returns the local name for [Resource].
func (gsbip *Resource) LocalName() string {
	return gsbip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsbip *Resource) Configuration() interface{} {
	return gsbip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsbip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsbip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsbip *Resource) Dependencies() terra.Dependencies {
	return gsbip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsbip *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsbip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsbip *Resource) Attributes() googleStorageBucketIamPolicyAttributes {
	return googleStorageBucketIamPolicyAttributes{ref: terra.ReferenceResource(gsbip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsbip *Resource) ImportState(state io.Reader) error {
	gsbip.state = &googleStorageBucketIamPolicyState{}
	if err := json.NewDecoder(state).Decode(gsbip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsbip.Type(), gsbip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsbip *Resource) State() (*googleStorageBucketIamPolicyState, bool) {
	return gsbip.state, gsbip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsbip *Resource) StateMust() *googleStorageBucketIamPolicyState {
	if gsbip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsbip.Type(), gsbip.LocalName()))
	}
	return gsbip.state
}

// Args contains the configurations for google_storage_bucket_iam_policy.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
}

type googleStorageBucketIamPolicyAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_storage_bucket_iam_policy.
func (gsbip googleStorageBucketIamPolicyAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gsbip.ref.Append("bucket"))
}

// Etag returns a reference to field etag of google_storage_bucket_iam_policy.
func (gsbip googleStorageBucketIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gsbip.ref.Append("etag"))
}

// Id returns a reference to field id of google_storage_bucket_iam_policy.
func (gsbip googleStorageBucketIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsbip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_storage_bucket_iam_policy.
func (gsbip googleStorageBucketIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(gsbip.ref.Append("policy_data"))
}

type googleStorageBucketIamPolicyState struct {
	Bucket     string `json:"bucket"`
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
}
