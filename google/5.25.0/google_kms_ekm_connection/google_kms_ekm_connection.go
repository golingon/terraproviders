// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_kms_ekm_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_kms_ekm_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *googleKmsEkmConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gkec *Resource) Type() string {
	return "google_kms_ekm_connection"
}

// LocalName returns the local name for [Resource].
func (gkec *Resource) LocalName() string {
	return gkec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gkec *Resource) Configuration() interface{} {
	return gkec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gkec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gkec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gkec *Resource) Dependencies() terra.Dependencies {
	return gkec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gkec *Resource) LifecycleManagement() *terra.Lifecycle {
	return gkec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gkec *Resource) Attributes() googleKmsEkmConnectionAttributes {
	return googleKmsEkmConnectionAttributes{ref: terra.ReferenceResource(gkec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gkec *Resource) ImportState(state io.Reader) error {
	gkec.state = &googleKmsEkmConnectionState{}
	if err := json.NewDecoder(state).Decode(gkec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gkec.Type(), gkec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gkec *Resource) State() (*googleKmsEkmConnectionState, bool) {
	return gkec.state, gkec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gkec *Resource) StateMust() *googleKmsEkmConnectionState {
	if gkec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gkec.Type(), gkec.LocalName()))
	}
	return gkec.state
}

// Args contains the configurations for google_kms_ekm_connection.
type Args struct {
	// CryptoSpacePath: string, optional
	CryptoSpacePath terra.StringValue `hcl:"crypto_space_path,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyManagementMode: string, optional
	KeyManagementMode terra.StringValue `hcl:"key_management_mode,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceResolvers: min=1
	ServiceResolvers []ServiceResolvers `hcl:"service_resolvers,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleKmsEkmConnectionAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("create_time"))
}

// CryptoSpacePath returns a reference to field crypto_space_path of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) CryptoSpacePath() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("crypto_space_path"))
}

// Etag returns a reference to field etag of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("etag"))
}

// Id returns a reference to field id of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("id"))
}

// KeyManagementMode returns a reference to field key_management_mode of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) KeyManagementMode() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("key_management_mode"))
}

// Location returns a reference to field location of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("location"))
}

// Name returns a reference to field name of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("name"))
}

// Project returns a reference to field project of google_kms_ekm_connection.
func (gkec googleKmsEkmConnectionAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gkec.ref.Append("project"))
}

func (gkec googleKmsEkmConnectionAttributes) ServiceResolvers() terra.ListValue[ServiceResolversAttributes] {
	return terra.ReferenceAsList[ServiceResolversAttributes](gkec.ref.Append("service_resolvers"))
}

func (gkec googleKmsEkmConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gkec.ref.Append("timeouts"))
}

type googleKmsEkmConnectionState struct {
	CreateTime        string                  `json:"create_time"`
	CryptoSpacePath   string                  `json:"crypto_space_path"`
	Etag              string                  `json:"etag"`
	Id                string                  `json:"id"`
	KeyManagementMode string                  `json:"key_management_mode"`
	Location          string                  `json:"location"`
	Name              string                  `json:"name"`
	Project           string                  `json:"project"`
	ServiceResolvers  []ServiceResolversState `json:"service_resolvers"`
	Timeouts          *TimeoutsState          `json:"timeouts"`
}
