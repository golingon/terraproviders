// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ExternalDataConfiguration struct {
	// Autodetect: bool, required
	Autodetect terra.BoolValue `hcl:"autodetect,attr" validate:"required"`
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// FileSetSpecType: string, optional
	FileSetSpecType terra.StringValue `hcl:"file_set_spec_type,attr"`
	// IgnoreUnknownValues: bool, optional
	IgnoreUnknownValues terra.BoolValue `hcl:"ignore_unknown_values,attr"`
	// JsonExtension: string, optional
	JsonExtension terra.StringValue `hcl:"json_extension,attr"`
	// MaxBadRecords: number, optional
	MaxBadRecords terra.NumberValue `hcl:"max_bad_records,attr"`
	// MetadataCacheMode: string, optional
	MetadataCacheMode terra.StringValue `hcl:"metadata_cache_mode,attr"`
	// ObjectMetadata: string, optional
	ObjectMetadata terra.StringValue `hcl:"object_metadata,attr"`
	// ReferenceFileSchemaUri: string, optional
	ReferenceFileSchemaUri terra.StringValue `hcl:"reference_file_schema_uri,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// SourceUris: list of string, required
	SourceUris terra.ListValue[terra.StringValue] `hcl:"source_uris,attr" validate:"required"`
	// ExternalDataConfigurationAvroOptions: optional
	AvroOptions *ExternalDataConfigurationAvroOptions `hcl:"avro_options,block"`
	// ExternalDataConfigurationCsvOptions: optional
	CsvOptions *ExternalDataConfigurationCsvOptions `hcl:"csv_options,block"`
	// ExternalDataConfigurationGoogleSheetsOptions: optional
	GoogleSheetsOptions *ExternalDataConfigurationGoogleSheetsOptions `hcl:"google_sheets_options,block"`
	// ExternalDataConfigurationHivePartitioningOptions: optional
	HivePartitioningOptions *ExternalDataConfigurationHivePartitioningOptions `hcl:"hive_partitioning_options,block"`
	// ExternalDataConfigurationJsonOptions: optional
	JsonOptions *ExternalDataConfigurationJsonOptions `hcl:"json_options,block"`
	// ExternalDataConfigurationParquetOptions: optional
	ParquetOptions *ExternalDataConfigurationParquetOptions `hcl:"parquet_options,block"`
}

type ExternalDataConfigurationAvroOptions struct {
	// UseAvroLogicalTypes: bool, required
	UseAvroLogicalTypes terra.BoolValue `hcl:"use_avro_logical_types,attr" validate:"required"`
}

type ExternalDataConfigurationCsvOptions struct {
	// AllowJaggedRows: bool, optional
	AllowJaggedRows terra.BoolValue `hcl:"allow_jagged_rows,attr"`
	// AllowQuotedNewlines: bool, optional
	AllowQuotedNewlines terra.BoolValue `hcl:"allow_quoted_newlines,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// FieldDelimiter: string, optional
	FieldDelimiter terra.StringValue `hcl:"field_delimiter,attr"`
	// Quote: string, required
	Quote terra.StringValue `hcl:"quote,attr" validate:"required"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type ExternalDataConfigurationGoogleSheetsOptions struct {
	// Range: string, optional
	Range terra.StringValue `hcl:"range,attr"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
}

type ExternalDataConfigurationHivePartitioningOptions struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// SourceUriPrefix: string, optional
	SourceUriPrefix terra.StringValue `hcl:"source_uri_prefix,attr"`
}

type ExternalDataConfigurationJsonOptions struct {
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
}

type ExternalDataConfigurationParquetOptions struct {
	// EnableListInference: bool, optional
	EnableListInference terra.BoolValue `hcl:"enable_list_inference,attr"`
	// EnumAsString: bool, optional
	EnumAsString terra.BoolValue `hcl:"enum_as_string,attr"`
}

type MaterializedView struct {
	// AllowNonIncrementalDefinition: bool, optional
	AllowNonIncrementalDefinition terra.BoolValue `hcl:"allow_non_incremental_definition,attr"`
	// EnableRefresh: bool, optional
	EnableRefresh terra.BoolValue `hcl:"enable_refresh,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// RefreshIntervalMs: number, optional
	RefreshIntervalMs terra.NumberValue `hcl:"refresh_interval_ms,attr"`
}

type RangePartitioning struct {
	// Field: string, required
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// RangePartitioningRange: required
	Range *RangePartitioningRange `hcl:"range,block" validate:"required"`
}

type RangePartitioningRange struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type TableConstraints struct {
	// TableConstraintsForeignKeys: min=0
	ForeignKeys []TableConstraintsForeignKeys `hcl:"foreign_keys,block" validate:"min=0"`
	// TableConstraintsPrimaryKey: optional
	PrimaryKey *TableConstraintsPrimaryKey `hcl:"primary_key,block"`
}

type TableConstraintsForeignKeys struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TableConstraintsForeignKeysColumnReferences: required
	ColumnReferences *TableConstraintsForeignKeysColumnReferences `hcl:"column_references,block" validate:"required"`
	// TableConstraintsForeignKeysReferencedTable: required
	ReferencedTable *TableConstraintsForeignKeysReferencedTable `hcl:"referenced_table,block" validate:"required"`
}

type TableConstraintsForeignKeysColumnReferences struct {
	// ReferencedColumn: string, required
	ReferencedColumn terra.StringValue `hcl:"referenced_column,attr" validate:"required"`
	// ReferencingColumn: string, required
	ReferencingColumn terra.StringValue `hcl:"referencing_column,attr" validate:"required"`
}

type TableConstraintsForeignKeysReferencedTable struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type TableConstraintsPrimaryKey struct {
	// Columns: list of string, required
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr" validate:"required"`
}

type TableReplicationInfo struct {
	// ReplicationIntervalMs: number, optional
	ReplicationIntervalMs terra.NumberValue `hcl:"replication_interval_ms,attr"`
	// SourceDatasetId: string, required
	SourceDatasetId terra.StringValue `hcl:"source_dataset_id,attr" validate:"required"`
	// SourceProjectId: string, required
	SourceProjectId terra.StringValue `hcl:"source_project_id,attr" validate:"required"`
	// SourceTableId: string, required
	SourceTableId terra.StringValue `hcl:"source_table_id,attr" validate:"required"`
}

type TimePartitioning struct {
	// ExpirationMs: number, optional
	ExpirationMs terra.NumberValue `hcl:"expiration_ms,attr"`
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type View struct {
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// UseLegacySql: bool, optional
	UseLegacySql terra.BoolValue `hcl:"use_legacy_sql,attr"`
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_name"))
}

func (ec EncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_version"))
}

type ExternalDataConfigurationAttributes struct {
	ref terra.Reference
}

func (edc ExternalDataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return edc.ref, nil
}

func (edc ExternalDataConfigurationAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationAttributes {
	return ExternalDataConfigurationAttributes{ref: ref}
}

func (edc ExternalDataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return edc.ref.InternalTokens()
}

func (edc ExternalDataConfigurationAttributes) Autodetect() terra.BoolValue {
	return terra.ReferenceAsBool(edc.ref.Append("autodetect"))
}

func (edc ExternalDataConfigurationAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("compression"))
}

func (edc ExternalDataConfigurationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("connection_id"))
}

func (edc ExternalDataConfigurationAttributes) FileSetSpecType() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("file_set_spec_type"))
}

func (edc ExternalDataConfigurationAttributes) IgnoreUnknownValues() terra.BoolValue {
	return terra.ReferenceAsBool(edc.ref.Append("ignore_unknown_values"))
}

func (edc ExternalDataConfigurationAttributes) JsonExtension() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("json_extension"))
}

func (edc ExternalDataConfigurationAttributes) MaxBadRecords() terra.NumberValue {
	return terra.ReferenceAsNumber(edc.ref.Append("max_bad_records"))
}

func (edc ExternalDataConfigurationAttributes) MetadataCacheMode() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("metadata_cache_mode"))
}

func (edc ExternalDataConfigurationAttributes) ObjectMetadata() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("object_metadata"))
}

func (edc ExternalDataConfigurationAttributes) ReferenceFileSchemaUri() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("reference_file_schema_uri"))
}

func (edc ExternalDataConfigurationAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("schema"))
}

func (edc ExternalDataConfigurationAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(edc.ref.Append("source_format"))
}

func (edc ExternalDataConfigurationAttributes) SourceUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](edc.ref.Append("source_uris"))
}

func (edc ExternalDataConfigurationAttributes) AvroOptions() terra.ListValue[ExternalDataConfigurationAvroOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationAvroOptionsAttributes](edc.ref.Append("avro_options"))
}

func (edc ExternalDataConfigurationAttributes) CsvOptions() terra.ListValue[ExternalDataConfigurationCsvOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationCsvOptionsAttributes](edc.ref.Append("csv_options"))
}

func (edc ExternalDataConfigurationAttributes) GoogleSheetsOptions() terra.ListValue[ExternalDataConfigurationGoogleSheetsOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationGoogleSheetsOptionsAttributes](edc.ref.Append("google_sheets_options"))
}

func (edc ExternalDataConfigurationAttributes) HivePartitioningOptions() terra.ListValue[ExternalDataConfigurationHivePartitioningOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationHivePartitioningOptionsAttributes](edc.ref.Append("hive_partitioning_options"))
}

func (edc ExternalDataConfigurationAttributes) JsonOptions() terra.ListValue[ExternalDataConfigurationJsonOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationJsonOptionsAttributes](edc.ref.Append("json_options"))
}

func (edc ExternalDataConfigurationAttributes) ParquetOptions() terra.ListValue[ExternalDataConfigurationParquetOptionsAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationParquetOptionsAttributes](edc.ref.Append("parquet_options"))
}

type ExternalDataConfigurationAvroOptionsAttributes struct {
	ref terra.Reference
}

func (ao ExternalDataConfigurationAvroOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao ExternalDataConfigurationAvroOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationAvroOptionsAttributes {
	return ExternalDataConfigurationAvroOptionsAttributes{ref: ref}
}

func (ao ExternalDataConfigurationAvroOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao ExternalDataConfigurationAvroOptionsAttributes) UseAvroLogicalTypes() terra.BoolValue {
	return terra.ReferenceAsBool(ao.ref.Append("use_avro_logical_types"))
}

type ExternalDataConfigurationCsvOptionsAttributes struct {
	ref terra.Reference
}

func (co ExternalDataConfigurationCsvOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ExternalDataConfigurationCsvOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationCsvOptionsAttributes {
	return ExternalDataConfigurationCsvOptionsAttributes{ref: ref}
}

func (co ExternalDataConfigurationCsvOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ExternalDataConfigurationCsvOptionsAttributes) AllowJaggedRows() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("allow_jagged_rows"))
}

func (co ExternalDataConfigurationCsvOptionsAttributes) AllowQuotedNewlines() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("allow_quoted_newlines"))
}

func (co ExternalDataConfigurationCsvOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("encoding"))
}

func (co ExternalDataConfigurationCsvOptionsAttributes) FieldDelimiter() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("field_delimiter"))
}

func (co ExternalDataConfigurationCsvOptionsAttributes) Quote() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("quote"))
}

func (co ExternalDataConfigurationCsvOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("skip_leading_rows"))
}

type ExternalDataConfigurationGoogleSheetsOptionsAttributes struct {
	ref terra.Reference
}

func (gso ExternalDataConfigurationGoogleSheetsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return gso.ref, nil
}

func (gso ExternalDataConfigurationGoogleSheetsOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationGoogleSheetsOptionsAttributes {
	return ExternalDataConfigurationGoogleSheetsOptionsAttributes{ref: ref}
}

func (gso ExternalDataConfigurationGoogleSheetsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gso.ref.InternalTokens()
}

func (gso ExternalDataConfigurationGoogleSheetsOptionsAttributes) Range() terra.StringValue {
	return terra.ReferenceAsString(gso.ref.Append("range"))
}

func (gso ExternalDataConfigurationGoogleSheetsOptionsAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceAsNumber(gso.ref.Append("skip_leading_rows"))
}

type ExternalDataConfigurationHivePartitioningOptionsAttributes struct {
	ref terra.Reference
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) InternalRef() (terra.Reference, error) {
	return hpo.ref, nil
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationHivePartitioningOptionsAttributes {
	return ExternalDataConfigurationHivePartitioningOptionsAttributes{ref: ref}
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hpo.ref.InternalTokens()
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(hpo.ref.Append("mode"))
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceAsBool(hpo.ref.Append("require_partition_filter"))
}

func (hpo ExternalDataConfigurationHivePartitioningOptionsAttributes) SourceUriPrefix() terra.StringValue {
	return terra.ReferenceAsString(hpo.ref.Append("source_uri_prefix"))
}

type ExternalDataConfigurationJsonOptionsAttributes struct {
	ref terra.Reference
}

func (jo ExternalDataConfigurationJsonOptionsAttributes) InternalRef() (terra.Reference, error) {
	return jo.ref, nil
}

func (jo ExternalDataConfigurationJsonOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationJsonOptionsAttributes {
	return ExternalDataConfigurationJsonOptionsAttributes{ref: ref}
}

func (jo ExternalDataConfigurationJsonOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jo.ref.InternalTokens()
}

func (jo ExternalDataConfigurationJsonOptionsAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(jo.ref.Append("encoding"))
}

type ExternalDataConfigurationParquetOptionsAttributes struct {
	ref terra.Reference
}

func (po ExternalDataConfigurationParquetOptionsAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po ExternalDataConfigurationParquetOptionsAttributes) InternalWithRef(ref terra.Reference) ExternalDataConfigurationParquetOptionsAttributes {
	return ExternalDataConfigurationParquetOptionsAttributes{ref: ref}
}

func (po ExternalDataConfigurationParquetOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po ExternalDataConfigurationParquetOptionsAttributes) EnableListInference() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enable_list_inference"))
}

func (po ExternalDataConfigurationParquetOptionsAttributes) EnumAsString() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enum_as_string"))
}

type MaterializedViewAttributes struct {
	ref terra.Reference
}

func (mv MaterializedViewAttributes) InternalRef() (terra.Reference, error) {
	return mv.ref, nil
}

func (mv MaterializedViewAttributes) InternalWithRef(ref terra.Reference) MaterializedViewAttributes {
	return MaterializedViewAttributes{ref: ref}
}

func (mv MaterializedViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mv.ref.InternalTokens()
}

func (mv MaterializedViewAttributes) AllowNonIncrementalDefinition() terra.BoolValue {
	return terra.ReferenceAsBool(mv.ref.Append("allow_non_incremental_definition"))
}

func (mv MaterializedViewAttributes) EnableRefresh() terra.BoolValue {
	return terra.ReferenceAsBool(mv.ref.Append("enable_refresh"))
}

func (mv MaterializedViewAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(mv.ref.Append("query"))
}

func (mv MaterializedViewAttributes) RefreshIntervalMs() terra.NumberValue {
	return terra.ReferenceAsNumber(mv.ref.Append("refresh_interval_ms"))
}

type RangePartitioningAttributes struct {
	ref terra.Reference
}

func (rp RangePartitioningAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RangePartitioningAttributes) InternalWithRef(ref terra.Reference) RangePartitioningAttributes {
	return RangePartitioningAttributes{ref: ref}
}

func (rp RangePartitioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RangePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("field"))
}

func (rp RangePartitioningAttributes) Range() terra.ListValue[RangePartitioningRangeAttributes] {
	return terra.ReferenceAsList[RangePartitioningRangeAttributes](rp.ref.Append("range"))
}

type RangePartitioningRangeAttributes struct {
	ref terra.Reference
}

func (r RangePartitioningRangeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RangePartitioningRangeAttributes) InternalWithRef(ref terra.Reference) RangePartitioningRangeAttributes {
	return RangePartitioningRangeAttributes{ref: ref}
}

func (r RangePartitioningRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RangePartitioningRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r RangePartitioningRangeAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("interval"))
}

func (r RangePartitioningRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type TableConstraintsAttributes struct {
	ref terra.Reference
}

func (tc TableConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TableConstraintsAttributes) InternalWithRef(ref terra.Reference) TableConstraintsAttributes {
	return TableConstraintsAttributes{ref: ref}
}

func (tc TableConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TableConstraintsAttributes) ForeignKeys() terra.ListValue[TableConstraintsForeignKeysAttributes] {
	return terra.ReferenceAsList[TableConstraintsForeignKeysAttributes](tc.ref.Append("foreign_keys"))
}

func (tc TableConstraintsAttributes) PrimaryKey() terra.ListValue[TableConstraintsPrimaryKeyAttributes] {
	return terra.ReferenceAsList[TableConstraintsPrimaryKeyAttributes](tc.ref.Append("primary_key"))
}

type TableConstraintsForeignKeysAttributes struct {
	ref terra.Reference
}

func (fk TableConstraintsForeignKeysAttributes) InternalRef() (terra.Reference, error) {
	return fk.ref, nil
}

func (fk TableConstraintsForeignKeysAttributes) InternalWithRef(ref terra.Reference) TableConstraintsForeignKeysAttributes {
	return TableConstraintsForeignKeysAttributes{ref: ref}
}

func (fk TableConstraintsForeignKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fk.ref.InternalTokens()
}

func (fk TableConstraintsForeignKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fk.ref.Append("name"))
}

func (fk TableConstraintsForeignKeysAttributes) ColumnReferences() terra.ListValue[TableConstraintsForeignKeysColumnReferencesAttributes] {
	return terra.ReferenceAsList[TableConstraintsForeignKeysColumnReferencesAttributes](fk.ref.Append("column_references"))
}

func (fk TableConstraintsForeignKeysAttributes) ReferencedTable() terra.ListValue[TableConstraintsForeignKeysReferencedTableAttributes] {
	return terra.ReferenceAsList[TableConstraintsForeignKeysReferencedTableAttributes](fk.ref.Append("referenced_table"))
}

type TableConstraintsForeignKeysColumnReferencesAttributes struct {
	ref terra.Reference
}

func (cr TableConstraintsForeignKeysColumnReferencesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr TableConstraintsForeignKeysColumnReferencesAttributes) InternalWithRef(ref terra.Reference) TableConstraintsForeignKeysColumnReferencesAttributes {
	return TableConstraintsForeignKeysColumnReferencesAttributes{ref: ref}
}

func (cr TableConstraintsForeignKeysColumnReferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr TableConstraintsForeignKeysColumnReferencesAttributes) ReferencedColumn() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("referenced_column"))
}

func (cr TableConstraintsForeignKeysColumnReferencesAttributes) ReferencingColumn() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("referencing_column"))
}

type TableConstraintsForeignKeysReferencedTableAttributes struct {
	ref terra.Reference
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) InternalWithRef(ref terra.Reference) TableConstraintsForeignKeysReferencedTableAttributes {
	return TableConstraintsForeignKeysReferencedTableAttributes{ref: ref}
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("dataset_id"))
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("project_id"))
}

func (rt TableConstraintsForeignKeysReferencedTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("table_id"))
}

type TableConstraintsPrimaryKeyAttributes struct {
	ref terra.Reference
}

func (pk TableConstraintsPrimaryKeyAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk TableConstraintsPrimaryKeyAttributes) InternalWithRef(ref terra.Reference) TableConstraintsPrimaryKeyAttributes {
	return TableConstraintsPrimaryKeyAttributes{ref: ref}
}

func (pk TableConstraintsPrimaryKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk TableConstraintsPrimaryKeyAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pk.ref.Append("columns"))
}

type TableReplicationInfoAttributes struct {
	ref terra.Reference
}

func (tri TableReplicationInfoAttributes) InternalRef() (terra.Reference, error) {
	return tri.ref, nil
}

func (tri TableReplicationInfoAttributes) InternalWithRef(ref terra.Reference) TableReplicationInfoAttributes {
	return TableReplicationInfoAttributes{ref: ref}
}

func (tri TableReplicationInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tri.ref.InternalTokens()
}

func (tri TableReplicationInfoAttributes) ReplicationIntervalMs() terra.NumberValue {
	return terra.ReferenceAsNumber(tri.ref.Append("replication_interval_ms"))
}

func (tri TableReplicationInfoAttributes) SourceDatasetId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_dataset_id"))
}

func (tri TableReplicationInfoAttributes) SourceProjectId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_project_id"))
}

func (tri TableReplicationInfoAttributes) SourceTableId() terra.StringValue {
	return terra.ReferenceAsString(tri.ref.Append("source_table_id"))
}

type TimePartitioningAttributes struct {
	ref terra.Reference
}

func (tp TimePartitioningAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TimePartitioningAttributes) InternalWithRef(ref terra.Reference) TimePartitioningAttributes {
	return TimePartitioningAttributes{ref: ref}
}

func (tp TimePartitioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TimePartitioningAttributes) ExpirationMs() terra.NumberValue {
	return terra.ReferenceAsNumber(tp.ref.Append("expiration_ms"))
}

func (tp TimePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("field"))
}

func (tp TimePartitioningAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceAsBool(tp.ref.Append("require_partition_filter"))
}

func (tp TimePartitioningAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("type"))
}

type ViewAttributes struct {
	ref terra.Reference
}

func (v ViewAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ViewAttributes) InternalWithRef(ref terra.Reference) ViewAttributes {
	return ViewAttributes{ref: ref}
}

func (v ViewAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ViewAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("query"))
}

func (v ViewAttributes) UseLegacySql() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("use_legacy_sql"))
}

type EncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type ExternalDataConfigurationState struct {
	Autodetect              bool                                                    `json:"autodetect"`
	Compression             string                                                  `json:"compression"`
	ConnectionId            string                                                  `json:"connection_id"`
	FileSetSpecType         string                                                  `json:"file_set_spec_type"`
	IgnoreUnknownValues     bool                                                    `json:"ignore_unknown_values"`
	JsonExtension           string                                                  `json:"json_extension"`
	MaxBadRecords           float64                                                 `json:"max_bad_records"`
	MetadataCacheMode       string                                                  `json:"metadata_cache_mode"`
	ObjectMetadata          string                                                  `json:"object_metadata"`
	ReferenceFileSchemaUri  string                                                  `json:"reference_file_schema_uri"`
	Schema                  string                                                  `json:"schema"`
	SourceFormat            string                                                  `json:"source_format"`
	SourceUris              []string                                                `json:"source_uris"`
	AvroOptions             []ExternalDataConfigurationAvroOptionsState             `json:"avro_options"`
	CsvOptions              []ExternalDataConfigurationCsvOptionsState              `json:"csv_options"`
	GoogleSheetsOptions     []ExternalDataConfigurationGoogleSheetsOptionsState     `json:"google_sheets_options"`
	HivePartitioningOptions []ExternalDataConfigurationHivePartitioningOptionsState `json:"hive_partitioning_options"`
	JsonOptions             []ExternalDataConfigurationJsonOptionsState             `json:"json_options"`
	ParquetOptions          []ExternalDataConfigurationParquetOptionsState          `json:"parquet_options"`
}

type ExternalDataConfigurationAvroOptionsState struct {
	UseAvroLogicalTypes bool `json:"use_avro_logical_types"`
}

type ExternalDataConfigurationCsvOptionsState struct {
	AllowJaggedRows     bool    `json:"allow_jagged_rows"`
	AllowQuotedNewlines bool    `json:"allow_quoted_newlines"`
	Encoding            string  `json:"encoding"`
	FieldDelimiter      string  `json:"field_delimiter"`
	Quote               string  `json:"quote"`
	SkipLeadingRows     float64 `json:"skip_leading_rows"`
}

type ExternalDataConfigurationGoogleSheetsOptionsState struct {
	Range           string  `json:"range"`
	SkipLeadingRows float64 `json:"skip_leading_rows"`
}

type ExternalDataConfigurationHivePartitioningOptionsState struct {
	Mode                   string `json:"mode"`
	RequirePartitionFilter bool   `json:"require_partition_filter"`
	SourceUriPrefix        string `json:"source_uri_prefix"`
}

type ExternalDataConfigurationJsonOptionsState struct {
	Encoding string `json:"encoding"`
}

type ExternalDataConfigurationParquetOptionsState struct {
	EnableListInference bool `json:"enable_list_inference"`
	EnumAsString        bool `json:"enum_as_string"`
}

type MaterializedViewState struct {
	AllowNonIncrementalDefinition bool    `json:"allow_non_incremental_definition"`
	EnableRefresh                 bool    `json:"enable_refresh"`
	Query                         string  `json:"query"`
	RefreshIntervalMs             float64 `json:"refresh_interval_ms"`
}

type RangePartitioningState struct {
	Field string                        `json:"field"`
	Range []RangePartitioningRangeState `json:"range"`
}

type RangePartitioningRangeState struct {
	End      float64 `json:"end"`
	Interval float64 `json:"interval"`
	Start    float64 `json:"start"`
}

type TableConstraintsState struct {
	ForeignKeys []TableConstraintsForeignKeysState `json:"foreign_keys"`
	PrimaryKey  []TableConstraintsPrimaryKeyState  `json:"primary_key"`
}

type TableConstraintsForeignKeysState struct {
	Name             string                                             `json:"name"`
	ColumnReferences []TableConstraintsForeignKeysColumnReferencesState `json:"column_references"`
	ReferencedTable  []TableConstraintsForeignKeysReferencedTableState  `json:"referenced_table"`
}

type TableConstraintsForeignKeysColumnReferencesState struct {
	ReferencedColumn  string `json:"referenced_column"`
	ReferencingColumn string `json:"referencing_column"`
}

type TableConstraintsForeignKeysReferencedTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type TableConstraintsPrimaryKeyState struct {
	Columns []string `json:"columns"`
}

type TableReplicationInfoState struct {
	ReplicationIntervalMs float64 `json:"replication_interval_ms"`
	SourceDatasetId       string  `json:"source_dataset_id"`
	SourceProjectId       string  `json:"source_project_id"`
	SourceTableId         string  `json:"source_table_id"`
}

type TimePartitioningState struct {
	ExpirationMs           float64 `json:"expiration_ms"`
	Field                  string  `json:"field"`
	RequirePartitionFilter bool    `json:"require_partition_filter"`
	Type                   string  `json:"type"`
}

type ViewState struct {
	Query        string `json:"query"`
	UseLegacySql bool   `json:"use_legacy_sql"`
}
