// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_table.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbt *Resource) Type() string {
	return "google_bigquery_table"
}

// LocalName returns the local name for [Resource].
func (gbt *Resource) LocalName() string {
	return gbt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbt *Resource) Configuration() interface{} {
	return gbt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbt *Resource) Dependencies() terra.Dependencies {
	return gbt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbt *Resource) Attributes() googleBigqueryTableAttributes {
	return googleBigqueryTableAttributes{ref: terra.ReferenceResource(gbt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbt *Resource) ImportState(state io.Reader) error {
	gbt.state = &googleBigqueryTableState{}
	if err := json.NewDecoder(state).Decode(gbt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbt.Type(), gbt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbt *Resource) State() (*googleBigqueryTableState, bool) {
	return gbt.state, gbt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbt *Resource) StateMust() *googleBigqueryTableState {
	if gbt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbt.Type(), gbt.LocalName()))
	}
	return gbt.state
}

// Args contains the configurations for google_bigquery_table.
type Args struct {
	// Clustering: list of string, optional
	Clustering terra.ListValue[terra.StringValue] `hcl:"clustering,attr"`
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExpirationTime: number, optional
	ExpirationTime terra.NumberValue `hcl:"expiration_time,attr"`
	// FriendlyName: string, optional
	FriendlyName terra.StringValue `hcl:"friendly_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// MaxStaleness: string, optional
	MaxStaleness terra.StringValue `hcl:"max_staleness,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RequirePartitionFilter: bool, optional
	RequirePartitionFilter terra.BoolValue `hcl:"require_partition_filter,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// ExternalDataConfiguration: optional
	ExternalDataConfiguration *ExternalDataConfiguration `hcl:"external_data_configuration,block"`
	// MaterializedView: optional
	MaterializedView *MaterializedView `hcl:"materialized_view,block"`
	// RangePartitioning: optional
	RangePartitioning *RangePartitioning `hcl:"range_partitioning,block"`
	// TableConstraints: optional
	TableConstraints *TableConstraints `hcl:"table_constraints,block"`
	// TableReplicationInfo: optional
	TableReplicationInfo *TableReplicationInfo `hcl:"table_replication_info,block"`
	// TimePartitioning: optional
	TimePartitioning *TimePartitioning `hcl:"time_partitioning,block"`
	// View: optional
	View *View `hcl:"view,block"`
}

type googleBigqueryTableAttributes struct {
	ref terra.Reference
}

// Clustering returns a reference to field clustering of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Clustering() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gbt.ref.Append("clustering"))
}

// CreationTime returns a reference to field creation_time of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) CreationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("creation_time"))
}

// DatasetId returns a reference to field dataset_id of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("dataset_id"))
}

// DeletionProtection returns a reference to field deletion_protection of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(gbt.ref.Append("deletion_protection"))
}

// Description returns a reference to field description of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbt.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("etag"))
}

// ExpirationTime returns a reference to field expiration_time of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) ExpirationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("expiration_time"))
}

// FriendlyName returns a reference to field friendly_name of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) FriendlyName() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("friendly_name"))
}

// Id returns a reference to field id of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("id"))
}

// Labels returns a reference to field labels of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbt.ref.Append("labels"))
}

// LastModifiedTime returns a reference to field last_modified_time of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) LastModifiedTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("last_modified_time"))
}

// Location returns a reference to field location of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("location"))
}

// MaxStaleness returns a reference to field max_staleness of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) MaxStaleness() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("max_staleness"))
}

// NumBytes returns a reference to field num_bytes of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) NumBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("num_bytes"))
}

// NumLongTermBytes returns a reference to field num_long_term_bytes of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) NumLongTermBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("num_long_term_bytes"))
}

// NumRows returns a reference to field num_rows of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) NumRows() terra.NumberValue {
	return terra.ReferenceAsNumber(gbt.ref.Append("num_rows"))
}

// Project returns a reference to field project of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("project"))
}

// RequirePartitionFilter returns a reference to field require_partition_filter of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) RequirePartitionFilter() terra.BoolValue {
	return terra.ReferenceAsBool(gbt.ref.Append("require_partition_filter"))
}

// Schema returns a reference to field schema of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("schema"))
}

// SelfLink returns a reference to field self_link of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("self_link"))
}

// TableId returns a reference to field table_id of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("table_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbt.ref.Append("terraform_labels"))
}

// Type returns a reference to field type of google_bigquery_table.
func (gbt googleBigqueryTableAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("type"))
}

func (gbt googleBigqueryTableAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](gbt.ref.Append("encryption_configuration"))
}

func (gbt googleBigqueryTableAttributes) ExternalDataConfiguration() terra.ListValue[ExternalDataConfigurationAttributes] {
	return terra.ReferenceAsList[ExternalDataConfigurationAttributes](gbt.ref.Append("external_data_configuration"))
}

func (gbt googleBigqueryTableAttributes) MaterializedView() terra.ListValue[MaterializedViewAttributes] {
	return terra.ReferenceAsList[MaterializedViewAttributes](gbt.ref.Append("materialized_view"))
}

func (gbt googleBigqueryTableAttributes) RangePartitioning() terra.ListValue[RangePartitioningAttributes] {
	return terra.ReferenceAsList[RangePartitioningAttributes](gbt.ref.Append("range_partitioning"))
}

func (gbt googleBigqueryTableAttributes) TableConstraints() terra.ListValue[TableConstraintsAttributes] {
	return terra.ReferenceAsList[TableConstraintsAttributes](gbt.ref.Append("table_constraints"))
}

func (gbt googleBigqueryTableAttributes) TableReplicationInfo() terra.ListValue[TableReplicationInfoAttributes] {
	return terra.ReferenceAsList[TableReplicationInfoAttributes](gbt.ref.Append("table_replication_info"))
}

func (gbt googleBigqueryTableAttributes) TimePartitioning() terra.ListValue[TimePartitioningAttributes] {
	return terra.ReferenceAsList[TimePartitioningAttributes](gbt.ref.Append("time_partitioning"))
}

func (gbt googleBigqueryTableAttributes) View() terra.ListValue[ViewAttributes] {
	return terra.ReferenceAsList[ViewAttributes](gbt.ref.Append("view"))
}

type googleBigqueryTableState struct {
	Clustering                []string                         `json:"clustering"`
	CreationTime              float64                          `json:"creation_time"`
	DatasetId                 string                           `json:"dataset_id"`
	DeletionProtection        bool                             `json:"deletion_protection"`
	Description               string                           `json:"description"`
	EffectiveLabels           map[string]string                `json:"effective_labels"`
	Etag                      string                           `json:"etag"`
	ExpirationTime            float64                          `json:"expiration_time"`
	FriendlyName              string                           `json:"friendly_name"`
	Id                        string                           `json:"id"`
	Labels                    map[string]string                `json:"labels"`
	LastModifiedTime          float64                          `json:"last_modified_time"`
	Location                  string                           `json:"location"`
	MaxStaleness              string                           `json:"max_staleness"`
	NumBytes                  float64                          `json:"num_bytes"`
	NumLongTermBytes          float64                          `json:"num_long_term_bytes"`
	NumRows                   float64                          `json:"num_rows"`
	Project                   string                           `json:"project"`
	RequirePartitionFilter    bool                             `json:"require_partition_filter"`
	Schema                    string                           `json:"schema"`
	SelfLink                  string                           `json:"self_link"`
	TableId                   string                           `json:"table_id"`
	TerraformLabels           map[string]string                `json:"terraform_labels"`
	Type                      string                           `json:"type"`
	EncryptionConfiguration   []EncryptionConfigurationState   `json:"encryption_configuration"`
	ExternalDataConfiguration []ExternalDataConfigurationState `json:"external_data_configuration"`
	MaterializedView          []MaterializedViewState          `json:"materialized_view"`
	RangePartitioning         []RangePartitioningState         `json:"range_partitioning"`
	TableConstraints          []TableConstraintsState          `json:"table_constraints"`
	TableReplicationInfo      []TableReplicationInfoState      `json:"table_replication_info"`
	TimePartitioning          []TimePartitioningState          `json:"time_partitioning"`
	View                      []ViewState                      `json:"view"`
}
