// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_transfer_agent_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_transfer_agent_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageTransferAgentPoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gstap *Resource) Type() string {
	return "google_storage_transfer_agent_pool"
}

// LocalName returns the local name for [Resource].
func (gstap *Resource) LocalName() string {
	return gstap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gstap *Resource) Configuration() interface{} {
	return gstap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gstap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gstap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gstap *Resource) Dependencies() terra.Dependencies {
	return gstap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gstap *Resource) LifecycleManagement() *terra.Lifecycle {
	return gstap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gstap *Resource) Attributes() googleStorageTransferAgentPoolAttributes {
	return googleStorageTransferAgentPoolAttributes{ref: terra.ReferenceResource(gstap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gstap *Resource) ImportState(state io.Reader) error {
	gstap.state = &googleStorageTransferAgentPoolState{}
	if err := json.NewDecoder(state).Decode(gstap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gstap.Type(), gstap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gstap *Resource) State() (*googleStorageTransferAgentPoolState, bool) {
	return gstap.state, gstap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gstap *Resource) StateMust() *googleStorageTransferAgentPoolState {
	if gstap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gstap.Type(), gstap.LocalName()))
	}
	return gstap.state
}

// Args contains the configurations for google_storage_transfer_agent_pool.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BandwidthLimit: optional
	BandwidthLimit *BandwidthLimit `hcl:"bandwidth_limit,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleStorageTransferAgentPoolAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_storage_transfer_agent_pool.
func (gstap googleStorageTransferAgentPoolAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gstap.ref.Append("display_name"))
}

// Id returns a reference to field id of google_storage_transfer_agent_pool.
func (gstap googleStorageTransferAgentPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gstap.ref.Append("id"))
}

// Name returns a reference to field name of google_storage_transfer_agent_pool.
func (gstap googleStorageTransferAgentPoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gstap.ref.Append("name"))
}

// Project returns a reference to field project of google_storage_transfer_agent_pool.
func (gstap googleStorageTransferAgentPoolAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gstap.ref.Append("project"))
}

// State returns a reference to field state of google_storage_transfer_agent_pool.
func (gstap googleStorageTransferAgentPoolAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gstap.ref.Append("state"))
}

func (gstap googleStorageTransferAgentPoolAttributes) BandwidthLimit() terra.ListValue[BandwidthLimitAttributes] {
	return terra.ReferenceAsList[BandwidthLimitAttributes](gstap.ref.Append("bandwidth_limit"))
}

func (gstap googleStorageTransferAgentPoolAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gstap.ref.Append("timeouts"))
}

type googleStorageTransferAgentPoolState struct {
	DisplayName    string                `json:"display_name"`
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	Project        string                `json:"project"`
	State          string                `json:"state"`
	BandwidthLimit []BandwidthLimitState `json:"bandwidth_limit"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
