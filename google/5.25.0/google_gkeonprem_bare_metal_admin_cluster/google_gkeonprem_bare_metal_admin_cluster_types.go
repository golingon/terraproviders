// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gkeonprem_bare_metal_admin_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ClusterOperations struct {
	// EnableApplicationLogs: bool, optional
	EnableApplicationLogs terra.BoolValue `hcl:"enable_application_logs,attr"`
}

type ControlPlane struct {
	// ControlPlaneApiServerArgs: min=0
	ApiServerArgs []ControlPlaneApiServerArgs `hcl:"api_server_args,block" validate:"min=0"`
	// ControlPlaneControlPlaneNodePoolConfig: required
	ControlPlaneNodePoolConfig *ControlPlaneControlPlaneNodePoolConfig `hcl:"control_plane_node_pool_config,block" validate:"required"`
}

type ControlPlaneApiServerArgs struct {
	// Argument: string, required
	Argument terra.StringValue `hcl:"argument,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ControlPlaneControlPlaneNodePoolConfig struct {
	// ControlPlaneControlPlaneNodePoolConfigNodePoolConfig: required
	NodePoolConfig *ControlPlaneControlPlaneNodePoolConfigNodePoolConfig `hcl:"node_pool_config,block" validate:"required"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfig struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs: min=0
	NodeConfigs []ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs `hcl:"node_configs,block" validate:"min=0"`
	// ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints: min=0
	Taints []ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints `hcl:"taints,block" validate:"min=0"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeIp: string, optional
	NodeIp terra.StringValue `hcl:"node_ip,attr"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints struct {
	// Effect: string, optional
	Effect terra.StringValue `hcl:"effect,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type LoadBalancer struct {
	// LoadBalancerManualLbConfig: optional
	ManualLbConfig *LoadBalancerManualLbConfig `hcl:"manual_lb_config,block"`
	// LoadBalancerPortConfig: required
	PortConfig *LoadBalancerPortConfig `hcl:"port_config,block" validate:"required"`
	// LoadBalancerVipConfig: required
	VipConfig *LoadBalancerVipConfig `hcl:"vip_config,block" validate:"required"`
}

type LoadBalancerManualLbConfig struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type LoadBalancerPortConfig struct {
	// ControlPlaneLoadBalancerPort: number, required
	ControlPlaneLoadBalancerPort terra.NumberValue `hcl:"control_plane_load_balancer_port,attr" validate:"required"`
}

type LoadBalancerVipConfig struct {
	// ControlPlaneVip: string, required
	ControlPlaneVip terra.StringValue `hcl:"control_plane_vip,attr" validate:"required"`
}

type MaintenanceConfig struct {
	// MaintenanceAddressCidrBlocks: list of string, required
	MaintenanceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"maintenance_address_cidr_blocks,attr" validate:"required"`
}

type NetworkConfig struct {
	// NetworkConfigIslandModeCidr: optional
	IslandModeCidr *NetworkConfigIslandModeCidr `hcl:"island_mode_cidr,block"`
}

type NetworkConfigIslandModeCidr struct {
	// PodAddressCidrBlocks: list of string, required
	PodAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"pod_address_cidr_blocks,attr" validate:"required"`
	// ServiceAddressCidrBlocks: list of string, required
	ServiceAddressCidrBlocks terra.ListValue[terra.StringValue] `hcl:"service_address_cidr_blocks,attr" validate:"required"`
}

type NodeAccessConfig struct {
	// LoginUser: string, optional
	LoginUser terra.StringValue `hcl:"login_user,attr"`
}

type NodeConfig struct {
	// MaxPodsPerNode: number, optional
	MaxPodsPerNode terra.NumberValue `hcl:"max_pods_per_node,attr"`
}

type Proxy struct {
	// NoProxy: list of string, optional
	NoProxy terra.ListValue[terra.StringValue] `hcl:"no_proxy,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type SecurityConfig struct {
	// SecurityConfigAuthorization: optional
	Authorization *SecurityConfigAuthorization `hcl:"authorization,block"`
}

type SecurityConfigAuthorization struct {
	// SecurityConfigAuthorizationAdminUsers: min=1
	AdminUsers []SecurityConfigAuthorizationAdminUsers `hcl:"admin_users,block" validate:"min=1"`
}

type SecurityConfigAuthorizationAdminUsers struct {
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Storage struct {
	// StorageLvpNodeMountsConfig: required
	LvpNodeMountsConfig *StorageLvpNodeMountsConfig `hcl:"lvp_node_mounts_config,block" validate:"required"`
	// StorageLvpShareConfig: required
	LvpShareConfig *StorageLvpShareConfig `hcl:"lvp_share_config,block" validate:"required"`
}

type StorageLvpNodeMountsConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type StorageLvpShareConfig struct {
	// SharedPathPvCount: number, optional
	SharedPathPvCount terra.NumberValue `hcl:"shared_path_pv_count,attr"`
	// StorageLvpShareConfigLvpConfig: required
	LvpConfig *StorageLvpShareConfigLvpConfig `hcl:"lvp_config,block" validate:"required"`
}

type StorageLvpShareConfigLvpConfig struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("error_message"))
}

func (s StatusAttributes) Conditions() terra.ListValue[StatusConditionsAttributes] {
	return terra.ReferenceAsList[StatusConditionsAttributes](s.ref.Append("conditions"))
}

type StatusConditionsAttributes struct {
	ref terra.Reference
}

func (c StatusConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StatusConditionsAttributes) InternalWithRef(ref terra.Reference) StatusConditionsAttributes {
	return StatusConditionsAttributes{ref: ref}
}

func (c StatusConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StatusConditionsAttributes) LastTransitionTime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("last_transition_time"))
}

func (c StatusConditionsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

func (c StatusConditionsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("reason"))
}

func (c StatusConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

func (c StatusConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type ValidationCheckAttributes struct {
	ref terra.Reference
}

func (vc ValidationCheckAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ValidationCheckAttributes) InternalWithRef(ref terra.Reference) ValidationCheckAttributes {
	return ValidationCheckAttributes{ref: ref}
}

func (vc ValidationCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ValidationCheckAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("options"))
}

func (vc ValidationCheckAttributes) Scenario() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("scenario"))
}

func (vc ValidationCheckAttributes) Status() terra.ListValue[ValidationCheckStatusAttributes] {
	return terra.ReferenceAsList[ValidationCheckStatusAttributes](vc.ref.Append("status"))
}

type ValidationCheckStatusAttributes struct {
	ref terra.Reference
}

func (s ValidationCheckStatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ValidationCheckStatusAttributes) InternalWithRef(ref terra.Reference) ValidationCheckStatusAttributes {
	return ValidationCheckStatusAttributes{ref: ref}
}

func (s ValidationCheckStatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ValidationCheckStatusAttributes) Result() terra.ListValue[ValidationCheckStatusResultAttributes] {
	return terra.ReferenceAsList[ValidationCheckStatusResultAttributes](s.ref.Append("result"))
}

type ValidationCheckStatusResultAttributes struct {
	ref terra.Reference
}

func (r ValidationCheckStatusResultAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ValidationCheckStatusResultAttributes) InternalWithRef(ref terra.Reference) ValidationCheckStatusResultAttributes {
	return ValidationCheckStatusResultAttributes{ref: ref}
}

func (r ValidationCheckStatusResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ValidationCheckStatusResultAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("category"))
}

func (r ValidationCheckStatusResultAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r ValidationCheckStatusResultAttributes) Details() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("details"))
}

func (r ValidationCheckStatusResultAttributes) Options() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("options"))
}

func (r ValidationCheckStatusResultAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("reason"))
}

type ClusterOperationsAttributes struct {
	ref terra.Reference
}

func (co ClusterOperationsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ClusterOperationsAttributes) InternalWithRef(ref terra.Reference) ClusterOperationsAttributes {
	return ClusterOperationsAttributes{ref: ref}
}

func (co ClusterOperationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ClusterOperationsAttributes) EnableApplicationLogs() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("enable_application_logs"))
}

type ControlPlaneAttributes struct {
	ref terra.Reference
}

func (cp ControlPlaneAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ControlPlaneAttributes) InternalWithRef(ref terra.Reference) ControlPlaneAttributes {
	return ControlPlaneAttributes{ref: ref}
}

func (cp ControlPlaneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ControlPlaneAttributes) ApiServerArgs() terra.ListValue[ControlPlaneApiServerArgsAttributes] {
	return terra.ReferenceAsList[ControlPlaneApiServerArgsAttributes](cp.ref.Append("api_server_args"))
}

func (cp ControlPlaneAttributes) ControlPlaneNodePoolConfig() terra.ListValue[ControlPlaneControlPlaneNodePoolConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneControlPlaneNodePoolConfigAttributes](cp.ref.Append("control_plane_node_pool_config"))
}

type ControlPlaneApiServerArgsAttributes struct {
	ref terra.Reference
}

func (asa ControlPlaneApiServerArgsAttributes) InternalRef() (terra.Reference, error) {
	return asa.ref, nil
}

func (asa ControlPlaneApiServerArgsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneApiServerArgsAttributes {
	return ControlPlaneApiServerArgsAttributes{ref: ref}
}

func (asa ControlPlaneApiServerArgsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asa.ref.InternalTokens()
}

func (asa ControlPlaneApiServerArgsAttributes) Argument() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("argument"))
}

func (asa ControlPlaneApiServerArgsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(asa.ref.Append("value"))
}

type ControlPlaneControlPlaneNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (cpnpc ControlPlaneControlPlaneNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return cpnpc.ref, nil
}

func (cpnpc ControlPlaneControlPlaneNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneControlPlaneNodePoolConfigAttributes {
	return ControlPlaneControlPlaneNodePoolConfigAttributes{ref: ref}
}

func (cpnpc ControlPlaneControlPlaneNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpnpc.ref.InternalTokens()
}

func (cpnpc ControlPlaneControlPlaneNodePoolConfigAttributes) NodePoolConfig() terra.ListValue[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes] {
	return terra.ReferenceAsList[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes](cpnpc.ref.Append("node_pool_config"))
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes struct {
	ref terra.Reference
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return npc.ref, nil
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalWithRef(ref terra.Reference) ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes {
	return ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes{ref: ref}
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return npc.ref.InternalTokens()
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](npc.ref.Append("labels"))
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(npc.ref.Append("operating_system"))
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) NodeConfigs() terra.ListValue[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes] {
	return terra.ReferenceAsList[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes](npc.ref.Append("node_configs"))
}

func (npc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigAttributes) Taints() terra.ListValue[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes] {
	return terra.ReferenceAsList[ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes](npc.ref.Append("taints"))
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes struct {
	ref terra.Reference
}

func (nc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes {
	return ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes{ref: ref}
}

func (nc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nc.ref.Append("labels"))
}

func (nc ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsAttributes) NodeIp() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("node_ip"))
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes struct {
	ref terra.Reference
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalWithRef(ref terra.Reference) ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes {
	return ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes{ref: ref}
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("effect"))
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type LoadBalancerAttributes struct {
	ref terra.Reference
}

func (lb LoadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb LoadBalancerAttributes) InternalWithRef(ref terra.Reference) LoadBalancerAttributes {
	return LoadBalancerAttributes{ref: ref}
}

func (lb LoadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb LoadBalancerAttributes) ManualLbConfig() terra.ListValue[LoadBalancerManualLbConfigAttributes] {
	return terra.ReferenceAsList[LoadBalancerManualLbConfigAttributes](lb.ref.Append("manual_lb_config"))
}

func (lb LoadBalancerAttributes) PortConfig() terra.ListValue[LoadBalancerPortConfigAttributes] {
	return terra.ReferenceAsList[LoadBalancerPortConfigAttributes](lb.ref.Append("port_config"))
}

func (lb LoadBalancerAttributes) VipConfig() terra.ListValue[LoadBalancerVipConfigAttributes] {
	return terra.ReferenceAsList[LoadBalancerVipConfigAttributes](lb.ref.Append("vip_config"))
}

type LoadBalancerManualLbConfigAttributes struct {
	ref terra.Reference
}

func (mlc LoadBalancerManualLbConfigAttributes) InternalRef() (terra.Reference, error) {
	return mlc.ref, nil
}

func (mlc LoadBalancerManualLbConfigAttributes) InternalWithRef(ref terra.Reference) LoadBalancerManualLbConfigAttributes {
	return LoadBalancerManualLbConfigAttributes{ref: ref}
}

func (mlc LoadBalancerManualLbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mlc.ref.InternalTokens()
}

func (mlc LoadBalancerManualLbConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mlc.ref.Append("enabled"))
}

type LoadBalancerPortConfigAttributes struct {
	ref terra.Reference
}

func (pc LoadBalancerPortConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc LoadBalancerPortConfigAttributes) InternalWithRef(ref terra.Reference) LoadBalancerPortConfigAttributes {
	return LoadBalancerPortConfigAttributes{ref: ref}
}

func (pc LoadBalancerPortConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc LoadBalancerPortConfigAttributes) ControlPlaneLoadBalancerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("control_plane_load_balancer_port"))
}

type LoadBalancerVipConfigAttributes struct {
	ref terra.Reference
}

func (vc LoadBalancerVipConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc LoadBalancerVipConfigAttributes) InternalWithRef(ref terra.Reference) LoadBalancerVipConfigAttributes {
	return LoadBalancerVipConfigAttributes{ref: ref}
}

func (vc LoadBalancerVipConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc LoadBalancerVipConfigAttributes) ControlPlaneVip() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("control_plane_vip"))
}

type MaintenanceConfigAttributes struct {
	ref terra.Reference
}

func (mc MaintenanceConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MaintenanceConfigAttributes) InternalWithRef(ref terra.Reference) MaintenanceConfigAttributes {
	return MaintenanceConfigAttributes{ref: ref}
}

func (mc MaintenanceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MaintenanceConfigAttributes) MaintenanceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](mc.ref.Append("maintenance_address_cidr_blocks"))
}

type NetworkConfigAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigAttributes) InternalWithRef(ref terra.Reference) NetworkConfigAttributes {
	return NetworkConfigAttributes{ref: ref}
}

func (nc NetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigAttributes) IslandModeCidr() terra.ListValue[NetworkConfigIslandModeCidrAttributes] {
	return terra.ReferenceAsList[NetworkConfigIslandModeCidrAttributes](nc.ref.Append("island_mode_cidr"))
}

type NetworkConfigIslandModeCidrAttributes struct {
	ref terra.Reference
}

func (imc NetworkConfigIslandModeCidrAttributes) InternalRef() (terra.Reference, error) {
	return imc.ref, nil
}

func (imc NetworkConfigIslandModeCidrAttributes) InternalWithRef(ref terra.Reference) NetworkConfigIslandModeCidrAttributes {
	return NetworkConfigIslandModeCidrAttributes{ref: ref}
}

func (imc NetworkConfigIslandModeCidrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imc.ref.InternalTokens()
}

func (imc NetworkConfigIslandModeCidrAttributes) PodAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("pod_address_cidr_blocks"))
}

func (imc NetworkConfigIslandModeCidrAttributes) ServiceAddressCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](imc.ref.Append("service_address_cidr_blocks"))
}

type NodeAccessConfigAttributes struct {
	ref terra.Reference
}

func (nac NodeAccessConfigAttributes) InternalRef() (terra.Reference, error) {
	return nac.ref, nil
}

func (nac NodeAccessConfigAttributes) InternalWithRef(ref terra.Reference) NodeAccessConfigAttributes {
	return NodeAccessConfigAttributes{ref: ref}
}

func (nac NodeAccessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nac.ref.InternalTokens()
}

func (nac NodeAccessConfigAttributes) LoginUser() terra.StringValue {
	return terra.ReferenceAsString(nac.ref.Append("login_user"))
}

type NodeConfigAttributes struct {
	ref terra.Reference
}

func (nc NodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NodeConfigAttributes) InternalWithRef(ref terra.Reference) NodeConfigAttributes {
	return NodeConfigAttributes{ref: ref}
}

func (nc NodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NodeConfigAttributes) MaxPodsPerNode() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("max_pods_per_node"))
}

type ProxyAttributes struct {
	ref terra.Reference
}

func (p ProxyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProxyAttributes) InternalWithRef(ref terra.Reference) ProxyAttributes {
	return ProxyAttributes{ref: ref}
}

func (p ProxyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ProxyAttributes) NoProxy() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("no_proxy"))
}

func (p ProxyAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("uri"))
}

type SecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc SecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SecurityConfigAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAttributes {
	return SecurityConfigAttributes{ref: ref}
}

func (sc SecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SecurityConfigAttributes) Authorization() terra.ListValue[SecurityConfigAuthorizationAttributes] {
	return terra.ReferenceAsList[SecurityConfigAuthorizationAttributes](sc.ref.Append("authorization"))
}

type SecurityConfigAuthorizationAttributes struct {
	ref terra.Reference
}

func (a SecurityConfigAuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SecurityConfigAuthorizationAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAuthorizationAttributes {
	return SecurityConfigAuthorizationAttributes{ref: ref}
}

func (a SecurityConfigAuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SecurityConfigAuthorizationAttributes) AdminUsers() terra.ListValue[SecurityConfigAuthorizationAdminUsersAttributes] {
	return terra.ReferenceAsList[SecurityConfigAuthorizationAdminUsersAttributes](a.ref.Append("admin_users"))
}

type SecurityConfigAuthorizationAdminUsersAttributes struct {
	ref terra.Reference
}

func (au SecurityConfigAuthorizationAdminUsersAttributes) InternalRef() (terra.Reference, error) {
	return au.ref, nil
}

func (au SecurityConfigAuthorizationAdminUsersAttributes) InternalWithRef(ref terra.Reference) SecurityConfigAuthorizationAdminUsersAttributes {
	return SecurityConfigAuthorizationAdminUsersAttributes{ref: ref}
}

func (au SecurityConfigAuthorizationAdminUsersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return au.ref.InternalTokens()
}

func (au SecurityConfigAuthorizationAdminUsersAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(au.ref.Append("username"))
}

type StorageAttributes struct {
	ref terra.Reference
}

func (s StorageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StorageAttributes) InternalWithRef(ref terra.Reference) StorageAttributes {
	return StorageAttributes{ref: ref}
}

func (s StorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StorageAttributes) LvpNodeMountsConfig() terra.ListValue[StorageLvpNodeMountsConfigAttributes] {
	return terra.ReferenceAsList[StorageLvpNodeMountsConfigAttributes](s.ref.Append("lvp_node_mounts_config"))
}

func (s StorageAttributes) LvpShareConfig() terra.ListValue[StorageLvpShareConfigAttributes] {
	return terra.ReferenceAsList[StorageLvpShareConfigAttributes](s.ref.Append("lvp_share_config"))
}

type StorageLvpNodeMountsConfigAttributes struct {
	ref terra.Reference
}

func (lnmc StorageLvpNodeMountsConfigAttributes) InternalRef() (terra.Reference, error) {
	return lnmc.ref, nil
}

func (lnmc StorageLvpNodeMountsConfigAttributes) InternalWithRef(ref terra.Reference) StorageLvpNodeMountsConfigAttributes {
	return StorageLvpNodeMountsConfigAttributes{ref: ref}
}

func (lnmc StorageLvpNodeMountsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnmc.ref.InternalTokens()
}

func (lnmc StorageLvpNodeMountsConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("path"))
}

func (lnmc StorageLvpNodeMountsConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lnmc.ref.Append("storage_class"))
}

type StorageLvpShareConfigAttributes struct {
	ref terra.Reference
}

func (lsc StorageLvpShareConfigAttributes) InternalRef() (terra.Reference, error) {
	return lsc.ref, nil
}

func (lsc StorageLvpShareConfigAttributes) InternalWithRef(ref terra.Reference) StorageLvpShareConfigAttributes {
	return StorageLvpShareConfigAttributes{ref: ref}
}

func (lsc StorageLvpShareConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsc.ref.InternalTokens()
}

func (lsc StorageLvpShareConfigAttributes) SharedPathPvCount() terra.NumberValue {
	return terra.ReferenceAsNumber(lsc.ref.Append("shared_path_pv_count"))
}

func (lsc StorageLvpShareConfigAttributes) LvpConfig() terra.ListValue[StorageLvpShareConfigLvpConfigAttributes] {
	return terra.ReferenceAsList[StorageLvpShareConfigLvpConfigAttributes](lsc.ref.Append("lvp_config"))
}

type StorageLvpShareConfigLvpConfigAttributes struct {
	ref terra.Reference
}

func (lc StorageLvpShareConfigLvpConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc StorageLvpShareConfigLvpConfigAttributes) InternalWithRef(ref terra.Reference) StorageLvpShareConfigLvpConfigAttributes {
	return StorageLvpShareConfigLvpConfigAttributes{ref: ref}
}

func (lc StorageLvpShareConfigLvpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc StorageLvpShareConfigLvpConfigAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("path"))
}

func (lc StorageLvpShareConfigLvpConfigAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("storage_class"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FleetState struct {
	Membership string `json:"membership"`
}

type StatusState struct {
	ErrorMessage string                  `json:"error_message"`
	Conditions   []StatusConditionsState `json:"conditions"`
}

type StatusConditionsState struct {
	LastTransitionTime string `json:"last_transition_time"`
	Message            string `json:"message"`
	Reason             string `json:"reason"`
	State              string `json:"state"`
	Type               string `json:"type"`
}

type ValidationCheckState struct {
	Options  string                       `json:"options"`
	Scenario string                       `json:"scenario"`
	Status   []ValidationCheckStatusState `json:"status"`
}

type ValidationCheckStatusState struct {
	Result []ValidationCheckStatusResultState `json:"result"`
}

type ValidationCheckStatusResultState struct {
	Category    string `json:"category"`
	Description string `json:"description"`
	Details     string `json:"details"`
	Options     string `json:"options"`
	Reason      string `json:"reason"`
}

type ClusterOperationsState struct {
	EnableApplicationLogs bool `json:"enable_application_logs"`
}

type ControlPlaneState struct {
	ApiServerArgs              []ControlPlaneApiServerArgsState              `json:"api_server_args"`
	ControlPlaneNodePoolConfig []ControlPlaneControlPlaneNodePoolConfigState `json:"control_plane_node_pool_config"`
}

type ControlPlaneApiServerArgsState struct {
	Argument string `json:"argument"`
	Value    string `json:"value"`
}

type ControlPlaneControlPlaneNodePoolConfigState struct {
	NodePoolConfig []ControlPlaneControlPlaneNodePoolConfigNodePoolConfigState `json:"node_pool_config"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigState struct {
	Labels          map[string]string                                                      `json:"labels"`
	OperatingSystem string                                                                 `json:"operating_system"`
	NodeConfigs     []ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsState `json:"node_configs"`
	Taints          []ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsState      `json:"taints"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsState struct {
	Labels map[string]string `json:"labels"`
	NodeIp string            `json:"node_ip"`
}

type ControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsState struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type LoadBalancerState struct {
	ManualLbConfig []LoadBalancerManualLbConfigState `json:"manual_lb_config"`
	PortConfig     []LoadBalancerPortConfigState     `json:"port_config"`
	VipConfig      []LoadBalancerVipConfigState      `json:"vip_config"`
}

type LoadBalancerManualLbConfigState struct {
	Enabled bool `json:"enabled"`
}

type LoadBalancerPortConfigState struct {
	ControlPlaneLoadBalancerPort float64 `json:"control_plane_load_balancer_port"`
}

type LoadBalancerVipConfigState struct {
	ControlPlaneVip string `json:"control_plane_vip"`
}

type MaintenanceConfigState struct {
	MaintenanceAddressCidrBlocks []string `json:"maintenance_address_cidr_blocks"`
}

type NetworkConfigState struct {
	IslandModeCidr []NetworkConfigIslandModeCidrState `json:"island_mode_cidr"`
}

type NetworkConfigIslandModeCidrState struct {
	PodAddressCidrBlocks     []string `json:"pod_address_cidr_blocks"`
	ServiceAddressCidrBlocks []string `json:"service_address_cidr_blocks"`
}

type NodeAccessConfigState struct {
	LoginUser string `json:"login_user"`
}

type NodeConfigState struct {
	MaxPodsPerNode float64 `json:"max_pods_per_node"`
}

type ProxyState struct {
	NoProxy []string `json:"no_proxy"`
	Uri     string   `json:"uri"`
}

type SecurityConfigState struct {
	Authorization []SecurityConfigAuthorizationState `json:"authorization"`
}

type SecurityConfigAuthorizationState struct {
	AdminUsers []SecurityConfigAuthorizationAdminUsersState `json:"admin_users"`
}

type SecurityConfigAuthorizationAdminUsersState struct {
	Username string `json:"username"`
}

type StorageState struct {
	LvpNodeMountsConfig []StorageLvpNodeMountsConfigState `json:"lvp_node_mounts_config"`
	LvpShareConfig      []StorageLvpShareConfigState      `json:"lvp_share_config"`
}

type StorageLvpNodeMountsConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type StorageLvpShareConfigState struct {
	SharedPathPvCount float64                               `json:"shared_path_pv_count"`
	LvpConfig         []StorageLvpShareConfigLvpConfigState `json:"lvp_config"`
}

type StorageLvpShareConfigLvpConfigState struct {
	Path         string `json:"path"`
	StorageClass string `json:"storage_class"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
