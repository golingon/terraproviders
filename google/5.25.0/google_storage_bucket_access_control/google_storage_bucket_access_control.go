// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_bucket_access_control

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_bucket_access_control.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageBucketAccessControlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsbac *Resource) Type() string {
	return "google_storage_bucket_access_control"
}

// LocalName returns the local name for [Resource].
func (gsbac *Resource) LocalName() string {
	return gsbac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsbac *Resource) Configuration() interface{} {
	return gsbac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsbac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsbac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsbac *Resource) Dependencies() terra.Dependencies {
	return gsbac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsbac *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsbac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsbac *Resource) Attributes() googleStorageBucketAccessControlAttributes {
	return googleStorageBucketAccessControlAttributes{ref: terra.ReferenceResource(gsbac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsbac *Resource) ImportState(state io.Reader) error {
	gsbac.state = &googleStorageBucketAccessControlState{}
	if err := json.NewDecoder(state).Decode(gsbac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsbac.Type(), gsbac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsbac *Resource) State() (*googleStorageBucketAccessControlState, bool) {
	return gsbac.state, gsbac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsbac *Resource) StateMust() *googleStorageBucketAccessControlState {
	if gsbac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsbac.Type(), gsbac.LocalName()))
	}
	return gsbac.state
}

// Args contains the configurations for google_storage_bucket_access_control.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Entity: string, required
	Entity terra.StringValue `hcl:"entity,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleStorageBucketAccessControlAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("bucket"))
}

// Domain returns a reference to field domain of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("domain"))
}

// Email returns a reference to field email of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("email"))
}

// Entity returns a reference to field entity of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Entity() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("entity"))
}

// Id returns a reference to field id of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("id"))
}

// Role returns a reference to field role of google_storage_bucket_access_control.
func (gsbac googleStorageBucketAccessControlAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gsbac.ref.Append("role"))
}

func (gsbac googleStorageBucketAccessControlAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsbac.ref.Append("timeouts"))
}

type googleStorageBucketAccessControlState struct {
	Bucket   string         `json:"bucket"`
	Domain   string         `json:"domain"`
	Email    string         `json:"email"`
	Entity   string         `json:"entity"`
	Id       string         `json:"id"`
	Role     string         `json:"role"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
