// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_migration_center_preference_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VirtualMachinePreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// SizingOptimizationStrategy: string, optional
	SizingOptimizationStrategy terra.StringValue `hcl:"sizing_optimization_strategy,attr"`
	// TargetProduct: string, optional
	TargetProduct terra.StringValue `hcl:"target_product,attr"`
	// VirtualMachinePreferencesComputeEnginePreferences: optional
	ComputeEnginePreferences *VirtualMachinePreferencesComputeEnginePreferences `hcl:"compute_engine_preferences,block"`
	// VirtualMachinePreferencesRegionPreferences: optional
	RegionPreferences *VirtualMachinePreferencesRegionPreferences `hcl:"region_preferences,block"`
	// VirtualMachinePreferencesSoleTenancyPreferences: optional
	SoleTenancyPreferences *VirtualMachinePreferencesSoleTenancyPreferences `hcl:"sole_tenancy_preferences,block"`
	// VirtualMachinePreferencesVmwareEnginePreferences: optional
	VmwareEnginePreferences *VirtualMachinePreferencesVmwareEnginePreferences `hcl:"vmware_engine_preferences,block"`
}

type VirtualMachinePreferencesComputeEnginePreferences struct {
	// LicenseType: string, optional
	LicenseType terra.StringValue `hcl:"license_type,attr"`
	// VirtualMachinePreferencesComputeEnginePreferencesMachinePreferences: optional
	MachinePreferences *VirtualMachinePreferencesComputeEnginePreferencesMachinePreferences `hcl:"machine_preferences,block"`
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferences struct {
	// VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeries: min=0
	AllowedMachineSeries []VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeries `hcl:"allowed_machine_series,block" validate:"min=0"`
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeries struct {
	// Code: string, optional
	Code terra.StringValue `hcl:"code,attr"`
}

type VirtualMachinePreferencesRegionPreferences struct {
	// PreferredRegions: list of string, optional
	PreferredRegions terra.ListValue[terra.StringValue] `hcl:"preferred_regions,attr"`
}

type VirtualMachinePreferencesSoleTenancyPreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// CpuOvercommitRatio: number, optional
	CpuOvercommitRatio terra.NumberValue `hcl:"cpu_overcommit_ratio,attr"`
	// HostMaintenancePolicy: string, optional
	HostMaintenancePolicy terra.StringValue `hcl:"host_maintenance_policy,attr"`
	// VirtualMachinePreferencesSoleTenancyPreferencesNodeTypes: min=0
	NodeTypes []VirtualMachinePreferencesSoleTenancyPreferencesNodeTypes `hcl:"node_types,block" validate:"min=0"`
}

type VirtualMachinePreferencesSoleTenancyPreferencesNodeTypes struct {
	// NodeName: string, optional
	NodeName terra.StringValue `hcl:"node_name,attr"`
}

type VirtualMachinePreferencesVmwareEnginePreferences struct {
	// CommitmentPlan: string, optional
	CommitmentPlan terra.StringValue `hcl:"commitment_plan,attr"`
	// CpuOvercommitRatio: number, optional
	CpuOvercommitRatio terra.NumberValue `hcl:"cpu_overcommit_ratio,attr"`
	// MemoryOvercommitRatio: number, optional
	MemoryOvercommitRatio terra.NumberValue `hcl:"memory_overcommit_ratio,attr"`
	// StorageDeduplicationCompressionRatio: number, optional
	StorageDeduplicationCompressionRatio terra.NumberValue `hcl:"storage_deduplication_compression_ratio,attr"`
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VirtualMachinePreferencesAttributes struct {
	ref terra.Reference
}

func (vmp VirtualMachinePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return vmp.ref, nil
}

func (vmp VirtualMachinePreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesAttributes {
	return VirtualMachinePreferencesAttributes{ref: ref}
}

func (vmp VirtualMachinePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vmp.ref.InternalTokens()
}

func (vmp VirtualMachinePreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("commitment_plan"))
}

func (vmp VirtualMachinePreferencesAttributes) SizingOptimizationStrategy() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("sizing_optimization_strategy"))
}

func (vmp VirtualMachinePreferencesAttributes) TargetProduct() terra.StringValue {
	return terra.ReferenceAsString(vmp.ref.Append("target_product"))
}

func (vmp VirtualMachinePreferencesAttributes) ComputeEnginePreferences() terra.ListValue[VirtualMachinePreferencesComputeEnginePreferencesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesComputeEnginePreferencesAttributes](vmp.ref.Append("compute_engine_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) RegionPreferences() terra.ListValue[VirtualMachinePreferencesRegionPreferencesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesRegionPreferencesAttributes](vmp.ref.Append("region_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) SoleTenancyPreferences() terra.ListValue[VirtualMachinePreferencesSoleTenancyPreferencesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesSoleTenancyPreferencesAttributes](vmp.ref.Append("sole_tenancy_preferences"))
}

func (vmp VirtualMachinePreferencesAttributes) VmwareEnginePreferences() terra.ListValue[VirtualMachinePreferencesVmwareEnginePreferencesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesVmwareEnginePreferencesAttributes](vmp.ref.Append("vmware_engine_preferences"))
}

type VirtualMachinePreferencesComputeEnginePreferencesAttributes struct {
	ref terra.Reference
}

func (cep VirtualMachinePreferencesComputeEnginePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return cep.ref, nil
}

func (cep VirtualMachinePreferencesComputeEnginePreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesComputeEnginePreferencesAttributes {
	return VirtualMachinePreferencesComputeEnginePreferencesAttributes{ref: ref}
}

func (cep VirtualMachinePreferencesComputeEnginePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cep.ref.InternalTokens()
}

func (cep VirtualMachinePreferencesComputeEnginePreferencesAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(cep.ref.Append("license_type"))
}

func (cep VirtualMachinePreferencesComputeEnginePreferencesAttributes) MachinePreferences() terra.ListValue[VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes](cep.ref.Append("machine_preferences"))
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes struct {
	ref terra.Reference
}

func (mp VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes {
	return VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes{ref: ref}
}

func (mp VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAttributes) AllowedMachineSeries() terra.ListValue[VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes](mp.ref.Append("allowed_machine_series"))
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes struct {
	ref terra.Reference
}

func (ams VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes) InternalRef() (terra.Reference, error) {
	return ams.ref, nil
}

func (ams VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes {
	return VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes{ref: ref}
}

func (ams VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ams.ref.InternalTokens()
}

func (ams VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(ams.ref.Append("code"))
}

type VirtualMachinePreferencesRegionPreferencesAttributes struct {
	ref terra.Reference
}

func (rp VirtualMachinePreferencesRegionPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp VirtualMachinePreferencesRegionPreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesRegionPreferencesAttributes {
	return VirtualMachinePreferencesRegionPreferencesAttributes{ref: ref}
}

func (rp VirtualMachinePreferencesRegionPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp VirtualMachinePreferencesRegionPreferencesAttributes) PreferredRegions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rp.ref.Append("preferred_regions"))
}

type VirtualMachinePreferencesSoleTenancyPreferencesAttributes struct {
	ref terra.Reference
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return stp.ref, nil
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesSoleTenancyPreferencesAttributes {
	return VirtualMachinePreferencesSoleTenancyPreferencesAttributes{ref: ref}
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return stp.ref.InternalTokens()
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(stp.ref.Append("commitment_plan"))
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) CpuOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(stp.ref.Append("cpu_overcommit_ratio"))
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) HostMaintenancePolicy() terra.StringValue {
	return terra.ReferenceAsString(stp.ref.Append("host_maintenance_policy"))
}

func (stp VirtualMachinePreferencesSoleTenancyPreferencesAttributes) NodeTypes() terra.ListValue[VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes] {
	return terra.ReferenceAsList[VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes](stp.ref.Append("node_types"))
}

type VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes struct {
	ref terra.Reference
}

func (nt VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes {
	return VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes{ref: ref}
}

func (nt VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesAttributes) NodeName() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("node_name"))
}

type VirtualMachinePreferencesVmwareEnginePreferencesAttributes struct {
	ref terra.Reference
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) InternalRef() (terra.Reference, error) {
	return vep.ref, nil
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) InternalWithRef(ref terra.Reference) VirtualMachinePreferencesVmwareEnginePreferencesAttributes {
	return VirtualMachinePreferencesVmwareEnginePreferencesAttributes{ref: ref}
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vep.ref.InternalTokens()
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) CommitmentPlan() terra.StringValue {
	return terra.ReferenceAsString(vep.ref.Append("commitment_plan"))
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) CpuOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("cpu_overcommit_ratio"))
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) MemoryOvercommitRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("memory_overcommit_ratio"))
}

func (vep VirtualMachinePreferencesVmwareEnginePreferencesAttributes) StorageDeduplicationCompressionRatio() terra.NumberValue {
	return terra.ReferenceAsNumber(vep.ref.Append("storage_deduplication_compression_ratio"))
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VirtualMachinePreferencesState struct {
	CommitmentPlan             string                                                   `json:"commitment_plan"`
	SizingOptimizationStrategy string                                                   `json:"sizing_optimization_strategy"`
	TargetProduct              string                                                   `json:"target_product"`
	ComputeEnginePreferences   []VirtualMachinePreferencesComputeEnginePreferencesState `json:"compute_engine_preferences"`
	RegionPreferences          []VirtualMachinePreferencesRegionPreferencesState        `json:"region_preferences"`
	SoleTenancyPreferences     []VirtualMachinePreferencesSoleTenancyPreferencesState   `json:"sole_tenancy_preferences"`
	VmwareEnginePreferences    []VirtualMachinePreferencesVmwareEnginePreferencesState  `json:"vmware_engine_preferences"`
}

type VirtualMachinePreferencesComputeEnginePreferencesState struct {
	LicenseType        string                                                                     `json:"license_type"`
	MachinePreferences []VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesState `json:"machine_preferences"`
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesState struct {
	AllowedMachineSeries []VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesState `json:"allowed_machine_series"`
}

type VirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesState struct {
	Code string `json:"code"`
}

type VirtualMachinePreferencesRegionPreferencesState struct {
	PreferredRegions []string `json:"preferred_regions"`
}

type VirtualMachinePreferencesSoleTenancyPreferencesState struct {
	CommitmentPlan        string                                                          `json:"commitment_plan"`
	CpuOvercommitRatio    float64                                                         `json:"cpu_overcommit_ratio"`
	HostMaintenancePolicy string                                                          `json:"host_maintenance_policy"`
	NodeTypes             []VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesState `json:"node_types"`
}

type VirtualMachinePreferencesSoleTenancyPreferencesNodeTypesState struct {
	NodeName string `json:"node_name"`
}

type VirtualMachinePreferencesVmwareEnginePreferencesState struct {
	CommitmentPlan                       string  `json:"commitment_plan"`
	CpuOvercommitRatio                   float64 `json:"cpu_overcommit_ratio"`
	MemoryOvercommitRatio                float64 `json:"memory_overcommit_ratio"`
	StorageDeduplicationCompressionRatio float64 `json:"storage_deduplication_compression_ratio"`
}
