// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_healthcare_dataset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_healthcare_dataset.
type Resource struct {
	Name      string
	Args      Args
	state     *googleHealthcareDatasetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ghd *Resource) Type() string {
	return "google_healthcare_dataset"
}

// LocalName returns the local name for [Resource].
func (ghd *Resource) LocalName() string {
	return ghd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ghd *Resource) Configuration() interface{} {
	return ghd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ghd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ghd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ghd *Resource) Dependencies() terra.Dependencies {
	return ghd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ghd *Resource) LifecycleManagement() *terra.Lifecycle {
	return ghd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ghd *Resource) Attributes() googleHealthcareDatasetAttributes {
	return googleHealthcareDatasetAttributes{ref: terra.ReferenceResource(ghd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ghd *Resource) ImportState(state io.Reader) error {
	ghd.state = &googleHealthcareDatasetState{}
	if err := json.NewDecoder(state).Decode(ghd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghd.Type(), ghd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ghd *Resource) State() (*googleHealthcareDatasetState, bool) {
	return ghd.state, ghd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ghd *Resource) StateMust() *googleHealthcareDatasetState {
	if ghd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghd.Type(), ghd.LocalName()))
	}
	return ghd.state
}

// Args contains the configurations for google_healthcare_dataset.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleHealthcareDatasetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("id"))
}

// Location returns a reference to field location of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("location"))
}

// Name returns a reference to field name of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("name"))
}

// Project returns a reference to field project of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("project"))
}

// SelfLink returns a reference to field self_link of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("self_link"))
}

// TimeZone returns a reference to field time_zone of google_healthcare_dataset.
func (ghd googleHealthcareDatasetAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(ghd.ref.Append("time_zone"))
}

func (ghd googleHealthcareDatasetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ghd.ref.Append("timeouts"))
}

type googleHealthcareDatasetState struct {
	Id       string         `json:"id"`
	Location string         `json:"location"`
	Name     string         `json:"name"`
	Project  string         `json:"project"`
	SelfLink string         `json:"self_link"`
	TimeZone string         `json:"time_zone"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
