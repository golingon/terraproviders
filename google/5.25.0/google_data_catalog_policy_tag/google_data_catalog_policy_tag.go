// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_data_catalog_policy_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_data_catalog_policy_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataCatalogPolicyTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdcpt *Resource) Type() string {
	return "google_data_catalog_policy_tag"
}

// LocalName returns the local name for [Resource].
func (gdcpt *Resource) LocalName() string {
	return gdcpt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdcpt *Resource) Configuration() interface{} {
	return gdcpt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdcpt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdcpt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdcpt *Resource) Dependencies() terra.Dependencies {
	return gdcpt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdcpt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdcpt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdcpt *Resource) Attributes() googleDataCatalogPolicyTagAttributes {
	return googleDataCatalogPolicyTagAttributes{ref: terra.ReferenceResource(gdcpt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdcpt *Resource) ImportState(state io.Reader) error {
	gdcpt.state = &googleDataCatalogPolicyTagState{}
	if err := json.NewDecoder(state).Decode(gdcpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdcpt.Type(), gdcpt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdcpt *Resource) State() (*googleDataCatalogPolicyTagState, bool) {
	return gdcpt.state, gdcpt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdcpt *Resource) StateMust() *googleDataCatalogPolicyTagState {
	if gdcpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdcpt.Type(), gdcpt.LocalName()))
	}
	return gdcpt.state
}

// Args contains the configurations for google_data_catalog_policy_tag.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ParentPolicyTag: string, optional
	ParentPolicyTag terra.StringValue `hcl:"parent_policy_tag,attr"`
	// Taxonomy: string, required
	Taxonomy terra.StringValue `hcl:"taxonomy,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleDataCatalogPolicyTagAttributes struct {
	ref terra.Reference
}

// ChildPolicyTags returns a reference to field child_policy_tags of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) ChildPolicyTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gdcpt.ref.Append("child_policy_tags"))
}

// Description returns a reference to field description of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("display_name"))
}

// Id returns a reference to field id of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("id"))
}

// Name returns a reference to field name of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("name"))
}

// ParentPolicyTag returns a reference to field parent_policy_tag of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) ParentPolicyTag() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("parent_policy_tag"))
}

// Taxonomy returns a reference to field taxonomy of google_data_catalog_policy_tag.
func (gdcpt googleDataCatalogPolicyTagAttributes) Taxonomy() terra.StringValue {
	return terra.ReferenceAsString(gdcpt.ref.Append("taxonomy"))
}

func (gdcpt googleDataCatalogPolicyTagAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdcpt.ref.Append("timeouts"))
}

type googleDataCatalogPolicyTagState struct {
	ChildPolicyTags []string       `json:"child_policy_tags"`
	Description     string         `json:"description"`
	DisplayName     string         `json:"display_name"`
	Id              string         `json:"id"`
	Name            string         `json:"name"`
	ParentPolicyTag string         `json:"parent_policy_tag"`
	Taxonomy        string         `json:"taxonomy"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
