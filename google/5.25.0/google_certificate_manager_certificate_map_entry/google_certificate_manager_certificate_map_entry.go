// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_certificate_manager_certificate_map_entry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_certificate_manager_certificate_map_entry.
type Resource struct {
	Name      string
	Args      Args
	state     *googleCertificateManagerCertificateMapEntryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcmcme *Resource) Type() string {
	return "google_certificate_manager_certificate_map_entry"
}

// LocalName returns the local name for [Resource].
func (gcmcme *Resource) LocalName() string {
	return gcmcme.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcmcme *Resource) Configuration() interface{} {
	return gcmcme.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcmcme *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcmcme)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcmcme *Resource) Dependencies() terra.Dependencies {
	return gcmcme.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcmcme *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcmcme.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcmcme *Resource) Attributes() googleCertificateManagerCertificateMapEntryAttributes {
	return googleCertificateManagerCertificateMapEntryAttributes{ref: terra.ReferenceResource(gcmcme)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcmcme *Resource) ImportState(state io.Reader) error {
	gcmcme.state = &googleCertificateManagerCertificateMapEntryState{}
	if err := json.NewDecoder(state).Decode(gcmcme.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcmcme.Type(), gcmcme.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcmcme *Resource) State() (*googleCertificateManagerCertificateMapEntryState, bool) {
	return gcmcme.state, gcmcme.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcmcme *Resource) StateMust() *googleCertificateManagerCertificateMapEntryState {
	if gcmcme.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcmcme.Type(), gcmcme.LocalName()))
	}
	return gcmcme.state
}

// Args contains the configurations for google_certificate_manager_certificate_map_entry.
type Args struct {
	// Certificates: list of string, required
	Certificates terra.ListValue[terra.StringValue] `hcl:"certificates,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Map: string, required
	Map terra.StringValue `hcl:"map,attr" validate:"required"`
	// Matcher: string, optional
	Matcher terra.StringValue `hcl:"matcher,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleCertificateManagerCertificateMapEntryAttributes struct {
	ref terra.Reference
}

// Certificates returns a reference to field certificates of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Certificates() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gcmcme.ref.Append("certificates"))
}

// CreateTime returns a reference to field create_time of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("create_time"))
}

// Description returns a reference to field description of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcme.ref.Append("effective_labels"))
}

// Hostname returns a reference to field hostname of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("hostname"))
}

// Id returns a reference to field id of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("id"))
}

// Labels returns a reference to field labels of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcme.ref.Append("labels"))
}

// Map returns a reference to field map of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Map() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("map"))
}

// Matcher returns a reference to field matcher of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Matcher() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("matcher"))
}

// Name returns a reference to field name of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("name"))
}

// Project returns a reference to field project of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("project"))
}

// State returns a reference to field state of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gcmcme.ref.Append("terraform_labels"))
}

// UpdateTime returns a reference to field update_time of google_certificate_manager_certificate_map_entry.
func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gcmcme.ref.Append("update_time"))
}

func (gcmcme googleCertificateManagerCertificateMapEntryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcmcme.ref.Append("timeouts"))
}

type googleCertificateManagerCertificateMapEntryState struct {
	Certificates    []string          `json:"certificates"`
	CreateTime      string            `json:"create_time"`
	Description     string            `json:"description"`
	EffectiveLabels map[string]string `json:"effective_labels"`
	Hostname        string            `json:"hostname"`
	Id              string            `json:"id"`
	Labels          map[string]string `json:"labels"`
	Map             string            `json:"map"`
	Matcher         string            `json:"matcher"`
	Name            string            `json:"name"`
	Project         string            `json:"project"`
	State           string            `json:"state"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	UpdateTime      string            `json:"update_time"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
