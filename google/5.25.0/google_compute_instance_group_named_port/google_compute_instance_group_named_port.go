// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_instance_group_named_port

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_instance_group_named_port.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeInstanceGroupNamedPortState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcignp *Resource) Type() string {
	return "google_compute_instance_group_named_port"
}

// LocalName returns the local name for [Resource].
func (gcignp *Resource) LocalName() string {
	return gcignp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcignp *Resource) Configuration() interface{} {
	return gcignp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcignp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcignp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcignp *Resource) Dependencies() terra.Dependencies {
	return gcignp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcignp *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcignp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcignp *Resource) Attributes() googleComputeInstanceGroupNamedPortAttributes {
	return googleComputeInstanceGroupNamedPortAttributes{ref: terra.ReferenceResource(gcignp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcignp *Resource) ImportState(state io.Reader) error {
	gcignp.state = &googleComputeInstanceGroupNamedPortState{}
	if err := json.NewDecoder(state).Decode(gcignp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcignp.Type(), gcignp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcignp *Resource) State() (*googleComputeInstanceGroupNamedPortState, bool) {
	return gcignp.state, gcignp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcignp *Resource) StateMust() *googleComputeInstanceGroupNamedPortState {
	if gcignp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcignp.Type(), gcignp.LocalName()))
	}
	return gcignp.state
}

// Args contains the configurations for google_compute_instance_group_named_port.
type Args struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeInstanceGroupNamedPortAttributes struct {
	ref terra.Reference
}

// Group returns a reference to field group of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(gcignp.ref.Append("group"))
}

// Id returns a reference to field id of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcignp.ref.Append("id"))
}

// Name returns a reference to field name of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcignp.ref.Append("name"))
}

// Port returns a reference to field port of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gcignp.ref.Append("port"))
}

// Project returns a reference to field project of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcignp.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_instance_group_named_port.
func (gcignp googleComputeInstanceGroupNamedPortAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcignp.ref.Append("zone"))
}

func (gcignp googleComputeInstanceGroupNamedPortAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcignp.ref.Append("timeouts"))
}

type googleComputeInstanceGroupNamedPortState struct {
	Group    string         `json:"group"`
	Id       string         `json:"id"`
	Name     string         `json:"name"`
	Port     float64        `json:"port"`
	Project  string         `json:"project"`
	Zone     string         `json:"zone"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
