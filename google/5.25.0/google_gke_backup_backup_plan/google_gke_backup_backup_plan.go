// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_backup_backup_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_backup_backup_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeBackupBackupPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ggbbp *Resource) Type() string {
	return "google_gke_backup_backup_plan"
}

// LocalName returns the local name for [Resource].
func (ggbbp *Resource) LocalName() string {
	return ggbbp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ggbbp *Resource) Configuration() interface{} {
	return ggbbp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ggbbp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ggbbp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ggbbp *Resource) Dependencies() terra.Dependencies {
	return ggbbp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ggbbp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ggbbp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ggbbp *Resource) Attributes() googleGkeBackupBackupPlanAttributes {
	return googleGkeBackupBackupPlanAttributes{ref: terra.ReferenceResource(ggbbp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ggbbp *Resource) ImportState(state io.Reader) error {
	ggbbp.state = &googleGkeBackupBackupPlanState{}
	if err := json.NewDecoder(state).Decode(ggbbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggbbp.Type(), ggbbp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ggbbp *Resource) State() (*googleGkeBackupBackupPlanState, bool) {
	return ggbbp.state, ggbbp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ggbbp *Resource) StateMust() *googleGkeBackupBackupPlanState {
	if ggbbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggbbp.Type(), ggbbp.LocalName()))
	}
	return ggbbp.state
}

// Args contains the configurations for google_gke_backup_backup_plan.
type Args struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Deactivated: bool, optional
	Deactivated terra.BoolValue `hcl:"deactivated,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// BackupConfig: optional
	BackupConfig *BackupConfig `hcl:"backup_config,block"`
	// BackupSchedule: optional
	BackupSchedule *BackupSchedule `hcl:"backup_schedule,block"`
	// RetentionPolicy: optional
	RetentionPolicy *RetentionPolicy `hcl:"retention_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeBackupBackupPlanAttributes struct {
	ref terra.Reference
}

// Cluster returns a reference to field cluster of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("cluster"))
}

// Deactivated returns a reference to field deactivated of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Deactivated() terra.BoolValue {
	return terra.ReferenceAsBool(ggbbp.ref.Append("deactivated"))
}

// Description returns a reference to field description of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbbp.ref.Append("effective_labels"))
}

// Etag returns a reference to field etag of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("etag"))
}

// Id returns a reference to field id of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbbp.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("location"))
}

// Name returns a reference to field name of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("project"))
}

// ProtectedPodCount returns a reference to field protected_pod_count of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) ProtectedPodCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ggbbp.ref.Append("protected_pod_count"))
}

// State returns a reference to field state of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("state"))
}

// StateReason returns a reference to field state_reason of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("state_reason"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbbp.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_backup_backup_plan.
func (ggbbp googleGkeBackupBackupPlanAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ggbbp.ref.Append("uid"))
}

func (ggbbp googleGkeBackupBackupPlanAttributes) BackupConfig() terra.ListValue[BackupConfigAttributes] {
	return terra.ReferenceAsList[BackupConfigAttributes](ggbbp.ref.Append("backup_config"))
}

func (ggbbp googleGkeBackupBackupPlanAttributes) BackupSchedule() terra.ListValue[BackupScheduleAttributes] {
	return terra.ReferenceAsList[BackupScheduleAttributes](ggbbp.ref.Append("backup_schedule"))
}

func (ggbbp googleGkeBackupBackupPlanAttributes) RetentionPolicy() terra.ListValue[RetentionPolicyAttributes] {
	return terra.ReferenceAsList[RetentionPolicyAttributes](ggbbp.ref.Append("retention_policy"))
}

func (ggbbp googleGkeBackupBackupPlanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ggbbp.ref.Append("timeouts"))
}

type googleGkeBackupBackupPlanState struct {
	Cluster           string                 `json:"cluster"`
	Deactivated       bool                   `json:"deactivated"`
	Description       string                 `json:"description"`
	EffectiveLabels   map[string]string      `json:"effective_labels"`
	Etag              string                 `json:"etag"`
	Id                string                 `json:"id"`
	Labels            map[string]string      `json:"labels"`
	Location          string                 `json:"location"`
	Name              string                 `json:"name"`
	Project           string                 `json:"project"`
	ProtectedPodCount float64                `json:"protected_pod_count"`
	State             string                 `json:"state"`
	StateReason       string                 `json:"state_reason"`
	TerraformLabels   map[string]string      `json:"terraform_labels"`
	Uid               string                 `json:"uid"`
	BackupConfig      []BackupConfigState    `json:"backup_config"`
	BackupSchedule    []BackupScheduleState  `json:"backup_schedule"`
	RetentionPolicy   []RetentionPolicyState `json:"retention_policy"`
	Timeouts          *TimeoutsState         `json:"timeouts"`
}
