// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_biglake_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_biglake_database.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBiglakeDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbd *Resource) Type() string {
	return "google_biglake_database"
}

// LocalName returns the local name for [Resource].
func (gbd *Resource) LocalName() string {
	return gbd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbd *Resource) Configuration() interface{} {
	return gbd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbd *Resource) Dependencies() terra.Dependencies {
	return gbd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbd *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbd *Resource) Attributes() googleBiglakeDatabaseAttributes {
	return googleBiglakeDatabaseAttributes{ref: terra.ReferenceResource(gbd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbd *Resource) ImportState(state io.Reader) error {
	gbd.state = &googleBiglakeDatabaseState{}
	if err := json.NewDecoder(state).Decode(gbd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbd.Type(), gbd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbd *Resource) State() (*googleBiglakeDatabaseState, bool) {
	return gbd.state, gbd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbd *Resource) StateMust() *googleBiglakeDatabaseState {
	if gbd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbd.Type(), gbd.LocalName()))
	}
	return gbd.state
}

// Args contains the configurations for google_biglake_database.
type Args struct {
	// Catalog: string, required
	Catalog terra.StringValue `hcl:"catalog,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// HiveOptions: required
	HiveOptions *HiveOptions `hcl:"hive_options,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBiglakeDatabaseAttributes struct {
	ref terra.Reference
}

// Catalog returns a reference to field catalog of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("catalog"))
}

// CreateTime returns a reference to field create_time of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("delete_time"))
}

// ExpireTime returns a reference to field expire_time of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("id"))
}

// Name returns a reference to field name of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("name"))
}

// Type returns a reference to field type of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_biglake_database.
func (gbd googleBiglakeDatabaseAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gbd.ref.Append("update_time"))
}

func (gbd googleBiglakeDatabaseAttributes) HiveOptions() terra.ListValue[HiveOptionsAttributes] {
	return terra.ReferenceAsList[HiveOptionsAttributes](gbd.ref.Append("hive_options"))
}

func (gbd googleBiglakeDatabaseAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbd.ref.Append("timeouts"))
}

type googleBiglakeDatabaseState struct {
	Catalog     string             `json:"catalog"`
	CreateTime  string             `json:"create_time"`
	DeleteTime  string             `json:"delete_time"`
	ExpireTime  string             `json:"expire_time"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	Type        string             `json:"type"`
	UpdateTime  string             `json:"update_time"`
	HiveOptions []HiveOptionsState `json:"hive_options"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
