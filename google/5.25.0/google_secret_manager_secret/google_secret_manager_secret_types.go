// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_secret_manager_secret

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Replication struct {
	// ReplicationAuto: optional
	Auto *ReplicationAuto `hcl:"auto,block"`
	// ReplicationUserManaged: optional
	UserManaged *ReplicationUserManaged `hcl:"user_managed,block"`
}

type ReplicationAuto struct {
	// ReplicationAutoCustomerManagedEncryption: optional
	CustomerManagedEncryption *ReplicationAutoCustomerManagedEncryption `hcl:"customer_managed_encryption,block"`
}

type ReplicationAutoCustomerManagedEncryption struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type ReplicationUserManaged struct {
	// ReplicationUserManagedReplicas: min=1
	Replicas []ReplicationUserManagedReplicas `hcl:"replicas,block" validate:"min=1"`
}

type ReplicationUserManagedReplicas struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// ReplicationUserManagedReplicasCustomerManagedEncryption: optional
	CustomerManagedEncryption *ReplicationUserManagedReplicasCustomerManagedEncryption `hcl:"customer_managed_encryption,block"`
}

type ReplicationUserManagedReplicasCustomerManagedEncryption struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type Rotation struct {
	// NextRotationTime: string, optional
	NextRotationTime terra.StringValue `hcl:"next_rotation_time,attr"`
	// RotationPeriod: string, optional
	RotationPeriod terra.StringValue `hcl:"rotation_period,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Topics struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ReplicationAttributes struct {
	ref terra.Reference
}

func (r ReplicationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationAttributes {
	return ReplicationAttributes{ref: ref}
}

func (r ReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicationAttributes) Auto() terra.ListValue[ReplicationAutoAttributes] {
	return terra.ReferenceAsList[ReplicationAutoAttributes](r.ref.Append("auto"))
}

func (r ReplicationAttributes) UserManaged() terra.ListValue[ReplicationUserManagedAttributes] {
	return terra.ReferenceAsList[ReplicationUserManagedAttributes](r.ref.Append("user_managed"))
}

type ReplicationAutoAttributes struct {
	ref terra.Reference
}

func (a ReplicationAutoAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ReplicationAutoAttributes) InternalWithRef(ref terra.Reference) ReplicationAutoAttributes {
	return ReplicationAutoAttributes{ref: ref}
}

func (a ReplicationAutoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ReplicationAutoAttributes) CustomerManagedEncryption() terra.ListValue[ReplicationAutoCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[ReplicationAutoCustomerManagedEncryptionAttributes](a.ref.Append("customer_managed_encryption"))
}

type ReplicationAutoCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme ReplicationAutoCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme ReplicationAutoCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) ReplicationAutoCustomerManagedEncryptionAttributes {
	return ReplicationAutoCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme ReplicationAutoCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme ReplicationAutoCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type ReplicationUserManagedAttributes struct {
	ref terra.Reference
}

func (um ReplicationUserManagedAttributes) InternalRef() (terra.Reference, error) {
	return um.ref, nil
}

func (um ReplicationUserManagedAttributes) InternalWithRef(ref terra.Reference) ReplicationUserManagedAttributes {
	return ReplicationUserManagedAttributes{ref: ref}
}

func (um ReplicationUserManagedAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return um.ref.InternalTokens()
}

func (um ReplicationUserManagedAttributes) Replicas() terra.ListValue[ReplicationUserManagedReplicasAttributes] {
	return terra.ReferenceAsList[ReplicationUserManagedReplicasAttributes](um.ref.Append("replicas"))
}

type ReplicationUserManagedReplicasAttributes struct {
	ref terra.Reference
}

func (r ReplicationUserManagedReplicasAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicationUserManagedReplicasAttributes) InternalWithRef(ref terra.Reference) ReplicationUserManagedReplicasAttributes {
	return ReplicationUserManagedReplicasAttributes{ref: ref}
}

func (r ReplicationUserManagedReplicasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicationUserManagedReplicasAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("location"))
}

func (r ReplicationUserManagedReplicasAttributes) CustomerManagedEncryption() terra.ListValue[ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes] {
	return terra.ReferenceAsList[ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes](r.ref.Append("customer_managed_encryption"))
}

type ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes struct {
	ref terra.Reference
}

func (cme ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cme.ref, nil
}

func (cme ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes) InternalWithRef(ref terra.Reference) ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes {
	return ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes{ref: ref}
}

func (cme ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cme.ref.InternalTokens()
}

func (cme ReplicationUserManagedReplicasCustomerManagedEncryptionAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(cme.ref.Append("kms_key_name"))
}

type RotationAttributes struct {
	ref terra.Reference
}

func (r RotationAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RotationAttributes) InternalWithRef(ref terra.Reference) RotationAttributes {
	return RotationAttributes{ref: ref}
}

func (r RotationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RotationAttributes) NextRotationTime() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("next_rotation_time"))
}

func (r RotationAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rotation_period"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TopicsAttributes struct {
	ref terra.Reference
}

func (t TopicsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TopicsAttributes) InternalWithRef(ref terra.Reference) TopicsAttributes {
	return TopicsAttributes{ref: ref}
}

func (t TopicsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TopicsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

type ReplicationState struct {
	Auto        []ReplicationAutoState        `json:"auto"`
	UserManaged []ReplicationUserManagedState `json:"user_managed"`
}

type ReplicationAutoState struct {
	CustomerManagedEncryption []ReplicationAutoCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type ReplicationAutoCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type ReplicationUserManagedState struct {
	Replicas []ReplicationUserManagedReplicasState `json:"replicas"`
}

type ReplicationUserManagedReplicasState struct {
	Location                  string                                                         `json:"location"`
	CustomerManagedEncryption []ReplicationUserManagedReplicasCustomerManagedEncryptionState `json:"customer_managed_encryption"`
}

type ReplicationUserManagedReplicasCustomerManagedEncryptionState struct {
	KmsKeyName string `json:"kms_key_name"`
}

type RotationState struct {
	NextRotationTime string `json:"next_rotation_time"`
	RotationPeriod   string `json:"rotation_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TopicsState struct {
	Name string `json:"name"`
}
