// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_network

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_network.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeNetworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcn *Resource) Type() string {
	return "google_compute_network"
}

// LocalName returns the local name for [Resource].
func (gcn *Resource) LocalName() string {
	return gcn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcn *Resource) Configuration() interface{} {
	return gcn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcn *Resource) Dependencies() terra.Dependencies {
	return gcn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcn *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcn *Resource) Attributes() googleComputeNetworkAttributes {
	return googleComputeNetworkAttributes{ref: terra.ReferenceResource(gcn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcn *Resource) ImportState(state io.Reader) error {
	gcn.state = &googleComputeNetworkState{}
	if err := json.NewDecoder(state).Decode(gcn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcn.Type(), gcn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcn *Resource) State() (*googleComputeNetworkState, bool) {
	return gcn.state, gcn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcn *Resource) StateMust() *googleComputeNetworkState {
	if gcn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcn.Type(), gcn.LocalName()))
	}
	return gcn.state
}

// Args contains the configurations for google_compute_network.
type Args struct {
	// AutoCreateSubnetworks: bool, optional
	AutoCreateSubnetworks terra.BoolValue `hcl:"auto_create_subnetworks,attr"`
	// DeleteDefaultRoutesOnCreate: bool, optional
	DeleteDefaultRoutesOnCreate terra.BoolValue `hcl:"delete_default_routes_on_create,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableUlaInternalIpv6: bool, optional
	EnableUlaInternalIpv6 terra.BoolValue `hcl:"enable_ula_internal_ipv6,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternalIpv6Range: string, optional
	InternalIpv6Range terra.StringValue `hcl:"internal_ipv6_range,attr"`
	// Mtu: number, optional
	Mtu terra.NumberValue `hcl:"mtu,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NetworkFirewallPolicyEnforcementOrder: string, optional
	NetworkFirewallPolicyEnforcementOrder terra.StringValue `hcl:"network_firewall_policy_enforcement_order,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RoutingMode: string, optional
	RoutingMode terra.StringValue `hcl:"routing_mode,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeNetworkAttributes struct {
	ref terra.Reference
}

// AutoCreateSubnetworks returns a reference to field auto_create_subnetworks of google_compute_network.
func (gcn googleComputeNetworkAttributes) AutoCreateSubnetworks() terra.BoolValue {
	return terra.ReferenceAsBool(gcn.ref.Append("auto_create_subnetworks"))
}

// DeleteDefaultRoutesOnCreate returns a reference to field delete_default_routes_on_create of google_compute_network.
func (gcn googleComputeNetworkAttributes) DeleteDefaultRoutesOnCreate() terra.BoolValue {
	return terra.ReferenceAsBool(gcn.ref.Append("delete_default_routes_on_create"))
}

// Description returns a reference to field description of google_compute_network.
func (gcn googleComputeNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("description"))
}

// EnableUlaInternalIpv6 returns a reference to field enable_ula_internal_ipv6 of google_compute_network.
func (gcn googleComputeNetworkAttributes) EnableUlaInternalIpv6() terra.BoolValue {
	return terra.ReferenceAsBool(gcn.ref.Append("enable_ula_internal_ipv6"))
}

// GatewayIpv4 returns a reference to field gateway_ipv4 of google_compute_network.
func (gcn googleComputeNetworkAttributes) GatewayIpv4() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("gateway_ipv4"))
}

// Id returns a reference to field id of google_compute_network.
func (gcn googleComputeNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("id"))
}

// InternalIpv6Range returns a reference to field internal_ipv6_range of google_compute_network.
func (gcn googleComputeNetworkAttributes) InternalIpv6Range() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("internal_ipv6_range"))
}

// Mtu returns a reference to field mtu of google_compute_network.
func (gcn googleComputeNetworkAttributes) Mtu() terra.NumberValue {
	return terra.ReferenceAsNumber(gcn.ref.Append("mtu"))
}

// Name returns a reference to field name of google_compute_network.
func (gcn googleComputeNetworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("name"))
}

// NetworkFirewallPolicyEnforcementOrder returns a reference to field network_firewall_policy_enforcement_order of google_compute_network.
func (gcn googleComputeNetworkAttributes) NetworkFirewallPolicyEnforcementOrder() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("network_firewall_policy_enforcement_order"))
}

// NumericId returns a reference to field numeric_id of google_compute_network.
func (gcn googleComputeNetworkAttributes) NumericId() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("numeric_id"))
}

// Project returns a reference to field project of google_compute_network.
func (gcn googleComputeNetworkAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("project"))
}

// RoutingMode returns a reference to field routing_mode of google_compute_network.
func (gcn googleComputeNetworkAttributes) RoutingMode() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("routing_mode"))
}

// SelfLink returns a reference to field self_link of google_compute_network.
func (gcn googleComputeNetworkAttributes) SelfLink() terra.StringValue {
	return terra.ReferenceAsString(gcn.ref.Append("self_link"))
}

func (gcn googleComputeNetworkAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcn.ref.Append("timeouts"))
}

type googleComputeNetworkState struct {
	AutoCreateSubnetworks                 bool           `json:"auto_create_subnetworks"`
	DeleteDefaultRoutesOnCreate           bool           `json:"delete_default_routes_on_create"`
	Description                           string         `json:"description"`
	EnableUlaInternalIpv6                 bool           `json:"enable_ula_internal_ipv6"`
	GatewayIpv4                           string         `json:"gateway_ipv4"`
	Id                                    string         `json:"id"`
	InternalIpv6Range                     string         `json:"internal_ipv6_range"`
	Mtu                                   float64        `json:"mtu"`
	Name                                  string         `json:"name"`
	NetworkFirewallPolicyEnforcementOrder string         `json:"network_firewall_policy_enforcement_order"`
	NumericId                             string         `json:"numeric_id"`
	Project                               string         `json:"project"`
	RoutingMode                           string         `json:"routing_mode"`
	SelfLink                              string         `json:"self_link"`
	Timeouts                              *TimeoutsState `json:"timeouts"`
}
