// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_job.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbj *Resource) Type() string {
	return "google_bigquery_job"
}

// LocalName returns the local name for [Resource].
func (gbj *Resource) LocalName() string {
	return gbj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbj *Resource) Configuration() interface{} {
	return gbj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbj *Resource) Dependencies() terra.Dependencies {
	return gbj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbj *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbj *Resource) Attributes() googleBigqueryJobAttributes {
	return googleBigqueryJobAttributes{ref: terra.ReferenceResource(gbj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbj *Resource) ImportState(state io.Reader) error {
	gbj.state = &googleBigqueryJobState{}
	if err := json.NewDecoder(state).Decode(gbj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbj.Type(), gbj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbj *Resource) State() (*googleBigqueryJobState, bool) {
	return gbj.state, gbj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbj *Resource) StateMust() *googleBigqueryJobState {
	if gbj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbj.Type(), gbj.LocalName()))
	}
	return gbj.state
}

// Args contains the configurations for google_bigquery_job.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JobId: string, required
	JobId terra.StringValue `hcl:"job_id,attr" validate:"required"`
	// JobTimeoutMs: string, optional
	JobTimeoutMs terra.StringValue `hcl:"job_timeout_ms,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Copy: optional
	Copy *Copy `hcl:"copy,block"`
	// Extract: optional
	Extract *Extract `hcl:"extract,block"`
	// Load: optional
	Load *Load `hcl:"load,block"`
	// Query: optional
	Query *Query `hcl:"query,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryJobAttributes struct {
	ref terra.Reference
}

// EffectiveLabels returns a reference to field effective_labels of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbj.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("id"))
}

// JobId returns a reference to field job_id of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) JobId() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("job_id"))
}

// JobTimeoutMs returns a reference to field job_timeout_ms of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) JobTimeoutMs() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("job_timeout_ms"))
}

// JobType returns a reference to field job_type of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) JobType() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("job_type"))
}

// Labels returns a reference to field labels of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbj.ref.Append("labels"))
}

// Location returns a reference to field location of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("location"))
}

// Project returns a reference to field project of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("project"))
}

// TerraformLabels returns a reference to field terraform_labels of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gbj.ref.Append("terraform_labels"))
}

// UserEmail returns a reference to field user_email of google_bigquery_job.
func (gbj googleBigqueryJobAttributes) UserEmail() terra.StringValue {
	return terra.ReferenceAsString(gbj.ref.Append("user_email"))
}

func (gbj googleBigqueryJobAttributes) Status() terra.ListValue[StatusAttributes] {
	return terra.ReferenceAsList[StatusAttributes](gbj.ref.Append("status"))
}

func (gbj googleBigqueryJobAttributes) Copy() terra.ListValue[CopyAttributes] {
	return terra.ReferenceAsList[CopyAttributes](gbj.ref.Append("copy"))
}

func (gbj googleBigqueryJobAttributes) Extract() terra.ListValue[ExtractAttributes] {
	return terra.ReferenceAsList[ExtractAttributes](gbj.ref.Append("extract"))
}

func (gbj googleBigqueryJobAttributes) Load() terra.ListValue[LoadAttributes] {
	return terra.ReferenceAsList[LoadAttributes](gbj.ref.Append("load"))
}

func (gbj googleBigqueryJobAttributes) Query() terra.ListValue[QueryAttributes] {
	return terra.ReferenceAsList[QueryAttributes](gbj.ref.Append("query"))
}

func (gbj googleBigqueryJobAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbj.ref.Append("timeouts"))
}

type googleBigqueryJobState struct {
	EffectiveLabels map[string]string `json:"effective_labels"`
	Id              string            `json:"id"`
	JobId           string            `json:"job_id"`
	JobTimeoutMs    string            `json:"job_timeout_ms"`
	JobType         string            `json:"job_type"`
	Labels          map[string]string `json:"labels"`
	Location        string            `json:"location"`
	Project         string            `json:"project"`
	TerraformLabels map[string]string `json:"terraform_labels"`
	UserEmail       string            `json:"user_email"`
	Status          []StatusState     `json:"status"`
	Copy            []CopyState       `json:"copy"`
	Extract         []ExtractState    `json:"extract"`
	Load            []LoadState       `json:"load"`
	Query           []QueryState      `json:"query"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
