// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Copy struct {
	// CreateDisposition: string, optional
	CreateDisposition terra.StringValue `hcl:"create_disposition,attr"`
	// WriteDisposition: string, optional
	WriteDisposition terra.StringValue `hcl:"write_disposition,attr"`
	// CopyDestinationEncryptionConfiguration: optional
	DestinationEncryptionConfiguration *CopyDestinationEncryptionConfiguration `hcl:"destination_encryption_configuration,block"`
	// CopyDestinationTable: optional
	DestinationTable *CopyDestinationTable `hcl:"destination_table,block"`
	// CopySourceTables: min=1
	SourceTables []CopySourceTables `hcl:"source_tables,block" validate:"min=1"`
}

type CopyDestinationEncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type CopyDestinationTable struct {
	// DatasetId: string, optional
	DatasetId terra.StringValue `hcl:"dataset_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type CopySourceTables struct {
	// DatasetId: string, optional
	DatasetId terra.StringValue `hcl:"dataset_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type Extract struct {
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// DestinationFormat: string, optional
	DestinationFormat terra.StringValue `hcl:"destination_format,attr"`
	// DestinationUris: list of string, required
	DestinationUris terra.ListValue[terra.StringValue] `hcl:"destination_uris,attr" validate:"required"`
	// FieldDelimiter: string, optional
	FieldDelimiter terra.StringValue `hcl:"field_delimiter,attr"`
	// PrintHeader: bool, optional
	PrintHeader terra.BoolValue `hcl:"print_header,attr"`
	// UseAvroLogicalTypes: bool, optional
	UseAvroLogicalTypes terra.BoolValue `hcl:"use_avro_logical_types,attr"`
	// ExtractSourceModel: optional
	SourceModel *ExtractSourceModel `hcl:"source_model,block"`
	// ExtractSourceTable: optional
	SourceTable *ExtractSourceTable `hcl:"source_table,block"`
}

type ExtractSourceModel struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ModelId: string, required
	ModelId terra.StringValue `hcl:"model_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
}

type ExtractSourceTable struct {
	// DatasetId: string, optional
	DatasetId terra.StringValue `hcl:"dataset_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type Load struct {
	// AllowJaggedRows: bool, optional
	AllowJaggedRows terra.BoolValue `hcl:"allow_jagged_rows,attr"`
	// AllowQuotedNewlines: bool, optional
	AllowQuotedNewlines terra.BoolValue `hcl:"allow_quoted_newlines,attr"`
	// Autodetect: bool, optional
	Autodetect terra.BoolValue `hcl:"autodetect,attr"`
	// CreateDisposition: string, optional
	CreateDisposition terra.StringValue `hcl:"create_disposition,attr"`
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// FieldDelimiter: string, optional
	FieldDelimiter terra.StringValue `hcl:"field_delimiter,attr"`
	// IgnoreUnknownValues: bool, optional
	IgnoreUnknownValues terra.BoolValue `hcl:"ignore_unknown_values,attr"`
	// JsonExtension: string, optional
	JsonExtension terra.StringValue `hcl:"json_extension,attr"`
	// MaxBadRecords: number, optional
	MaxBadRecords terra.NumberValue `hcl:"max_bad_records,attr"`
	// NullMarker: string, optional
	NullMarker terra.StringValue `hcl:"null_marker,attr"`
	// ProjectionFields: list of string, optional
	ProjectionFields terra.ListValue[terra.StringValue] `hcl:"projection_fields,attr"`
	// Quote: string, optional
	Quote terra.StringValue `hcl:"quote,attr"`
	// SchemaUpdateOptions: list of string, optional
	SchemaUpdateOptions terra.ListValue[terra.StringValue] `hcl:"schema_update_options,attr"`
	// SkipLeadingRows: number, optional
	SkipLeadingRows terra.NumberValue `hcl:"skip_leading_rows,attr"`
	// SourceFormat: string, optional
	SourceFormat terra.StringValue `hcl:"source_format,attr"`
	// SourceUris: list of string, required
	SourceUris terra.ListValue[terra.StringValue] `hcl:"source_uris,attr" validate:"required"`
	// WriteDisposition: string, optional
	WriteDisposition terra.StringValue `hcl:"write_disposition,attr"`
	// LoadDestinationEncryptionConfiguration: optional
	DestinationEncryptionConfiguration *LoadDestinationEncryptionConfiguration `hcl:"destination_encryption_configuration,block"`
	// LoadDestinationTable: required
	DestinationTable *LoadDestinationTable `hcl:"destination_table,block" validate:"required"`
	// LoadParquetOptions: optional
	ParquetOptions *LoadParquetOptions `hcl:"parquet_options,block"`
	// LoadTimePartitioning: optional
	TimePartitioning *LoadTimePartitioning `hcl:"time_partitioning,block"`
}

type LoadDestinationEncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type LoadDestinationTable struct {
	// DatasetId: string, optional
	DatasetId terra.StringValue `hcl:"dataset_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type LoadParquetOptions struct {
	// EnableListInference: bool, optional
	EnableListInference terra.BoolValue `hcl:"enable_list_inference,attr"`
	// EnumAsString: bool, optional
	EnumAsString terra.BoolValue `hcl:"enum_as_string,attr"`
}

type LoadTimePartitioning struct {
	// ExpirationMs: string, optional
	ExpirationMs terra.StringValue `hcl:"expiration_ms,attr"`
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Query struct {
	// AllowLargeResults: bool, optional
	AllowLargeResults terra.BoolValue `hcl:"allow_large_results,attr"`
	// CreateDisposition: string, optional
	CreateDisposition terra.StringValue `hcl:"create_disposition,attr"`
	// FlattenResults: bool, optional
	FlattenResults terra.BoolValue `hcl:"flatten_results,attr"`
	// MaximumBillingTier: number, optional
	MaximumBillingTier terra.NumberValue `hcl:"maximum_billing_tier,attr"`
	// MaximumBytesBilled: string, optional
	MaximumBytesBilled terra.StringValue `hcl:"maximum_bytes_billed,attr"`
	// ParameterMode: string, optional
	ParameterMode terra.StringValue `hcl:"parameter_mode,attr"`
	// Priority: string, optional
	Priority terra.StringValue `hcl:"priority,attr"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// SchemaUpdateOptions: list of string, optional
	SchemaUpdateOptions terra.ListValue[terra.StringValue] `hcl:"schema_update_options,attr"`
	// UseLegacySql: bool, optional
	UseLegacySql terra.BoolValue `hcl:"use_legacy_sql,attr"`
	// UseQueryCache: bool, optional
	UseQueryCache terra.BoolValue `hcl:"use_query_cache,attr"`
	// WriteDisposition: string, optional
	WriteDisposition terra.StringValue `hcl:"write_disposition,attr"`
	// QueryDefaultDataset: optional
	DefaultDataset *QueryDefaultDataset `hcl:"default_dataset,block"`
	// QueryDestinationEncryptionConfiguration: optional
	DestinationEncryptionConfiguration *QueryDestinationEncryptionConfiguration `hcl:"destination_encryption_configuration,block"`
	// QueryDestinationTable: optional
	DestinationTable *QueryDestinationTable `hcl:"destination_table,block"`
	// QueryScriptOptions: optional
	ScriptOptions *QueryScriptOptions `hcl:"script_options,block"`
	// QueryUserDefinedFunctionResources: min=0
	UserDefinedFunctionResources []QueryUserDefinedFunctionResources `hcl:"user_defined_function_resources,block" validate:"min=0"`
}

type QueryDefaultDataset struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
}

type QueryDestinationEncryptionConfiguration struct {
	// KmsKeyName: string, required
	KmsKeyName terra.StringValue `hcl:"kms_key_name,attr" validate:"required"`
}

type QueryDestinationTable struct {
	// DatasetId: string, optional
	DatasetId terra.StringValue `hcl:"dataset_id,attr"`
	// ProjectId: string, optional
	ProjectId terra.StringValue `hcl:"project_id,attr"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type QueryScriptOptions struct {
	// KeyResultStatement: string, optional
	KeyResultStatement terra.StringValue `hcl:"key_result_statement,attr"`
	// StatementByteBudget: string, optional
	StatementByteBudget terra.StringValue `hcl:"statement_byte_budget,attr"`
	// StatementTimeoutMs: string, optional
	StatementTimeoutMs terra.StringValue `hcl:"statement_timeout_ms,attr"`
}

type QueryUserDefinedFunctionResources struct {
	// InlineCode: string, optional
	InlineCode terra.StringValue `hcl:"inline_code,attr"`
	// ResourceUri: string, optional
	ResourceUri terra.StringValue `hcl:"resource_uri,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type StatusAttributes struct {
	ref terra.Reference
}

func (s StatusAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StatusAttributes) InternalWithRef(ref terra.Reference) StatusAttributes {
	return StatusAttributes{ref: ref}
}

func (s StatusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StatusAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

func (s StatusAttributes) ErrorResult() terra.ListValue[StatusErrorResultAttributes] {
	return terra.ReferenceAsList[StatusErrorResultAttributes](s.ref.Append("error_result"))
}

func (s StatusAttributes) Errors() terra.ListValue[StatusErrorsAttributes] {
	return terra.ReferenceAsList[StatusErrorsAttributes](s.ref.Append("errors"))
}

type StatusErrorResultAttributes struct {
	ref terra.Reference
}

func (er StatusErrorResultAttributes) InternalRef() (terra.Reference, error) {
	return er.ref, nil
}

func (er StatusErrorResultAttributes) InternalWithRef(ref terra.Reference) StatusErrorResultAttributes {
	return StatusErrorResultAttributes{ref: ref}
}

func (er StatusErrorResultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return er.ref.InternalTokens()
}

func (er StatusErrorResultAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("location"))
}

func (er StatusErrorResultAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("message"))
}

func (er StatusErrorResultAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("reason"))
}

type StatusErrorsAttributes struct {
	ref terra.Reference
}

func (e StatusErrorsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e StatusErrorsAttributes) InternalWithRef(ref terra.Reference) StatusErrorsAttributes {
	return StatusErrorsAttributes{ref: ref}
}

func (e StatusErrorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e StatusErrorsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("location"))
}

func (e StatusErrorsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("message"))
}

func (e StatusErrorsAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("reason"))
}

type CopyAttributes struct {
	ref terra.Reference
}

func (c CopyAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CopyAttributes) InternalWithRef(ref terra.Reference) CopyAttributes {
	return CopyAttributes{ref: ref}
}

func (c CopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CopyAttributes) CreateDisposition() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("create_disposition"))
}

func (c CopyAttributes) WriteDisposition() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("write_disposition"))
}

func (c CopyAttributes) DestinationEncryptionConfiguration() terra.ListValue[CopyDestinationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[CopyDestinationEncryptionConfigurationAttributes](c.ref.Append("destination_encryption_configuration"))
}

func (c CopyAttributes) DestinationTable() terra.ListValue[CopyDestinationTableAttributes] {
	return terra.ReferenceAsList[CopyDestinationTableAttributes](c.ref.Append("destination_table"))
}

func (c CopyAttributes) SourceTables() terra.ListValue[CopySourceTablesAttributes] {
	return terra.ReferenceAsList[CopySourceTablesAttributes](c.ref.Append("source_tables"))
}

type CopyDestinationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (dec CopyDestinationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dec.ref, nil
}

func (dec CopyDestinationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) CopyDestinationEncryptionConfigurationAttributes {
	return CopyDestinationEncryptionConfigurationAttributes{ref: ref}
}

func (dec CopyDestinationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dec.ref.InternalTokens()
}

func (dec CopyDestinationEncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_name"))
}

func (dec CopyDestinationEncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_version"))
}

type CopyDestinationTableAttributes struct {
	ref terra.Reference
}

func (dt CopyDestinationTableAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt CopyDestinationTableAttributes) InternalWithRef(ref terra.Reference) CopyDestinationTableAttributes {
	return CopyDestinationTableAttributes{ref: ref}
}

func (dt CopyDestinationTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt CopyDestinationTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("dataset_id"))
}

func (dt CopyDestinationTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("project_id"))
}

func (dt CopyDestinationTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("table_id"))
}

type CopySourceTablesAttributes struct {
	ref terra.Reference
}

func (st CopySourceTablesAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st CopySourceTablesAttributes) InternalWithRef(ref terra.Reference) CopySourceTablesAttributes {
	return CopySourceTablesAttributes{ref: ref}
}

func (st CopySourceTablesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st CopySourceTablesAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("dataset_id"))
}

func (st CopySourceTablesAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("project_id"))
}

func (st CopySourceTablesAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("table_id"))
}

type ExtractAttributes struct {
	ref terra.Reference
}

func (e ExtractAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExtractAttributes) InternalWithRef(ref terra.Reference) ExtractAttributes {
	return ExtractAttributes{ref: ref}
}

func (e ExtractAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExtractAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("compression"))
}

func (e ExtractAttributes) DestinationFormat() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("destination_format"))
}

func (e ExtractAttributes) DestinationUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("destination_uris"))
}

func (e ExtractAttributes) FieldDelimiter() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("field_delimiter"))
}

func (e ExtractAttributes) PrintHeader() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("print_header"))
}

func (e ExtractAttributes) UseAvroLogicalTypes() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("use_avro_logical_types"))
}

func (e ExtractAttributes) SourceModel() terra.ListValue[ExtractSourceModelAttributes] {
	return terra.ReferenceAsList[ExtractSourceModelAttributes](e.ref.Append("source_model"))
}

func (e ExtractAttributes) SourceTable() terra.ListValue[ExtractSourceTableAttributes] {
	return terra.ReferenceAsList[ExtractSourceTableAttributes](e.ref.Append("source_table"))
}

type ExtractSourceModelAttributes struct {
	ref terra.Reference
}

func (sm ExtractSourceModelAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm ExtractSourceModelAttributes) InternalWithRef(ref terra.Reference) ExtractSourceModelAttributes {
	return ExtractSourceModelAttributes{ref: ref}
}

func (sm ExtractSourceModelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm ExtractSourceModelAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("dataset_id"))
}

func (sm ExtractSourceModelAttributes) ModelId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("model_id"))
}

func (sm ExtractSourceModelAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("project_id"))
}

type ExtractSourceTableAttributes struct {
	ref terra.Reference
}

func (st ExtractSourceTableAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st ExtractSourceTableAttributes) InternalWithRef(ref terra.Reference) ExtractSourceTableAttributes {
	return ExtractSourceTableAttributes{ref: ref}
}

func (st ExtractSourceTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st ExtractSourceTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("dataset_id"))
}

func (st ExtractSourceTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("project_id"))
}

func (st ExtractSourceTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("table_id"))
}

type LoadAttributes struct {
	ref terra.Reference
}

func (l LoadAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LoadAttributes) InternalWithRef(ref terra.Reference) LoadAttributes {
	return LoadAttributes{ref: ref}
}

func (l LoadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LoadAttributes) AllowJaggedRows() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("allow_jagged_rows"))
}

func (l LoadAttributes) AllowQuotedNewlines() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("allow_quoted_newlines"))
}

func (l LoadAttributes) Autodetect() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("autodetect"))
}

func (l LoadAttributes) CreateDisposition() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("create_disposition"))
}

func (l LoadAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("encoding"))
}

func (l LoadAttributes) FieldDelimiter() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("field_delimiter"))
}

func (l LoadAttributes) IgnoreUnknownValues() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("ignore_unknown_values"))
}

func (l LoadAttributes) JsonExtension() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("json_extension"))
}

func (l LoadAttributes) MaxBadRecords() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_bad_records"))
}

func (l LoadAttributes) NullMarker() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("null_marker"))
}

func (l LoadAttributes) ProjectionFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("projection_fields"))
}

func (l LoadAttributes) Quote() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("quote"))
}

func (l LoadAttributes) SchemaUpdateOptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("schema_update_options"))
}

func (l LoadAttributes) SkipLeadingRows() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("skip_leading_rows"))
}

func (l LoadAttributes) SourceFormat() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("source_format"))
}

func (l LoadAttributes) SourceUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](l.ref.Append("source_uris"))
}

func (l LoadAttributes) WriteDisposition() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("write_disposition"))
}

func (l LoadAttributes) DestinationEncryptionConfiguration() terra.ListValue[LoadDestinationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[LoadDestinationEncryptionConfigurationAttributes](l.ref.Append("destination_encryption_configuration"))
}

func (l LoadAttributes) DestinationTable() terra.ListValue[LoadDestinationTableAttributes] {
	return terra.ReferenceAsList[LoadDestinationTableAttributes](l.ref.Append("destination_table"))
}

func (l LoadAttributes) ParquetOptions() terra.ListValue[LoadParquetOptionsAttributes] {
	return terra.ReferenceAsList[LoadParquetOptionsAttributes](l.ref.Append("parquet_options"))
}

func (l LoadAttributes) TimePartitioning() terra.ListValue[LoadTimePartitioningAttributes] {
	return terra.ReferenceAsList[LoadTimePartitioningAttributes](l.ref.Append("time_partitioning"))
}

type LoadDestinationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (dec LoadDestinationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dec.ref, nil
}

func (dec LoadDestinationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) LoadDestinationEncryptionConfigurationAttributes {
	return LoadDestinationEncryptionConfigurationAttributes{ref: ref}
}

func (dec LoadDestinationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dec.ref.InternalTokens()
}

func (dec LoadDestinationEncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_name"))
}

func (dec LoadDestinationEncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_version"))
}

type LoadDestinationTableAttributes struct {
	ref terra.Reference
}

func (dt LoadDestinationTableAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt LoadDestinationTableAttributes) InternalWithRef(ref terra.Reference) LoadDestinationTableAttributes {
	return LoadDestinationTableAttributes{ref: ref}
}

func (dt LoadDestinationTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt LoadDestinationTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("dataset_id"))
}

func (dt LoadDestinationTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("project_id"))
}

func (dt LoadDestinationTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("table_id"))
}

type LoadParquetOptionsAttributes struct {
	ref terra.Reference
}

func (po LoadParquetOptionsAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po LoadParquetOptionsAttributes) InternalWithRef(ref terra.Reference) LoadParquetOptionsAttributes {
	return LoadParquetOptionsAttributes{ref: ref}
}

func (po LoadParquetOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po LoadParquetOptionsAttributes) EnableListInference() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enable_list_inference"))
}

func (po LoadParquetOptionsAttributes) EnumAsString() terra.BoolValue {
	return terra.ReferenceAsBool(po.ref.Append("enum_as_string"))
}

type LoadTimePartitioningAttributes struct {
	ref terra.Reference
}

func (tp LoadTimePartitioningAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp LoadTimePartitioningAttributes) InternalWithRef(ref terra.Reference) LoadTimePartitioningAttributes {
	return LoadTimePartitioningAttributes{ref: ref}
}

func (tp LoadTimePartitioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp LoadTimePartitioningAttributes) ExpirationMs() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("expiration_ms"))
}

func (tp LoadTimePartitioningAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("field"))
}

func (tp LoadTimePartitioningAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("type"))
}

type QueryAttributes struct {
	ref terra.Reference
}

func (q QueryAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q QueryAttributes) InternalWithRef(ref terra.Reference) QueryAttributes {
	return QueryAttributes{ref: ref}
}

func (q QueryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q QueryAttributes) AllowLargeResults() terra.BoolValue {
	return terra.ReferenceAsBool(q.ref.Append("allow_large_results"))
}

func (q QueryAttributes) CreateDisposition() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("create_disposition"))
}

func (q QueryAttributes) FlattenResults() terra.BoolValue {
	return terra.ReferenceAsBool(q.ref.Append("flatten_results"))
}

func (q QueryAttributes) MaximumBillingTier() terra.NumberValue {
	return terra.ReferenceAsNumber(q.ref.Append("maximum_billing_tier"))
}

func (q QueryAttributes) MaximumBytesBilled() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("maximum_bytes_billed"))
}

func (q QueryAttributes) ParameterMode() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("parameter_mode"))
}

func (q QueryAttributes) Priority() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("priority"))
}

func (q QueryAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("query"))
}

func (q QueryAttributes) SchemaUpdateOptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](q.ref.Append("schema_update_options"))
}

func (q QueryAttributes) UseLegacySql() terra.BoolValue {
	return terra.ReferenceAsBool(q.ref.Append("use_legacy_sql"))
}

func (q QueryAttributes) UseQueryCache() terra.BoolValue {
	return terra.ReferenceAsBool(q.ref.Append("use_query_cache"))
}

func (q QueryAttributes) WriteDisposition() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("write_disposition"))
}

func (q QueryAttributes) DefaultDataset() terra.ListValue[QueryDefaultDatasetAttributes] {
	return terra.ReferenceAsList[QueryDefaultDatasetAttributes](q.ref.Append("default_dataset"))
}

func (q QueryAttributes) DestinationEncryptionConfiguration() terra.ListValue[QueryDestinationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[QueryDestinationEncryptionConfigurationAttributes](q.ref.Append("destination_encryption_configuration"))
}

func (q QueryAttributes) DestinationTable() terra.ListValue[QueryDestinationTableAttributes] {
	return terra.ReferenceAsList[QueryDestinationTableAttributes](q.ref.Append("destination_table"))
}

func (q QueryAttributes) ScriptOptions() terra.ListValue[QueryScriptOptionsAttributes] {
	return terra.ReferenceAsList[QueryScriptOptionsAttributes](q.ref.Append("script_options"))
}

func (q QueryAttributes) UserDefinedFunctionResources() terra.ListValue[QueryUserDefinedFunctionResourcesAttributes] {
	return terra.ReferenceAsList[QueryUserDefinedFunctionResourcesAttributes](q.ref.Append("user_defined_function_resources"))
}

type QueryDefaultDatasetAttributes struct {
	ref terra.Reference
}

func (dd QueryDefaultDatasetAttributes) InternalRef() (terra.Reference, error) {
	return dd.ref, nil
}

func (dd QueryDefaultDatasetAttributes) InternalWithRef(ref terra.Reference) QueryDefaultDatasetAttributes {
	return QueryDefaultDatasetAttributes{ref: ref}
}

func (dd QueryDefaultDatasetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dd.ref.InternalTokens()
}

func (dd QueryDefaultDatasetAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("dataset_id"))
}

func (dd QueryDefaultDatasetAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dd.ref.Append("project_id"))
}

type QueryDestinationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (dec QueryDestinationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dec.ref, nil
}

func (dec QueryDestinationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) QueryDestinationEncryptionConfigurationAttributes {
	return QueryDestinationEncryptionConfigurationAttributes{ref: ref}
}

func (dec QueryDestinationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dec.ref.InternalTokens()
}

func (dec QueryDestinationEncryptionConfigurationAttributes) KmsKeyName() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_name"))
}

func (dec QueryDestinationEncryptionConfigurationAttributes) KmsKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(dec.ref.Append("kms_key_version"))
}

type QueryDestinationTableAttributes struct {
	ref terra.Reference
}

func (dt QueryDestinationTableAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt QueryDestinationTableAttributes) InternalWithRef(ref terra.Reference) QueryDestinationTableAttributes {
	return QueryDestinationTableAttributes{ref: ref}
}

func (dt QueryDestinationTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt QueryDestinationTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("dataset_id"))
}

func (dt QueryDestinationTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("project_id"))
}

func (dt QueryDestinationTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("table_id"))
}

type QueryScriptOptionsAttributes struct {
	ref terra.Reference
}

func (so QueryScriptOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so QueryScriptOptionsAttributes) InternalWithRef(ref terra.Reference) QueryScriptOptionsAttributes {
	return QueryScriptOptionsAttributes{ref: ref}
}

func (so QueryScriptOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so QueryScriptOptionsAttributes) KeyResultStatement() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("key_result_statement"))
}

func (so QueryScriptOptionsAttributes) StatementByteBudget() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("statement_byte_budget"))
}

func (so QueryScriptOptionsAttributes) StatementTimeoutMs() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("statement_timeout_ms"))
}

type QueryUserDefinedFunctionResourcesAttributes struct {
	ref terra.Reference
}

func (udfr QueryUserDefinedFunctionResourcesAttributes) InternalRef() (terra.Reference, error) {
	return udfr.ref, nil
}

func (udfr QueryUserDefinedFunctionResourcesAttributes) InternalWithRef(ref terra.Reference) QueryUserDefinedFunctionResourcesAttributes {
	return QueryUserDefinedFunctionResourcesAttributes{ref: ref}
}

func (udfr QueryUserDefinedFunctionResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return udfr.ref.InternalTokens()
}

func (udfr QueryUserDefinedFunctionResourcesAttributes) InlineCode() terra.StringValue {
	return terra.ReferenceAsString(udfr.ref.Append("inline_code"))
}

func (udfr QueryUserDefinedFunctionResourcesAttributes) ResourceUri() terra.StringValue {
	return terra.ReferenceAsString(udfr.ref.Append("resource_uri"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type StatusState struct {
	State       string                   `json:"state"`
	ErrorResult []StatusErrorResultState `json:"error_result"`
	Errors      []StatusErrorsState      `json:"errors"`
}

type StatusErrorResultState struct {
	Location string `json:"location"`
	Message  string `json:"message"`
	Reason   string `json:"reason"`
}

type StatusErrorsState struct {
	Location string `json:"location"`
	Message  string `json:"message"`
	Reason   string `json:"reason"`
}

type CopyState struct {
	CreateDisposition                  string                                        `json:"create_disposition"`
	WriteDisposition                   string                                        `json:"write_disposition"`
	DestinationEncryptionConfiguration []CopyDestinationEncryptionConfigurationState `json:"destination_encryption_configuration"`
	DestinationTable                   []CopyDestinationTableState                   `json:"destination_table"`
	SourceTables                       []CopySourceTablesState                       `json:"source_tables"`
}

type CopyDestinationEncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type CopyDestinationTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type CopySourceTablesState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type ExtractState struct {
	Compression         string                    `json:"compression"`
	DestinationFormat   string                    `json:"destination_format"`
	DestinationUris     []string                  `json:"destination_uris"`
	FieldDelimiter      string                    `json:"field_delimiter"`
	PrintHeader         bool                      `json:"print_header"`
	UseAvroLogicalTypes bool                      `json:"use_avro_logical_types"`
	SourceModel         []ExtractSourceModelState `json:"source_model"`
	SourceTable         []ExtractSourceTableState `json:"source_table"`
}

type ExtractSourceModelState struct {
	DatasetId string `json:"dataset_id"`
	ModelId   string `json:"model_id"`
	ProjectId string `json:"project_id"`
}

type ExtractSourceTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type LoadState struct {
	AllowJaggedRows                    bool                                          `json:"allow_jagged_rows"`
	AllowQuotedNewlines                bool                                          `json:"allow_quoted_newlines"`
	Autodetect                         bool                                          `json:"autodetect"`
	CreateDisposition                  string                                        `json:"create_disposition"`
	Encoding                           string                                        `json:"encoding"`
	FieldDelimiter                     string                                        `json:"field_delimiter"`
	IgnoreUnknownValues                bool                                          `json:"ignore_unknown_values"`
	JsonExtension                      string                                        `json:"json_extension"`
	MaxBadRecords                      float64                                       `json:"max_bad_records"`
	NullMarker                         string                                        `json:"null_marker"`
	ProjectionFields                   []string                                      `json:"projection_fields"`
	Quote                              string                                        `json:"quote"`
	SchemaUpdateOptions                []string                                      `json:"schema_update_options"`
	SkipLeadingRows                    float64                                       `json:"skip_leading_rows"`
	SourceFormat                       string                                        `json:"source_format"`
	SourceUris                         []string                                      `json:"source_uris"`
	WriteDisposition                   string                                        `json:"write_disposition"`
	DestinationEncryptionConfiguration []LoadDestinationEncryptionConfigurationState `json:"destination_encryption_configuration"`
	DestinationTable                   []LoadDestinationTableState                   `json:"destination_table"`
	ParquetOptions                     []LoadParquetOptionsState                     `json:"parquet_options"`
	TimePartitioning                   []LoadTimePartitioningState                   `json:"time_partitioning"`
}

type LoadDestinationEncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type LoadDestinationTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type LoadParquetOptionsState struct {
	EnableListInference bool `json:"enable_list_inference"`
	EnumAsString        bool `json:"enum_as_string"`
}

type LoadTimePartitioningState struct {
	ExpirationMs string `json:"expiration_ms"`
	Field        string `json:"field"`
	Type         string `json:"type"`
}

type QueryState struct {
	AllowLargeResults                  bool                                           `json:"allow_large_results"`
	CreateDisposition                  string                                         `json:"create_disposition"`
	FlattenResults                     bool                                           `json:"flatten_results"`
	MaximumBillingTier                 float64                                        `json:"maximum_billing_tier"`
	MaximumBytesBilled                 string                                         `json:"maximum_bytes_billed"`
	ParameterMode                      string                                         `json:"parameter_mode"`
	Priority                           string                                         `json:"priority"`
	Query                              string                                         `json:"query"`
	SchemaUpdateOptions                []string                                       `json:"schema_update_options"`
	UseLegacySql                       bool                                           `json:"use_legacy_sql"`
	UseQueryCache                      bool                                           `json:"use_query_cache"`
	WriteDisposition                   string                                         `json:"write_disposition"`
	DefaultDataset                     []QueryDefaultDatasetState                     `json:"default_dataset"`
	DestinationEncryptionConfiguration []QueryDestinationEncryptionConfigurationState `json:"destination_encryption_configuration"`
	DestinationTable                   []QueryDestinationTableState                   `json:"destination_table"`
	ScriptOptions                      []QueryScriptOptionsState                      `json:"script_options"`
	UserDefinedFunctionResources       []QueryUserDefinedFunctionResourcesState       `json:"user_defined_function_resources"`
}

type QueryDefaultDatasetState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
}

type QueryDestinationEncryptionConfigurationState struct {
	KmsKeyName    string `json:"kms_key_name"`
	KmsKeyVersion string `json:"kms_key_version"`
}

type QueryDestinationTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type QueryScriptOptionsState struct {
	KeyResultStatement  string `json:"key_result_statement"`
	StatementByteBudget string `json:"statement_byte_budget"`
	StatementTimeoutMs  string `json:"statement_timeout_ms"`
}

type QueryUserDefinedFunctionResourcesState struct {
	InlineCode  string `json:"inline_code"`
	ResourceUri string `json:"resource_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
