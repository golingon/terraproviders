// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_biglake_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HiveOptions struct {
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TableType: string, optional
	TableType terra.StringValue `hcl:"table_type,attr"`
	// HiveOptionsStorageDescriptor: optional
	StorageDescriptor *HiveOptionsStorageDescriptor `hcl:"storage_descriptor,block"`
}

type HiveOptionsStorageDescriptor struct {
	// InputFormat: string, optional
	InputFormat terra.StringValue `hcl:"input_format,attr"`
	// LocationUri: string, optional
	LocationUri terra.StringValue `hcl:"location_uri,attr"`
	// OutputFormat: string, optional
	OutputFormat terra.StringValue `hcl:"output_format,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type HiveOptionsAttributes struct {
	ref terra.Reference
}

func (ho HiveOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho HiveOptionsAttributes) InternalWithRef(ref terra.Reference) HiveOptionsAttributes {
	return HiveOptionsAttributes{ref: ref}
}

func (ho HiveOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho HiveOptionsAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ho.ref.Append("parameters"))
}

func (ho HiveOptionsAttributes) TableType() terra.StringValue {
	return terra.ReferenceAsString(ho.ref.Append("table_type"))
}

func (ho HiveOptionsAttributes) StorageDescriptor() terra.ListValue[HiveOptionsStorageDescriptorAttributes] {
	return terra.ReferenceAsList[HiveOptionsStorageDescriptorAttributes](ho.ref.Append("storage_descriptor"))
}

type HiveOptionsStorageDescriptorAttributes struct {
	ref terra.Reference
}

func (sd HiveOptionsStorageDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd HiveOptionsStorageDescriptorAttributes) InternalWithRef(ref terra.Reference) HiveOptionsStorageDescriptorAttributes {
	return HiveOptionsStorageDescriptorAttributes{ref: ref}
}

func (sd HiveOptionsStorageDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd HiveOptionsStorageDescriptorAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("input_format"))
}

func (sd HiveOptionsStorageDescriptorAttributes) LocationUri() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location_uri"))
}

func (sd HiveOptionsStorageDescriptorAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("output_format"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type HiveOptionsState struct {
	Parameters        map[string]string                   `json:"parameters"`
	TableType         string                              `json:"table_type"`
	StorageDescriptor []HiveOptionsStorageDescriptorState `json:"storage_descriptor"`
}

type HiveOptionsStorageDescriptorState struct {
	InputFormat  string `json:"input_format"`
	LocationUri  string `json:"location_uri"`
	OutputFormat string `json:"output_format"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
