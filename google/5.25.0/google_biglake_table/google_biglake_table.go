// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_biglake_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_biglake_table.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBiglakeTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbt *Resource) Type() string {
	return "google_biglake_table"
}

// LocalName returns the local name for [Resource].
func (gbt *Resource) LocalName() string {
	return gbt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbt *Resource) Configuration() interface{} {
	return gbt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbt *Resource) Dependencies() terra.Dependencies {
	return gbt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbt *Resource) Attributes() googleBiglakeTableAttributes {
	return googleBiglakeTableAttributes{ref: terra.ReferenceResource(gbt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbt *Resource) ImportState(state io.Reader) error {
	gbt.state = &googleBiglakeTableState{}
	if err := json.NewDecoder(state).Decode(gbt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbt.Type(), gbt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbt *Resource) State() (*googleBiglakeTableState, bool) {
	return gbt.state, gbt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbt *Resource) StateMust() *googleBiglakeTableState {
	if gbt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbt.Type(), gbt.LocalName()))
	}
	return gbt.state
}

// Args contains the configurations for google_biglake_table.
type Args struct {
	// Database: string, optional
	Database terra.StringValue `hcl:"database,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// HiveOptions: optional
	HiveOptions *HiveOptions `hcl:"hive_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBiglakeTableAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_biglake_table.
func (gbt googleBiglakeTableAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("create_time"))
}

// Database returns a reference to field database of google_biglake_table.
func (gbt googleBiglakeTableAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("database"))
}

// DeleteTime returns a reference to field delete_time of google_biglake_table.
func (gbt googleBiglakeTableAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("delete_time"))
}

// Etag returns a reference to field etag of google_biglake_table.
func (gbt googleBiglakeTableAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("etag"))
}

// ExpireTime returns a reference to field expire_time of google_biglake_table.
func (gbt googleBiglakeTableAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_biglake_table.
func (gbt googleBiglakeTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("id"))
}

// Name returns a reference to field name of google_biglake_table.
func (gbt googleBiglakeTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("name"))
}

// Type returns a reference to field type of google_biglake_table.
func (gbt googleBiglakeTableAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("type"))
}

// UpdateTime returns a reference to field update_time of google_biglake_table.
func (gbt googleBiglakeTableAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gbt.ref.Append("update_time"))
}

func (gbt googleBiglakeTableAttributes) HiveOptions() terra.ListValue[HiveOptionsAttributes] {
	return terra.ReferenceAsList[HiveOptionsAttributes](gbt.ref.Append("hive_options"))
}

func (gbt googleBiglakeTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbt.ref.Append("timeouts"))
}

type googleBiglakeTableState struct {
	CreateTime  string             `json:"create_time"`
	Database    string             `json:"database"`
	DeleteTime  string             `json:"delete_time"`
	Etag        string             `json:"etag"`
	ExpireTime  string             `json:"expire_time"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	Type        string             `json:"type"`
	UpdateTime  string             `json:"update_time"`
	HiveOptions []HiveOptionsState `json:"hive_options"`
	Timeouts    *TimeoutsState     `json:"timeouts"`
}
