// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_scc_source_iam_member

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_scc_source_iam_member.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSccSourceIamMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gssim *Resource) Type() string {
	return "google_scc_source_iam_member"
}

// LocalName returns the local name for [Resource].
func (gssim *Resource) LocalName() string {
	return gssim.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gssim *Resource) Configuration() interface{} {
	return gssim.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gssim *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gssim)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gssim *Resource) Dependencies() terra.Dependencies {
	return gssim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gssim *Resource) LifecycleManagement() *terra.Lifecycle {
	return gssim.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gssim *Resource) Attributes() googleSccSourceIamMemberAttributes {
	return googleSccSourceIamMemberAttributes{ref: terra.ReferenceResource(gssim)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gssim *Resource) ImportState(state io.Reader) error {
	gssim.state = &googleSccSourceIamMemberState{}
	if err := json.NewDecoder(state).Decode(gssim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gssim.Type(), gssim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gssim *Resource) State() (*googleSccSourceIamMemberState, bool) {
	return gssim.state, gssim.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gssim *Resource) StateMust() *googleSccSourceIamMemberState {
	if gssim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gssim.Type(), gssim.LocalName()))
	}
	return gssim.state
}

// Args contains the configurations for google_scc_source_iam_member.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Member: string, required
	Member terra.StringValue `hcl:"member,attr" validate:"required"`
	// Organization: string, required
	Organization terra.StringValue `hcl:"organization,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type googleSccSourceIamMemberAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("etag"))
}

// Id returns a reference to field id of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("id"))
}

// Member returns a reference to field member of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Member() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("member"))
}

// Organization returns a reference to field organization of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("organization"))
}

// Role returns a reference to field role of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("role"))
}

// Source returns a reference to field source of google_scc_source_iam_member.
func (gssim googleSccSourceIamMemberAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(gssim.ref.Append("source"))
}

func (gssim googleSccSourceIamMemberAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](gssim.ref.Append("condition"))
}

type googleSccSourceIamMemberState struct {
	Etag         string           `json:"etag"`
	Id           string           `json:"id"`
	Member       string           `json:"member"`
	Organization string           `json:"organization"`
	Role         string           `json:"role"`
	Source       string           `json:"source"`
	Condition    []ConditionState `json:"condition"`
}
