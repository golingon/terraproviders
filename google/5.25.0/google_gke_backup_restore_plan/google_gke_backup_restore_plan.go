// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_gke_backup_restore_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_gke_backup_restore_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *googleGkeBackupRestorePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ggbrp *Resource) Type() string {
	return "google_gke_backup_restore_plan"
}

// LocalName returns the local name for [Resource].
func (ggbrp *Resource) LocalName() string {
	return ggbrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ggbrp *Resource) Configuration() interface{} {
	return ggbrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ggbrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ggbrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ggbrp *Resource) Dependencies() terra.Dependencies {
	return ggbrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ggbrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ggbrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ggbrp *Resource) Attributes() googleGkeBackupRestorePlanAttributes {
	return googleGkeBackupRestorePlanAttributes{ref: terra.ReferenceResource(ggbrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ggbrp *Resource) ImportState(state io.Reader) error {
	ggbrp.state = &googleGkeBackupRestorePlanState{}
	if err := json.NewDecoder(state).Decode(ggbrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggbrp.Type(), ggbrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ggbrp *Resource) State() (*googleGkeBackupRestorePlanState, bool) {
	return ggbrp.state, ggbrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ggbrp *Resource) StateMust() *googleGkeBackupRestorePlanState {
	if ggbrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggbrp.Type(), ggbrp.LocalName()))
	}
	return ggbrp.state
}

// Args contains the configurations for google_gke_backup_restore_plan.
type Args struct {
	// BackupPlan: string, required
	BackupPlan terra.StringValue `hcl:"backup_plan,attr" validate:"required"`
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// RestoreConfig: required
	RestoreConfig *RestoreConfig `hcl:"restore_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleGkeBackupRestorePlanAttributes struct {
	ref terra.Reference
}

// BackupPlan returns a reference to field backup_plan of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) BackupPlan() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("backup_plan"))
}

// Cluster returns a reference to field cluster of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("cluster"))
}

// Description returns a reference to field description of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("description"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbrp.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbrp.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("location"))
}

// Name returns a reference to field name of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("project"))
}

// State returns a reference to field state of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("state"))
}

// StateReason returns a reference to field state_reason of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("state_reason"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ggbrp.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_backup_restore_plan.
func (ggbrp googleGkeBackupRestorePlanAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ggbrp.ref.Append("uid"))
}

func (ggbrp googleGkeBackupRestorePlanAttributes) RestoreConfig() terra.ListValue[RestoreConfigAttributes] {
	return terra.ReferenceAsList[RestoreConfigAttributes](ggbrp.ref.Append("restore_config"))
}

func (ggbrp googleGkeBackupRestorePlanAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ggbrp.ref.Append("timeouts"))
}

type googleGkeBackupRestorePlanState struct {
	BackupPlan      string               `json:"backup_plan"`
	Cluster         string               `json:"cluster"`
	Description     string               `json:"description"`
	EffectiveLabels map[string]string    `json:"effective_labels"`
	Id              string               `json:"id"`
	Labels          map[string]string    `json:"labels"`
	Location        string               `json:"location"`
	Name            string               `json:"name"`
	Project         string               `json:"project"`
	State           string               `json:"state"`
	StateReason     string               `json:"state_reason"`
	TerraformLabels map[string]string    `json:"terraform_labels"`
	Uid             string               `json:"uid"`
	RestoreConfig   []RestoreConfigState `json:"restore_config"`
	Timeouts        *TimeoutsState       `json:"timeouts"`
}
