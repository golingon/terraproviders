// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_access_context_manager_access_level

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Basic struct {
	// CombiningFunction: string, optional
	CombiningFunction terra.StringValue `hcl:"combining_function,attr"`
	// BasicConditions: min=1
	Conditions []BasicConditions `hcl:"conditions,block" validate:"min=1"`
}

type BasicConditions struct {
	// IpSubnetworks: list of string, optional
	IpSubnetworks terra.ListValue[terra.StringValue] `hcl:"ip_subnetworks,attr"`
	// Members: list of string, optional
	Members terra.ListValue[terra.StringValue] `hcl:"members,attr"`
	// Negate: bool, optional
	Negate terra.BoolValue `hcl:"negate,attr"`
	// Regions: list of string, optional
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
	// RequiredAccessLevels: list of string, optional
	RequiredAccessLevels terra.ListValue[terra.StringValue] `hcl:"required_access_levels,attr"`
	// BasicConditionsDevicePolicy: optional
	DevicePolicy *BasicConditionsDevicePolicy `hcl:"device_policy,block"`
	// BasicConditionsVpcNetworkSources: min=0
	VpcNetworkSources []BasicConditionsVpcNetworkSources `hcl:"vpc_network_sources,block" validate:"min=0"`
}

type BasicConditionsDevicePolicy struct {
	// AllowedDeviceManagementLevels: list of string, optional
	AllowedDeviceManagementLevels terra.ListValue[terra.StringValue] `hcl:"allowed_device_management_levels,attr"`
	// AllowedEncryptionStatuses: list of string, optional
	AllowedEncryptionStatuses terra.ListValue[terra.StringValue] `hcl:"allowed_encryption_statuses,attr"`
	// RequireAdminApproval: bool, optional
	RequireAdminApproval terra.BoolValue `hcl:"require_admin_approval,attr"`
	// RequireCorpOwned: bool, optional
	RequireCorpOwned terra.BoolValue `hcl:"require_corp_owned,attr"`
	// RequireScreenLock: bool, optional
	RequireScreenLock terra.BoolValue `hcl:"require_screen_lock,attr"`
	// BasicConditionsDevicePolicyOsConstraints: min=0
	OsConstraints []BasicConditionsDevicePolicyOsConstraints `hcl:"os_constraints,block" validate:"min=0"`
}

type BasicConditionsDevicePolicyOsConstraints struct {
	// MinimumVersion: string, optional
	MinimumVersion terra.StringValue `hcl:"minimum_version,attr"`
	// OsType: string, required
	OsType terra.StringValue `hcl:"os_type,attr" validate:"required"`
	// RequireVerifiedChromeOs: bool, optional
	RequireVerifiedChromeOs terra.BoolValue `hcl:"require_verified_chrome_os,attr"`
}

type BasicConditionsVpcNetworkSources struct {
	// BasicConditionsVpcNetworkSourcesVpcSubnetwork: optional
	VpcSubnetwork *BasicConditionsVpcNetworkSourcesVpcSubnetwork `hcl:"vpc_subnetwork,block"`
}

type BasicConditionsVpcNetworkSourcesVpcSubnetwork struct {
	// Network: string, required
	Network terra.StringValue `hcl:"network,attr" validate:"required"`
	// VpcIpSubnetworks: list of string, optional
	VpcIpSubnetworks terra.ListValue[terra.StringValue] `hcl:"vpc_ip_subnetworks,attr"`
}

type Custom struct {
	// CustomExpr: required
	Expr *CustomExpr `hcl:"expr,block" validate:"required"`
}

type CustomExpr struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BasicAttributes struct {
	ref terra.Reference
}

func (b BasicAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BasicAttributes) InternalWithRef(ref terra.Reference) BasicAttributes {
	return BasicAttributes{ref: ref}
}

func (b BasicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BasicAttributes) CombiningFunction() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("combining_function"))
}

func (b BasicAttributes) Conditions() terra.ListValue[BasicConditionsAttributes] {
	return terra.ReferenceAsList[BasicConditionsAttributes](b.ref.Append("conditions"))
}

type BasicConditionsAttributes struct {
	ref terra.Reference
}

func (c BasicConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c BasicConditionsAttributes) InternalWithRef(ref terra.Reference) BasicConditionsAttributes {
	return BasicConditionsAttributes{ref: ref}
}

func (c BasicConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c BasicConditionsAttributes) IpSubnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("ip_subnetworks"))
}

func (c BasicConditionsAttributes) Members() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("members"))
}

func (c BasicConditionsAttributes) Negate() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("negate"))
}

func (c BasicConditionsAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("regions"))
}

func (c BasicConditionsAttributes) RequiredAccessLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("required_access_levels"))
}

func (c BasicConditionsAttributes) DevicePolicy() terra.ListValue[BasicConditionsDevicePolicyAttributes] {
	return terra.ReferenceAsList[BasicConditionsDevicePolicyAttributes](c.ref.Append("device_policy"))
}

func (c BasicConditionsAttributes) VpcNetworkSources() terra.ListValue[BasicConditionsVpcNetworkSourcesAttributes] {
	return terra.ReferenceAsList[BasicConditionsVpcNetworkSourcesAttributes](c.ref.Append("vpc_network_sources"))
}

type BasicConditionsDevicePolicyAttributes struct {
	ref terra.Reference
}

func (dp BasicConditionsDevicePolicyAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp BasicConditionsDevicePolicyAttributes) InternalWithRef(ref terra.Reference) BasicConditionsDevicePolicyAttributes {
	return BasicConditionsDevicePolicyAttributes{ref: ref}
}

func (dp BasicConditionsDevicePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp BasicConditionsDevicePolicyAttributes) AllowedDeviceManagementLevels() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_device_management_levels"))
}

func (dp BasicConditionsDevicePolicyAttributes) AllowedEncryptionStatuses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dp.ref.Append("allowed_encryption_statuses"))
}

func (dp BasicConditionsDevicePolicyAttributes) RequireAdminApproval() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_admin_approval"))
}

func (dp BasicConditionsDevicePolicyAttributes) RequireCorpOwned() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_corp_owned"))
}

func (dp BasicConditionsDevicePolicyAttributes) RequireScreenLock() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("require_screen_lock"))
}

func (dp BasicConditionsDevicePolicyAttributes) OsConstraints() terra.ListValue[BasicConditionsDevicePolicyOsConstraintsAttributes] {
	return terra.ReferenceAsList[BasicConditionsDevicePolicyOsConstraintsAttributes](dp.ref.Append("os_constraints"))
}

type BasicConditionsDevicePolicyOsConstraintsAttributes struct {
	ref terra.Reference
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) InternalWithRef(ref terra.Reference) BasicConditionsDevicePolicyOsConstraintsAttributes {
	return BasicConditionsDevicePolicyOsConstraintsAttributes{ref: ref}
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) MinimumVersion() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("minimum_version"))
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) OsType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("os_type"))
}

func (oc BasicConditionsDevicePolicyOsConstraintsAttributes) RequireVerifiedChromeOs() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("require_verified_chrome_os"))
}

type BasicConditionsVpcNetworkSourcesAttributes struct {
	ref terra.Reference
}

func (vns BasicConditionsVpcNetworkSourcesAttributes) InternalRef() (terra.Reference, error) {
	return vns.ref, nil
}

func (vns BasicConditionsVpcNetworkSourcesAttributes) InternalWithRef(ref terra.Reference) BasicConditionsVpcNetworkSourcesAttributes {
	return BasicConditionsVpcNetworkSourcesAttributes{ref: ref}
}

func (vns BasicConditionsVpcNetworkSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vns.ref.InternalTokens()
}

func (vns BasicConditionsVpcNetworkSourcesAttributes) VpcSubnetwork() terra.ListValue[BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes] {
	return terra.ReferenceAsList[BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes](vns.ref.Append("vpc_subnetwork"))
}

type BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes struct {
	ref terra.Reference
}

func (vs BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes) InternalWithRef(ref terra.Reference) BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes {
	return BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes{ref: ref}
}

func (vs BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes) Network() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("network"))
}

func (vs BasicConditionsVpcNetworkSourcesVpcSubnetworkAttributes) VpcIpSubnetworks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vs.ref.Append("vpc_ip_subnetworks"))
}

type CustomAttributes struct {
	ref terra.Reference
}

func (c CustomAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CustomAttributes) InternalWithRef(ref terra.Reference) CustomAttributes {
	return CustomAttributes{ref: ref}
}

func (c CustomAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CustomAttributes) Expr() terra.ListValue[CustomExprAttributes] {
	return terra.ReferenceAsList[CustomExprAttributes](c.ref.Append("expr"))
}

type CustomExprAttributes struct {
	ref terra.Reference
}

func (e CustomExprAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e CustomExprAttributes) InternalWithRef(ref terra.Reference) CustomExprAttributes {
	return CustomExprAttributes{ref: ref}
}

func (e CustomExprAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e CustomExprAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("description"))
}

func (e CustomExprAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("expression"))
}

func (e CustomExprAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("location"))
}

func (e CustomExprAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("title"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BasicState struct {
	CombiningFunction string                 `json:"combining_function"`
	Conditions        []BasicConditionsState `json:"conditions"`
}

type BasicConditionsState struct {
	IpSubnetworks        []string                                `json:"ip_subnetworks"`
	Members              []string                                `json:"members"`
	Negate               bool                                    `json:"negate"`
	Regions              []string                                `json:"regions"`
	RequiredAccessLevels []string                                `json:"required_access_levels"`
	DevicePolicy         []BasicConditionsDevicePolicyState      `json:"device_policy"`
	VpcNetworkSources    []BasicConditionsVpcNetworkSourcesState `json:"vpc_network_sources"`
}

type BasicConditionsDevicePolicyState struct {
	AllowedDeviceManagementLevels []string                                        `json:"allowed_device_management_levels"`
	AllowedEncryptionStatuses     []string                                        `json:"allowed_encryption_statuses"`
	RequireAdminApproval          bool                                            `json:"require_admin_approval"`
	RequireCorpOwned              bool                                            `json:"require_corp_owned"`
	RequireScreenLock             bool                                            `json:"require_screen_lock"`
	OsConstraints                 []BasicConditionsDevicePolicyOsConstraintsState `json:"os_constraints"`
}

type BasicConditionsDevicePolicyOsConstraintsState struct {
	MinimumVersion          string `json:"minimum_version"`
	OsType                  string `json:"os_type"`
	RequireVerifiedChromeOs bool   `json:"require_verified_chrome_os"`
}

type BasicConditionsVpcNetworkSourcesState struct {
	VpcSubnetwork []BasicConditionsVpcNetworkSourcesVpcSubnetworkState `json:"vpc_subnetwork"`
}

type BasicConditionsVpcNetworkSourcesVpcSubnetworkState struct {
	Network          string   `json:"network"`
	VpcIpSubnetworks []string `json:"vpc_ip_subnetworks"`
}

type CustomState struct {
	Expr []CustomExprState `json:"expr"`
}

type CustomExprState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Location    string `json:"location"`
	Title       string `json:"title"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
