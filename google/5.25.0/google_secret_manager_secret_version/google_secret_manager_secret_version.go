// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_secret_manager_secret_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_secret_manager_secret_version.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSecretManagerSecretVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsmsv *Resource) Type() string {
	return "google_secret_manager_secret_version"
}

// LocalName returns the local name for [Resource].
func (gsmsv *Resource) LocalName() string {
	return gsmsv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsmsv *Resource) Configuration() interface{} {
	return gsmsv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsmsv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsmsv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsmsv *Resource) Dependencies() terra.Dependencies {
	return gsmsv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsmsv *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsmsv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsmsv *Resource) Attributes() googleSecretManagerSecretVersionAttributes {
	return googleSecretManagerSecretVersionAttributes{ref: terra.ReferenceResource(gsmsv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsmsv *Resource) ImportState(state io.Reader) error {
	gsmsv.state = &googleSecretManagerSecretVersionState{}
	if err := json.NewDecoder(state).Decode(gsmsv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsmsv.Type(), gsmsv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsmsv *Resource) State() (*googleSecretManagerSecretVersionState, bool) {
	return gsmsv.state, gsmsv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsmsv *Resource) StateMust() *googleSecretManagerSecretVersionState {
	if gsmsv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsmsv.Type(), gsmsv.LocalName()))
	}
	return gsmsv.state
}

// Args contains the configurations for google_secret_manager_secret_version.
type Args struct {
	// DeletionPolicy: string, optional
	DeletionPolicy terra.StringValue `hcl:"deletion_policy,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsSecretDataBase64: bool, optional
	IsSecretDataBase64 terra.BoolValue `hcl:"is_secret_data_base64,attr"`
	// Secret: string, required
	Secret terra.StringValue `hcl:"secret,attr" validate:"required"`
	// SecretData: string, required
	SecretData terra.StringValue `hcl:"secret_data,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSecretManagerSecretVersionAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("create_time"))
}

// DeletionPolicy returns a reference to field deletion_policy of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) DeletionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("deletion_policy"))
}

// DestroyTime returns a reference to field destroy_time of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) DestroyTime() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("destroy_time"))
}

// Enabled returns a reference to field enabled of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(gsmsv.ref.Append("enabled"))
}

// Id returns a reference to field id of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("id"))
}

// IsSecretDataBase64 returns a reference to field is_secret_data_base64 of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) IsSecretDataBase64() terra.BoolValue {
	return terra.ReferenceAsBool(gsmsv.ref.Append("is_secret_data_base64"))
}

// Name returns a reference to field name of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("name"))
}

// Secret returns a reference to field secret of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("secret"))
}

// SecretData returns a reference to field secret_data of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) SecretData() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("secret_data"))
}

// Version returns a reference to field version of google_secret_manager_secret_version.
func (gsmsv googleSecretManagerSecretVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(gsmsv.ref.Append("version"))
}

func (gsmsv googleSecretManagerSecretVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsmsv.ref.Append("timeouts"))
}

type googleSecretManagerSecretVersionState struct {
	CreateTime         string         `json:"create_time"`
	DeletionPolicy     string         `json:"deletion_policy"`
	DestroyTime        string         `json:"destroy_time"`
	Enabled            bool           `json:"enabled"`
	Id                 string         `json:"id"`
	IsSecretDataBase64 bool           `json:"is_secret_data_base64"`
	Name               string         `json:"name"`
	Secret             string         `json:"secret"`
	SecretData         string         `json:"secret_data"`
	Version            string         `json:"version"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
