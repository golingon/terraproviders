// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_billing_budget

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_billing_budget.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBillingBudgetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbb *Resource) Type() string {
	return "google_billing_budget"
}

// LocalName returns the local name for [Resource].
func (gbb *Resource) LocalName() string {
	return gbb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbb *Resource) Configuration() interface{} {
	return gbb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbb *Resource) Dependencies() terra.Dependencies {
	return gbb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbb *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbb *Resource) Attributes() googleBillingBudgetAttributes {
	return googleBillingBudgetAttributes{ref: terra.ReferenceResource(gbb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbb *Resource) ImportState(state io.Reader) error {
	gbb.state = &googleBillingBudgetState{}
	if err := json.NewDecoder(state).Decode(gbb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbb.Type(), gbb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbb *Resource) State() (*googleBillingBudgetState, bool) {
	return gbb.state, gbb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbb *Resource) StateMust() *googleBillingBudgetState {
	if gbb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbb.Type(), gbb.LocalName()))
	}
	return gbb.state
}

// Args contains the configurations for google_billing_budget.
type Args struct {
	// BillingAccount: string, required
	BillingAccount terra.StringValue `hcl:"billing_account,attr" validate:"required"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// AllUpdatesRule: optional
	AllUpdatesRule *AllUpdatesRule `hcl:"all_updates_rule,block"`
	// Amount: required
	Amount *Amount `hcl:"amount,block" validate:"required"`
	// BudgetFilter: optional
	BudgetFilter *BudgetFilter `hcl:"budget_filter,block"`
	// ThresholdRules: min=0
	ThresholdRules []ThresholdRules `hcl:"threshold_rules,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBillingBudgetAttributes struct {
	ref terra.Reference
}

// BillingAccount returns a reference to field billing_account of google_billing_budget.
func (gbb googleBillingBudgetAttributes) BillingAccount() terra.StringValue {
	return terra.ReferenceAsString(gbb.ref.Append("billing_account"))
}

// DisplayName returns a reference to field display_name of google_billing_budget.
func (gbb googleBillingBudgetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gbb.ref.Append("display_name"))
}

// Id returns a reference to field id of google_billing_budget.
func (gbb googleBillingBudgetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbb.ref.Append("id"))
}

// Name returns a reference to field name of google_billing_budget.
func (gbb googleBillingBudgetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gbb.ref.Append("name"))
}

func (gbb googleBillingBudgetAttributes) AllUpdatesRule() terra.ListValue[AllUpdatesRuleAttributes] {
	return terra.ReferenceAsList[AllUpdatesRuleAttributes](gbb.ref.Append("all_updates_rule"))
}

func (gbb googleBillingBudgetAttributes) Amount() terra.ListValue[AmountAttributes] {
	return terra.ReferenceAsList[AmountAttributes](gbb.ref.Append("amount"))
}

func (gbb googleBillingBudgetAttributes) BudgetFilter() terra.ListValue[BudgetFilterAttributes] {
	return terra.ReferenceAsList[BudgetFilterAttributes](gbb.ref.Append("budget_filter"))
}

func (gbb googleBillingBudgetAttributes) ThresholdRules() terra.ListValue[ThresholdRulesAttributes] {
	return terra.ReferenceAsList[ThresholdRulesAttributes](gbb.ref.Append("threshold_rules"))
}

func (gbb googleBillingBudgetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbb.ref.Append("timeouts"))
}

type googleBillingBudgetState struct {
	BillingAccount string                `json:"billing_account"`
	DisplayName    string                `json:"display_name"`
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	AllUpdatesRule []AllUpdatesRuleState `json:"all_updates_rule"`
	Amount         []AmountState         `json:"amount"`
	BudgetFilter   []BudgetFilterState   `json:"budget_filter"`
	ThresholdRules []ThresholdRulesState `json:"threshold_rules"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
