// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_routine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Arguments struct {
	// ArgumentKind: string, optional
	ArgumentKind terra.StringValue `hcl:"argument_kind,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type RemoteFunctionOptions struct {
	// Connection: string, optional
	Connection terra.StringValue `hcl:"connection,attr"`
	// Endpoint: string, optional
	Endpoint terra.StringValue `hcl:"endpoint,attr"`
	// MaxBatchingRows: string, optional
	MaxBatchingRows terra.StringValue `hcl:"max_batching_rows,attr"`
	// UserDefinedContext: map of string, optional
	UserDefinedContext terra.MapValue[terra.StringValue] `hcl:"user_defined_context,attr"`
}

type SparkOptions struct {
	// ArchiveUris: list of string, optional
	ArchiveUris terra.ListValue[terra.StringValue] `hcl:"archive_uris,attr"`
	// Connection: string, optional
	Connection terra.StringValue `hcl:"connection,attr"`
	// ContainerImage: string, optional
	ContainerImage terra.StringValue `hcl:"container_image,attr"`
	// FileUris: list of string, optional
	FileUris terra.ListValue[terra.StringValue] `hcl:"file_uris,attr"`
	// JarUris: list of string, optional
	JarUris terra.ListValue[terra.StringValue] `hcl:"jar_uris,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// MainFileUri: string, optional
	MainFileUri terra.StringValue `hcl:"main_file_uri,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// PyFileUris: list of string, optional
	PyFileUris terra.ListValue[terra.StringValue] `hcl:"py_file_uris,attr"`
	// RuntimeVersion: string, optional
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ArgumentsAttributes struct {
	ref terra.Reference
}

func (a ArgumentsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ArgumentsAttributes) InternalWithRef(ref terra.Reference) ArgumentsAttributes {
	return ArgumentsAttributes{ref: ref}
}

func (a ArgumentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ArgumentsAttributes) ArgumentKind() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("argument_kind"))
}

func (a ArgumentsAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("data_type"))
}

func (a ArgumentsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("mode"))
}

func (a ArgumentsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

type RemoteFunctionOptionsAttributes struct {
	ref terra.Reference
}

func (rfo RemoteFunctionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return rfo.ref, nil
}

func (rfo RemoteFunctionOptionsAttributes) InternalWithRef(ref terra.Reference) RemoteFunctionOptionsAttributes {
	return RemoteFunctionOptionsAttributes{ref: ref}
}

func (rfo RemoteFunctionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rfo.ref.InternalTokens()
}

func (rfo RemoteFunctionOptionsAttributes) Connection() terra.StringValue {
	return terra.ReferenceAsString(rfo.ref.Append("connection"))
}

func (rfo RemoteFunctionOptionsAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(rfo.ref.Append("endpoint"))
}

func (rfo RemoteFunctionOptionsAttributes) MaxBatchingRows() terra.StringValue {
	return terra.ReferenceAsString(rfo.ref.Append("max_batching_rows"))
}

func (rfo RemoteFunctionOptionsAttributes) UserDefinedContext() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rfo.ref.Append("user_defined_context"))
}

type SparkOptionsAttributes struct {
	ref terra.Reference
}

func (so SparkOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so SparkOptionsAttributes) InternalWithRef(ref terra.Reference) SparkOptionsAttributes {
	return SparkOptionsAttributes{ref: ref}
}

func (so SparkOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so SparkOptionsAttributes) ArchiveUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](so.ref.Append("archive_uris"))
}

func (so SparkOptionsAttributes) Connection() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("connection"))
}

func (so SparkOptionsAttributes) ContainerImage() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("container_image"))
}

func (so SparkOptionsAttributes) FileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](so.ref.Append("file_uris"))
}

func (so SparkOptionsAttributes) JarUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](so.ref.Append("jar_uris"))
}

func (so SparkOptionsAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("main_class"))
}

func (so SparkOptionsAttributes) MainFileUri() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("main_file_uri"))
}

func (so SparkOptionsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](so.ref.Append("properties"))
}

func (so SparkOptionsAttributes) PyFileUris() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](so.ref.Append("py_file_uris"))
}

func (so SparkOptionsAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("runtime_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ArgumentsState struct {
	ArgumentKind string `json:"argument_kind"`
	DataType     string `json:"data_type"`
	Mode         string `json:"mode"`
	Name         string `json:"name"`
}

type RemoteFunctionOptionsState struct {
	Connection         string            `json:"connection"`
	Endpoint           string            `json:"endpoint"`
	MaxBatchingRows    string            `json:"max_batching_rows"`
	UserDefinedContext map[string]string `json:"user_defined_context"`
}

type SparkOptionsState struct {
	ArchiveUris    []string          `json:"archive_uris"`
	Connection     string            `json:"connection"`
	ContainerImage string            `json:"container_image"`
	FileUris       []string          `json:"file_uris"`
	JarUris        []string          `json:"jar_uris"`
	MainClass      string            `json:"main_class"`
	MainFileUri    string            `json:"main_file_uri"`
	Properties     map[string]string `json:"properties"`
	PyFileUris     []string          `json:"py_file_uris"`
	RuntimeVersion string            `json:"runtime_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
