// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_bigquery_routine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_bigquery_routine.
type Resource struct {
	Name      string
	Args      Args
	state     *googleBigqueryRoutineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gbr *Resource) Type() string {
	return "google_bigquery_routine"
}

// LocalName returns the local name for [Resource].
func (gbr *Resource) LocalName() string {
	return gbr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gbr *Resource) Configuration() interface{} {
	return gbr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gbr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gbr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gbr *Resource) Dependencies() terra.Dependencies {
	return gbr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gbr *Resource) LifecycleManagement() *terra.Lifecycle {
	return gbr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gbr *Resource) Attributes() googleBigqueryRoutineAttributes {
	return googleBigqueryRoutineAttributes{ref: terra.ReferenceResource(gbr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gbr *Resource) ImportState(state io.Reader) error {
	gbr.state = &googleBigqueryRoutineState{}
	if err := json.NewDecoder(state).Decode(gbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gbr.Type(), gbr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gbr *Resource) State() (*googleBigqueryRoutineState, bool) {
	return gbr.state, gbr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gbr *Resource) StateMust() *googleBigqueryRoutineState {
	if gbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gbr.Type(), gbr.LocalName()))
	}
	return gbr.state
}

// Args contains the configurations for google_bigquery_routine.
type Args struct {
	// DataGovernanceType: string, optional
	DataGovernanceType terra.StringValue `hcl:"data_governance_type,attr"`
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// DefinitionBody: string, required
	DefinitionBody terra.StringValue `hcl:"definition_body,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeterminismLevel: string, optional
	DeterminismLevel terra.StringValue `hcl:"determinism_level,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportedLibraries: list of string, optional
	ImportedLibraries terra.ListValue[terra.StringValue] `hcl:"imported_libraries,attr"`
	// Language: string, optional
	Language terra.StringValue `hcl:"language,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ReturnTableType: string, optional
	ReturnTableType terra.StringValue `hcl:"return_table_type,attr"`
	// ReturnType: string, optional
	ReturnType terra.StringValue `hcl:"return_type,attr"`
	// RoutineId: string, required
	RoutineId terra.StringValue `hcl:"routine_id,attr" validate:"required"`
	// RoutineType: string, required
	RoutineType terra.StringValue `hcl:"routine_type,attr" validate:"required"`
	// Arguments: min=0
	Arguments []Arguments `hcl:"arguments,block" validate:"min=0"`
	// RemoteFunctionOptions: optional
	RemoteFunctionOptions *RemoteFunctionOptions `hcl:"remote_function_options,block"`
	// SparkOptions: optional
	SparkOptions *SparkOptions `hcl:"spark_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleBigqueryRoutineAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) CreationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gbr.ref.Append("creation_time"))
}

// DataGovernanceType returns a reference to field data_governance_type of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) DataGovernanceType() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("data_governance_type"))
}

// DatasetId returns a reference to field dataset_id of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("dataset_id"))
}

// DefinitionBody returns a reference to field definition_body of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) DefinitionBody() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("definition_body"))
}

// Description returns a reference to field description of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("description"))
}

// DeterminismLevel returns a reference to field determinism_level of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) DeterminismLevel() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("determinism_level"))
}

// Id returns a reference to field id of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("id"))
}

// ImportedLibraries returns a reference to field imported_libraries of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) ImportedLibraries() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gbr.ref.Append("imported_libraries"))
}

// Language returns a reference to field language of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) Language() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("language"))
}

// LastModifiedTime returns a reference to field last_modified_time of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) LastModifiedTime() terra.NumberValue {
	return terra.ReferenceAsNumber(gbr.ref.Append("last_modified_time"))
}

// Project returns a reference to field project of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("project"))
}

// ReturnTableType returns a reference to field return_table_type of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) ReturnTableType() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("return_table_type"))
}

// ReturnType returns a reference to field return_type of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) ReturnType() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("return_type"))
}

// RoutineId returns a reference to field routine_id of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) RoutineId() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("routine_id"))
}

// RoutineType returns a reference to field routine_type of google_bigquery_routine.
func (gbr googleBigqueryRoutineAttributes) RoutineType() terra.StringValue {
	return terra.ReferenceAsString(gbr.ref.Append("routine_type"))
}

func (gbr googleBigqueryRoutineAttributes) Arguments() terra.ListValue[ArgumentsAttributes] {
	return terra.ReferenceAsList[ArgumentsAttributes](gbr.ref.Append("arguments"))
}

func (gbr googleBigqueryRoutineAttributes) RemoteFunctionOptions() terra.ListValue[RemoteFunctionOptionsAttributes] {
	return terra.ReferenceAsList[RemoteFunctionOptionsAttributes](gbr.ref.Append("remote_function_options"))
}

func (gbr googleBigqueryRoutineAttributes) SparkOptions() terra.ListValue[SparkOptionsAttributes] {
	return terra.ReferenceAsList[SparkOptionsAttributes](gbr.ref.Append("spark_options"))
}

func (gbr googleBigqueryRoutineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gbr.ref.Append("timeouts"))
}

type googleBigqueryRoutineState struct {
	CreationTime          float64                      `json:"creation_time"`
	DataGovernanceType    string                       `json:"data_governance_type"`
	DatasetId             string                       `json:"dataset_id"`
	DefinitionBody        string                       `json:"definition_body"`
	Description           string                       `json:"description"`
	DeterminismLevel      string                       `json:"determinism_level"`
	Id                    string                       `json:"id"`
	ImportedLibraries     []string                     `json:"imported_libraries"`
	Language              string                       `json:"language"`
	LastModifiedTime      float64                      `json:"last_modified_time"`
	Project               string                       `json:"project"`
	ReturnTableType       string                       `json:"return_table_type"`
	ReturnType            string                       `json:"return_type"`
	RoutineId             string                       `json:"routine_id"`
	RoutineType           string                       `json:"routine_type"`
	Arguments             []ArgumentsState             `json:"arguments"`
	RemoteFunctionOptions []RemoteFunctionOptionsState `json:"remote_function_options"`
	SparkOptions          []SparkOptionsState          `json:"spark_options"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
