// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_global_network_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_global_network_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeGlobalNetworkEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcgne *Resource) Type() string {
	return "google_compute_global_network_endpoint"
}

// LocalName returns the local name for [Resource].
func (gcgne *Resource) LocalName() string {
	return gcgne.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcgne *Resource) Configuration() interface{} {
	return gcgne.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcgne *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcgne)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcgne *Resource) Dependencies() terra.Dependencies {
	return gcgne.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcgne *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcgne.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcgne *Resource) Attributes() googleComputeGlobalNetworkEndpointAttributes {
	return googleComputeGlobalNetworkEndpointAttributes{ref: terra.ReferenceResource(gcgne)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcgne *Resource) ImportState(state io.Reader) error {
	gcgne.state = &googleComputeGlobalNetworkEndpointState{}
	if err := json.NewDecoder(state).Decode(gcgne.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcgne.Type(), gcgne.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcgne *Resource) State() (*googleComputeGlobalNetworkEndpointState, bool) {
	return gcgne.state, gcgne.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcgne *Resource) StateMust() *googleComputeGlobalNetworkEndpointState {
	if gcgne.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcgne.Type(), gcgne.LocalName()))
	}
	return gcgne.state
}

// Args contains the configurations for google_compute_global_network_endpoint.
type Args struct {
	// Fqdn: string, optional
	Fqdn terra.StringValue `hcl:"fqdn,attr"`
	// GlobalNetworkEndpointGroup: string, required
	GlobalNetworkEndpointGroup terra.StringValue `hcl:"global_network_endpoint_group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeGlobalNetworkEndpointAttributes struct {
	ref terra.Reference
}

// Fqdn returns a reference to field fqdn of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(gcgne.ref.Append("fqdn"))
}

// GlobalNetworkEndpointGroup returns a reference to field global_network_endpoint_group of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) GlobalNetworkEndpointGroup() terra.StringValue {
	return terra.ReferenceAsString(gcgne.ref.Append("global_network_endpoint_group"))
}

// Id returns a reference to field id of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcgne.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(gcgne.ref.Append("ip_address"))
}

// Port returns a reference to field port of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(gcgne.ref.Append("port"))
}

// Project returns a reference to field project of google_compute_global_network_endpoint.
func (gcgne googleComputeGlobalNetworkEndpointAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcgne.ref.Append("project"))
}

func (gcgne googleComputeGlobalNetworkEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcgne.ref.Append("timeouts"))
}

type googleComputeGlobalNetworkEndpointState struct {
	Fqdn                       string         `json:"fqdn"`
	GlobalNetworkEndpointGroup string         `json:"global_network_endpoint_group"`
	Id                         string         `json:"id"`
	IpAddress                  string         `json:"ip_address"`
	Port                       float64        `json:"port"`
	Project                    string         `json:"project"`
	Timeouts                   *TimeoutsState `json:"timeouts"`
}
