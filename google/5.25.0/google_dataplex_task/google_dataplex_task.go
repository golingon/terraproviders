// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dataplex_task

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dataplex_task.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDataplexTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdt *Resource) Type() string {
	return "google_dataplex_task"
}

// LocalName returns the local name for [Resource].
func (gdt *Resource) LocalName() string {
	return gdt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdt *Resource) Configuration() interface{} {
	return gdt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdt *Resource) Dependencies() terra.Dependencies {
	return gdt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdt *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdt *Resource) Attributes() googleDataplexTaskAttributes {
	return googleDataplexTaskAttributes{ref: terra.ReferenceResource(gdt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdt *Resource) ImportState(state io.Reader) error {
	gdt.state = &googleDataplexTaskState{}
	if err := json.NewDecoder(state).Decode(gdt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdt.Type(), gdt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdt *Resource) State() (*googleDataplexTaskState, bool) {
	return gdt.state, gdt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdt *Resource) StateMust() *googleDataplexTaskState {
	if gdt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdt.Type(), gdt.LocalName()))
	}
	return gdt.state
}

// Args contains the configurations for google_dataplex_task.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Lake: string, optional
	Lake terra.StringValue `hcl:"lake,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// TaskId: string, optional
	TaskId terra.StringValue `hcl:"task_id,attr"`
	// ExecutionSpec: required
	ExecutionSpec *ExecutionSpec `hcl:"execution_spec,block" validate:"required"`
	// Notebook: optional
	Notebook *Notebook `hcl:"notebook,block"`
	// Spark: optional
	Spark *Spark `hcl:"spark,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TriggerSpec: required
	TriggerSpec *TriggerSpec `hcl:"trigger_spec,block" validate:"required"`
}

type googleDataplexTaskAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("create_time"))
}

// Description returns a reference to field description of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdt.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("id"))
}

// Labels returns a reference to field labels of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdt.ref.Append("labels"))
}

// Lake returns a reference to field lake of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Lake() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("lake"))
}

// Location returns a reference to field location of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("location"))
}

// Name returns a reference to field name of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("name"))
}

// Project returns a reference to field project of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("project"))
}

// State returns a reference to field state of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("state"))
}

// TaskId returns a reference to field task_id of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) TaskId() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("task_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdt.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_dataplex_task.
func (gdt googleDataplexTaskAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gdt.ref.Append("update_time"))
}

func (gdt googleDataplexTaskAttributes) ExecutionStatus() terra.ListValue[ExecutionStatusAttributes] {
	return terra.ReferenceAsList[ExecutionStatusAttributes](gdt.ref.Append("execution_status"))
}

func (gdt googleDataplexTaskAttributes) ExecutionSpec() terra.ListValue[ExecutionSpecAttributes] {
	return terra.ReferenceAsList[ExecutionSpecAttributes](gdt.ref.Append("execution_spec"))
}

func (gdt googleDataplexTaskAttributes) Notebook() terra.ListValue[NotebookAttributes] {
	return terra.ReferenceAsList[NotebookAttributes](gdt.ref.Append("notebook"))
}

func (gdt googleDataplexTaskAttributes) Spark() terra.ListValue[SparkAttributes] {
	return terra.ReferenceAsList[SparkAttributes](gdt.ref.Append("spark"))
}

func (gdt googleDataplexTaskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdt.ref.Append("timeouts"))
}

func (gdt googleDataplexTaskAttributes) TriggerSpec() terra.ListValue[TriggerSpecAttributes] {
	return terra.ReferenceAsList[TriggerSpecAttributes](gdt.ref.Append("trigger_spec"))
}

type googleDataplexTaskState struct {
	CreateTime      string                 `json:"create_time"`
	Description     string                 `json:"description"`
	DisplayName     string                 `json:"display_name"`
	EffectiveLabels map[string]string      `json:"effective_labels"`
	Id              string                 `json:"id"`
	Labels          map[string]string      `json:"labels"`
	Lake            string                 `json:"lake"`
	Location        string                 `json:"location"`
	Name            string                 `json:"name"`
	Project         string                 `json:"project"`
	State           string                 `json:"state"`
	TaskId          string                 `json:"task_id"`
	TerraformLabels map[string]string      `json:"terraform_labels"`
	Uid             string                 `json:"uid"`
	UpdateTime      string                 `json:"update_time"`
	ExecutionStatus []ExecutionStatusState `json:"execution_status"`
	ExecutionSpec   []ExecutionSpecState   `json:"execution_spec"`
	Notebook        []NotebookState        `json:"notebook"`
	Spark           []SparkState           `json:"spark"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
	TriggerSpec     []TriggerSpecState     `json:"trigger_spec"`
}
