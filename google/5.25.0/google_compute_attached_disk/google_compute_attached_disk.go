// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_compute_attached_disk

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_compute_attached_disk.
type Resource struct {
	Name      string
	Args      Args
	state     *googleComputeAttachedDiskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gcad *Resource) Type() string {
	return "google_compute_attached_disk"
}

// LocalName returns the local name for [Resource].
func (gcad *Resource) LocalName() string {
	return gcad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gcad *Resource) Configuration() interface{} {
	return gcad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gcad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gcad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gcad *Resource) Dependencies() terra.Dependencies {
	return gcad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gcad *Resource) LifecycleManagement() *terra.Lifecycle {
	return gcad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gcad *Resource) Attributes() googleComputeAttachedDiskAttributes {
	return googleComputeAttachedDiskAttributes{ref: terra.ReferenceResource(gcad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gcad *Resource) ImportState(state io.Reader) error {
	gcad.state = &googleComputeAttachedDiskState{}
	if err := json.NewDecoder(state).Decode(gcad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gcad.Type(), gcad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gcad *Resource) State() (*googleComputeAttachedDiskState, bool) {
	return gcad.state, gcad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gcad *Resource) StateMust() *googleComputeAttachedDiskState {
	if gcad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gcad.Type(), gcad.LocalName()))
	}
	return gcad.state
}

// Args contains the configurations for google_compute_attached_disk.
type Args struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// Disk: string, required
	Disk terra.StringValue `hcl:"disk,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Zone: string, optional
	Zone terra.StringValue `hcl:"zone,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleComputeAttachedDiskAttributes struct {
	ref terra.Reference
}

// DeviceName returns a reference to field device_name of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("device_name"))
}

// Disk returns a reference to field disk of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("disk"))
}

// Id returns a reference to field id of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("id"))
}

// Instance returns a reference to field instance of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("instance"))
}

// Mode returns a reference to field mode of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("mode"))
}

// Project returns a reference to field project of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("project"))
}

// Zone returns a reference to field zone of google_compute_attached_disk.
func (gcad googleComputeAttachedDiskAttributes) Zone() terra.StringValue {
	return terra.ReferenceAsString(gcad.ref.Append("zone"))
}

func (gcad googleComputeAttachedDiskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gcad.ref.Append("timeouts"))
}

type googleComputeAttachedDiskState struct {
	DeviceName string         `json:"device_name"`
	Disk       string         `json:"disk"`
	Id         string         `json:"id"`
	Instance   string         `json:"instance"`
	Mode       string         `json:"mode"`
	Project    string         `json:"project"`
	Zone       string         `json:"zone"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
