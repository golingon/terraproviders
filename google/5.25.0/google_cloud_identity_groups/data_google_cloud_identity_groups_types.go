// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_cloud_identity_groups

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataGroupsAttributes struct {
	ref terra.Reference
}

func (g DataGroupsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g DataGroupsAttributes) InternalWithRef(ref terra.Reference) DataGroupsAttributes {
	return DataGroupsAttributes{ref: ref}
}

func (g DataGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g DataGroupsAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("create_time"))
}

func (g DataGroupsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

func (g DataGroupsAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("display_name"))
}

func (g DataGroupsAttributes) InitialGroupConfig() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("initial_group_config"))
}

func (g DataGroupsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](g.ref.Append("labels"))
}

func (g DataGroupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g DataGroupsAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("parent"))
}

func (g DataGroupsAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("update_time"))
}

func (g DataGroupsAttributes) AdditionalGroupKeys() terra.ListValue[DataGroupsAdditionalGroupKeysAttributes] {
	return terra.ReferenceAsList[DataGroupsAdditionalGroupKeysAttributes](g.ref.Append("additional_group_keys"))
}

func (g DataGroupsAttributes) GroupKey() terra.ListValue[DataGroupsGroupKeyAttributes] {
	return terra.ReferenceAsList[DataGroupsGroupKeyAttributes](g.ref.Append("group_key"))
}

type DataGroupsAdditionalGroupKeysAttributes struct {
	ref terra.Reference
}

func (agk DataGroupsAdditionalGroupKeysAttributes) InternalRef() (terra.Reference, error) {
	return agk.ref, nil
}

func (agk DataGroupsAdditionalGroupKeysAttributes) InternalWithRef(ref terra.Reference) DataGroupsAdditionalGroupKeysAttributes {
	return DataGroupsAdditionalGroupKeysAttributes{ref: ref}
}

func (agk DataGroupsAdditionalGroupKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return agk.ref.InternalTokens()
}

func (agk DataGroupsAdditionalGroupKeysAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agk.ref.Append("id"))
}

func (agk DataGroupsAdditionalGroupKeysAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(agk.ref.Append("namespace"))
}

type DataGroupsGroupKeyAttributes struct {
	ref terra.Reference
}

func (gk DataGroupsGroupKeyAttributes) InternalRef() (terra.Reference, error) {
	return gk.ref, nil
}

func (gk DataGroupsGroupKeyAttributes) InternalWithRef(ref terra.Reference) DataGroupsGroupKeyAttributes {
	return DataGroupsGroupKeyAttributes{ref: ref}
}

func (gk DataGroupsGroupKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gk.ref.InternalTokens()
}

func (gk DataGroupsGroupKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gk.ref.Append("id"))
}

func (gk DataGroupsGroupKeyAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(gk.ref.Append("namespace"))
}

type DataGroupsState struct {
	CreateTime          string                               `json:"create_time"`
	Description         string                               `json:"description"`
	DisplayName         string                               `json:"display_name"`
	InitialGroupConfig  string                               `json:"initial_group_config"`
	Labels              map[string]string                    `json:"labels"`
	Name                string                               `json:"name"`
	Parent              string                               `json:"parent"`
	UpdateTime          string                               `json:"update_time"`
	AdditionalGroupKeys []DataGroupsAdditionalGroupKeysState `json:"additional_group_keys"`
	GroupKey            []DataGroupsGroupKeyState            `json:"group_key"`
}

type DataGroupsAdditionalGroupKeysState struct {
	Id        string `json:"id"`
	Namespace string `json:"namespace"`
}

type DataGroupsGroupKeyState struct {
	Id        string `json:"id"`
	Namespace string `json:"namespace"`
}
