// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_storage_hmac_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_storage_hmac_key.
type Resource struct {
	Name      string
	Args      Args
	state     *googleStorageHmacKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gshk *Resource) Type() string {
	return "google_storage_hmac_key"
}

// LocalName returns the local name for [Resource].
func (gshk *Resource) LocalName() string {
	return gshk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gshk *Resource) Configuration() interface{} {
	return gshk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gshk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gshk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gshk *Resource) Dependencies() terra.Dependencies {
	return gshk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gshk *Resource) LifecycleManagement() *terra.Lifecycle {
	return gshk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gshk *Resource) Attributes() googleStorageHmacKeyAttributes {
	return googleStorageHmacKeyAttributes{ref: terra.ReferenceResource(gshk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gshk *Resource) ImportState(state io.Reader) error {
	gshk.state = &googleStorageHmacKeyState{}
	if err := json.NewDecoder(state).Decode(gshk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gshk.Type(), gshk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gshk *Resource) State() (*googleStorageHmacKeyState, bool) {
	return gshk.state, gshk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gshk *Resource) StateMust() *googleStorageHmacKeyState {
	if gshk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gshk.Type(), gshk.LocalName()))
	}
	return gshk.state
}

// Args contains the configurations for google_storage_hmac_key.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ServiceAccountEmail: string, required
	ServiceAccountEmail terra.StringValue `hcl:"service_account_email,attr" validate:"required"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleStorageHmacKeyAttributes struct {
	ref terra.Reference
}

// AccessId returns a reference to field access_id of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) AccessId() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("access_id"))
}

// Id returns a reference to field id of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("id"))
}

// Project returns a reference to field project of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("project"))
}

// Secret returns a reference to field secret of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("secret"))
}

// ServiceAccountEmail returns a reference to field service_account_email of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) ServiceAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("service_account_email"))
}

// State returns a reference to field state of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("state"))
}

// TimeCreated returns a reference to field time_created of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) TimeCreated() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("time_created"))
}

// Updated returns a reference to field updated of google_storage_hmac_key.
func (gshk googleStorageHmacKeyAttributes) Updated() terra.StringValue {
	return terra.ReferenceAsString(gshk.ref.Append("updated"))
}

func (gshk googleStorageHmacKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gshk.ref.Append("timeouts"))
}

type googleStorageHmacKeyState struct {
	AccessId            string         `json:"access_id"`
	Id                  string         `json:"id"`
	Project             string         `json:"project"`
	Secret              string         `json:"secret"`
	ServiceAccountEmail string         `json:"service_account_email"`
	State               string         `json:"state"`
	TimeCreated         string         `json:"time_created"`
	Updated             string         `json:"updated"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
