// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_looker_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_looker_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleLookerInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gli *Resource) Type() string {
	return "google_looker_instance"
}

// LocalName returns the local name for [Resource].
func (gli *Resource) LocalName() string {
	return gli.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gli *Resource) Configuration() interface{} {
	return gli.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gli *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gli)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gli *Resource) Dependencies() terra.Dependencies {
	return gli.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gli *Resource) LifecycleManagement() *terra.Lifecycle {
	return gli.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gli *Resource) Attributes() googleLookerInstanceAttributes {
	return googleLookerInstanceAttributes{ref: terra.ReferenceResource(gli)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gli *Resource) ImportState(state io.Reader) error {
	gli.state = &googleLookerInstanceState{}
	if err := json.NewDecoder(state).Decode(gli.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gli.Type(), gli.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gli *Resource) State() (*googleLookerInstanceState, bool) {
	return gli.state, gli.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gli *Resource) StateMust() *googleLookerInstanceState {
	if gli.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gli.Type(), gli.LocalName()))
	}
	return gli.state
}

// Args contains the configurations for google_looker_instance.
type Args struct {
	// ConsumerNetwork: string, optional
	ConsumerNetwork terra.StringValue `hcl:"consumer_network,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformEdition: string, optional
	PlatformEdition terra.StringValue `hcl:"platform_edition,attr"`
	// PrivateIpEnabled: bool, optional
	PrivateIpEnabled terra.BoolValue `hcl:"private_ip_enabled,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PublicIpEnabled: bool, optional
	PublicIpEnabled terra.BoolValue `hcl:"public_ip_enabled,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReservedRange: string, optional
	ReservedRange terra.StringValue `hcl:"reserved_range,attr"`
	// AdminSettings: optional
	AdminSettings *AdminSettings `hcl:"admin_settings,block"`
	// CustomDomain: optional
	CustomDomain *CustomDomain `hcl:"custom_domain,block"`
	// DenyMaintenancePeriod: optional
	DenyMaintenancePeriod *DenyMaintenancePeriod `hcl:"deny_maintenance_period,block"`
	// EncryptionConfig: optional
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *MaintenanceWindow `hcl:"maintenance_window,block"`
	// OauthConfig: optional
	OauthConfig *OauthConfig `hcl:"oauth_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UserMetadata: optional
	UserMetadata *UserMetadata `hcl:"user_metadata,block"`
}

type googleLookerInstanceAttributes struct {
	ref terra.Reference
}

// ConsumerNetwork returns a reference to field consumer_network of google_looker_instance.
func (gli googleLookerInstanceAttributes) ConsumerNetwork() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("consumer_network"))
}

// CreateTime returns a reference to field create_time of google_looker_instance.
func (gli googleLookerInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("create_time"))
}

// EgressPublicIp returns a reference to field egress_public_ip of google_looker_instance.
func (gli googleLookerInstanceAttributes) EgressPublicIp() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("egress_public_ip"))
}

// Id returns a reference to field id of google_looker_instance.
func (gli googleLookerInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("id"))
}

// IngressPrivateIp returns a reference to field ingress_private_ip of google_looker_instance.
func (gli googleLookerInstanceAttributes) IngressPrivateIp() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("ingress_private_ip"))
}

// IngressPublicIp returns a reference to field ingress_public_ip of google_looker_instance.
func (gli googleLookerInstanceAttributes) IngressPublicIp() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("ingress_public_ip"))
}

// LookerUri returns a reference to field looker_uri of google_looker_instance.
func (gli googleLookerInstanceAttributes) LookerUri() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("looker_uri"))
}

// LookerVersion returns a reference to field looker_version of google_looker_instance.
func (gli googleLookerInstanceAttributes) LookerVersion() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("looker_version"))
}

// Name returns a reference to field name of google_looker_instance.
func (gli googleLookerInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("name"))
}

// PlatformEdition returns a reference to field platform_edition of google_looker_instance.
func (gli googleLookerInstanceAttributes) PlatformEdition() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("platform_edition"))
}

// PrivateIpEnabled returns a reference to field private_ip_enabled of google_looker_instance.
func (gli googleLookerInstanceAttributes) PrivateIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gli.ref.Append("private_ip_enabled"))
}

// Project returns a reference to field project of google_looker_instance.
func (gli googleLookerInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("project"))
}

// PublicIpEnabled returns a reference to field public_ip_enabled of google_looker_instance.
func (gli googleLookerInstanceAttributes) PublicIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(gli.ref.Append("public_ip_enabled"))
}

// Region returns a reference to field region of google_looker_instance.
func (gli googleLookerInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("region"))
}

// ReservedRange returns a reference to field reserved_range of google_looker_instance.
func (gli googleLookerInstanceAttributes) ReservedRange() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("reserved_range"))
}

// UpdateTime returns a reference to field update_time of google_looker_instance.
func (gli googleLookerInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(gli.ref.Append("update_time"))
}

func (gli googleLookerInstanceAttributes) AdminSettings() terra.ListValue[AdminSettingsAttributes] {
	return terra.ReferenceAsList[AdminSettingsAttributes](gli.ref.Append("admin_settings"))
}

func (gli googleLookerInstanceAttributes) CustomDomain() terra.ListValue[CustomDomainAttributes] {
	return terra.ReferenceAsList[CustomDomainAttributes](gli.ref.Append("custom_domain"))
}

func (gli googleLookerInstanceAttributes) DenyMaintenancePeriod() terra.ListValue[DenyMaintenancePeriodAttributes] {
	return terra.ReferenceAsList[DenyMaintenancePeriodAttributes](gli.ref.Append("deny_maintenance_period"))
}

func (gli googleLookerInstanceAttributes) EncryptionConfig() terra.ListValue[EncryptionConfigAttributes] {
	return terra.ReferenceAsList[EncryptionConfigAttributes](gli.ref.Append("encryption_config"))
}

func (gli googleLookerInstanceAttributes) MaintenanceWindow() terra.ListValue[MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[MaintenanceWindowAttributes](gli.ref.Append("maintenance_window"))
}

func (gli googleLookerInstanceAttributes) OauthConfig() terra.ListValue[OauthConfigAttributes] {
	return terra.ReferenceAsList[OauthConfigAttributes](gli.ref.Append("oauth_config"))
}

func (gli googleLookerInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gli.ref.Append("timeouts"))
}

func (gli googleLookerInstanceAttributes) UserMetadata() terra.ListValue[UserMetadataAttributes] {
	return terra.ReferenceAsList[UserMetadataAttributes](gli.ref.Append("user_metadata"))
}

type googleLookerInstanceState struct {
	ConsumerNetwork       string                       `json:"consumer_network"`
	CreateTime            string                       `json:"create_time"`
	EgressPublicIp        string                       `json:"egress_public_ip"`
	Id                    string                       `json:"id"`
	IngressPrivateIp      string                       `json:"ingress_private_ip"`
	IngressPublicIp       string                       `json:"ingress_public_ip"`
	LookerUri             string                       `json:"looker_uri"`
	LookerVersion         string                       `json:"looker_version"`
	Name                  string                       `json:"name"`
	PlatformEdition       string                       `json:"platform_edition"`
	PrivateIpEnabled      bool                         `json:"private_ip_enabled"`
	Project               string                       `json:"project"`
	PublicIpEnabled       bool                         `json:"public_ip_enabled"`
	Region                string                       `json:"region"`
	ReservedRange         string                       `json:"reserved_range"`
	UpdateTime            string                       `json:"update_time"`
	AdminSettings         []AdminSettingsState         `json:"admin_settings"`
	CustomDomain          []CustomDomainState          `json:"custom_domain"`
	DenyMaintenancePeriod []DenyMaintenancePeriodState `json:"deny_maintenance_period"`
	EncryptionConfig      []EncryptionConfigState      `json:"encryption_config"`
	MaintenanceWindow     []MaintenanceWindowState     `json:"maintenance_window"`
	OauthConfig           []OauthConfigState           `json:"oauth_config"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
	UserMetadata          []UserMetadataState          `json:"user_metadata"`
}
