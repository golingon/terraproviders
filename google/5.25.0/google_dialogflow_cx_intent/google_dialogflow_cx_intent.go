// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_dialogflow_cx_intent

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_dialogflow_cx_intent.
type Resource struct {
	Name      string
	Args      Args
	state     *googleDialogflowCxIntentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gdci *Resource) Type() string {
	return "google_dialogflow_cx_intent"
}

// LocalName returns the local name for [Resource].
func (gdci *Resource) LocalName() string {
	return gdci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gdci *Resource) Configuration() interface{} {
	return gdci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gdci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gdci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gdci *Resource) Dependencies() terra.Dependencies {
	return gdci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gdci *Resource) LifecycleManagement() *terra.Lifecycle {
	return gdci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gdci *Resource) Attributes() googleDialogflowCxIntentAttributes {
	return googleDialogflowCxIntentAttributes{ref: terra.ReferenceResource(gdci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gdci *Resource) ImportState(state io.Reader) error {
	gdci.state = &googleDialogflowCxIntentState{}
	if err := json.NewDecoder(state).Decode(gdci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdci.Type(), gdci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gdci *Resource) State() (*googleDialogflowCxIntentState, bool) {
	return gdci.state, gdci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gdci *Resource) StateMust() *googleDialogflowCxIntentState {
	if gdci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdci.Type(), gdci.LocalName()))
	}
	return gdci.state
}

// Args contains the configurations for google_dialogflow_cx_intent.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsDefaultNegativeIntent: bool, optional
	IsDefaultNegativeIntent terra.BoolValue `hcl:"is_default_negative_intent,attr"`
	// IsDefaultWelcomeIntent: bool, optional
	IsDefaultWelcomeIntent terra.BoolValue `hcl:"is_default_welcome_intent,attr"`
	// IsFallback: bool, optional
	IsFallback terra.BoolValue `hcl:"is_fallback,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Parent: string, optional
	Parent terra.StringValue `hcl:"parent,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Parameters: min=0
	Parameters []Parameters `hcl:"parameters,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TrainingPhrases: min=0
	TrainingPhrases []TrainingPhrases `hcl:"training_phrases,block" validate:"min=0"`
}

type googleDialogflowCxIntentAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdci.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("id"))
}

// IsDefaultNegativeIntent returns a reference to field is_default_negative_intent of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) IsDefaultNegativeIntent() terra.BoolValue {
	return terra.ReferenceAsBool(gdci.ref.Append("is_default_negative_intent"))
}

// IsDefaultWelcomeIntent returns a reference to field is_default_welcome_intent of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) IsDefaultWelcomeIntent() terra.BoolValue {
	return terra.ReferenceAsBool(gdci.ref.Append("is_default_welcome_intent"))
}

// IsFallback returns a reference to field is_fallback of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) IsFallback() terra.BoolValue {
	return terra.ReferenceAsBool(gdci.ref.Append("is_fallback"))
}

// Labels returns a reference to field labels of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdci.ref.Append("labels"))
}

// LanguageCode returns a reference to field language_code of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("language_code"))
}

// Name returns a reference to field name of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("name"))
}

// Parent returns a reference to field parent of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gdci.ref.Append("parent"))
}

// Priority returns a reference to field priority of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(gdci.ref.Append("priority"))
}

// TerraformLabels returns a reference to field terraform_labels of google_dialogflow_cx_intent.
func (gdci googleDialogflowCxIntentAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gdci.ref.Append("terraform_labels"))
}

func (gdci googleDialogflowCxIntentAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](gdci.ref.Append("parameters"))
}

func (gdci googleDialogflowCxIntentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gdci.ref.Append("timeouts"))
}

func (gdci googleDialogflowCxIntentAttributes) TrainingPhrases() terra.ListValue[TrainingPhrasesAttributes] {
	return terra.ReferenceAsList[TrainingPhrasesAttributes](gdci.ref.Append("training_phrases"))
}

type googleDialogflowCxIntentState struct {
	Description             string                 `json:"description"`
	DisplayName             string                 `json:"display_name"`
	EffectiveLabels         map[string]string      `json:"effective_labels"`
	Id                      string                 `json:"id"`
	IsDefaultNegativeIntent bool                   `json:"is_default_negative_intent"`
	IsDefaultWelcomeIntent  bool                   `json:"is_default_welcome_intent"`
	IsFallback              bool                   `json:"is_fallback"`
	Labels                  map[string]string      `json:"labels"`
	LanguageCode            string                 `json:"language_code"`
	Name                    string                 `json:"name"`
	Parent                  string                 `json:"parent"`
	Priority                float64                `json:"priority"`
	TerraformLabels         map[string]string      `json:"terraform_labels"`
	Parameters              []ParametersState      `json:"parameters"`
	Timeouts                *TimeoutsState         `json:"timeouts"`
	TrainingPhrases         []TrainingPhrasesState `json:"training_phrases"`
}
