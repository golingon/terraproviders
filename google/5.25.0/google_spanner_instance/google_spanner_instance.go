// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_spanner_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_spanner_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *googleSpannerInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gsi *Resource) Type() string {
	return "google_spanner_instance"
}

// LocalName returns the local name for [Resource].
func (gsi *Resource) LocalName() string {
	return gsi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gsi *Resource) Configuration() interface{} {
	return gsi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gsi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gsi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gsi *Resource) Dependencies() terra.Dependencies {
	return gsi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gsi *Resource) LifecycleManagement() *terra.Lifecycle {
	return gsi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gsi *Resource) Attributes() googleSpannerInstanceAttributes {
	return googleSpannerInstanceAttributes{ref: terra.ReferenceResource(gsi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gsi *Resource) ImportState(state io.Reader) error {
	gsi.state = &googleSpannerInstanceState{}
	if err := json.NewDecoder(state).Decode(gsi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gsi.Type(), gsi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gsi *Resource) State() (*googleSpannerInstanceState, bool) {
	return gsi.state, gsi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gsi *Resource) StateMust() *googleSpannerInstanceState {
	if gsi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gsi.Type(), gsi.LocalName()))
	}
	return gsi.state
}

// Args contains the configurations for google_spanner_instance.
type Args struct {
	// Config: string, required
	Config terra.StringValue `hcl:"config,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NumNodes: number, optional
	NumNodes terra.NumberValue `hcl:"num_nodes,attr"`
	// ProcessingUnits: number, optional
	ProcessingUnits terra.NumberValue `hcl:"processing_units,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// AutoscalingConfig: optional
	AutoscalingConfig *AutoscalingConfig `hcl:"autoscaling_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleSpannerInstanceAttributes struct {
	ref terra.Reference
}

// Config returns a reference to field config of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) Config() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("config"))
}

// DisplayName returns a reference to field display_name of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("display_name"))
}

// EffectiveLabels returns a reference to field effective_labels of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsi.ref.Append("effective_labels"))
}

// ForceDestroy returns a reference to field force_destroy of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(gsi.ref.Append("force_destroy"))
}

// Id returns a reference to field id of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("id"))
}

// Labels returns a reference to field labels of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsi.ref.Append("labels"))
}

// Name returns a reference to field name of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("name"))
}

// NumNodes returns a reference to field num_nodes of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(gsi.ref.Append("num_nodes"))
}

// ProcessingUnits returns a reference to field processing_units of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) ProcessingUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(gsi.ref.Append("processing_units"))
}

// Project returns a reference to field project of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("project"))
}

// State returns a reference to field state of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("state"))
}

// TerraformLabels returns a reference to field terraform_labels of google_spanner_instance.
func (gsi googleSpannerInstanceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gsi.ref.Append("terraform_labels"))
}

func (gsi googleSpannerInstanceAttributes) AutoscalingConfig() terra.ListValue[AutoscalingConfigAttributes] {
	return terra.ReferenceAsList[AutoscalingConfigAttributes](gsi.ref.Append("autoscaling_config"))
}

func (gsi googleSpannerInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gsi.ref.Append("timeouts"))
}

type googleSpannerInstanceState struct {
	Config            string                   `json:"config"`
	DisplayName       string                   `json:"display_name"`
	EffectiveLabels   map[string]string        `json:"effective_labels"`
	ForceDestroy      bool                     `json:"force_destroy"`
	Id                string                   `json:"id"`
	Labels            map[string]string        `json:"labels"`
	Name              string                   `json:"name"`
	NumNodes          float64                  `json:"num_nodes"`
	ProcessingUnits   float64                  `json:"processing_units"`
	Project           string                   `json:"project"`
	State             string                   `json:"state"`
	TerraformLabels   map[string]string        `json:"terraform_labels"`
	AutoscalingConfig []AutoscalingConfigState `json:"autoscaling_config"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
