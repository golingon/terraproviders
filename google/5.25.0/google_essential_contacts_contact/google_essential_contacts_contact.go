// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_essential_contacts_contact

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource google_essential_contacts_contact.
type Resource struct {
	Name      string
	Args      Args
	state     *googleEssentialContactsContactState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (gecc *Resource) Type() string {
	return "google_essential_contacts_contact"
}

// LocalName returns the local name for [Resource].
func (gecc *Resource) LocalName() string {
	return gecc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (gecc *Resource) Configuration() interface{} {
	return gecc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (gecc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(gecc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (gecc *Resource) Dependencies() terra.Dependencies {
	return gecc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (gecc *Resource) LifecycleManagement() *terra.Lifecycle {
	return gecc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (gecc *Resource) Attributes() googleEssentialContactsContactAttributes {
	return googleEssentialContactsContactAttributes{ref: terra.ReferenceResource(gecc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (gecc *Resource) ImportState(state io.Reader) error {
	gecc.state = &googleEssentialContactsContactState{}
	if err := json.NewDecoder(state).Decode(gecc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gecc.Type(), gecc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (gecc *Resource) State() (*googleEssentialContactsContactState, bool) {
	return gecc.state, gecc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (gecc *Resource) StateMust() *googleEssentialContactsContactState {
	if gecc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gecc.Type(), gecc.LocalName()))
	}
	return gecc.state
}

// Args contains the configurations for google_essential_contacts_contact.
type Args struct {
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageTag: string, required
	LanguageTag terra.StringValue `hcl:"language_tag,attr" validate:"required"`
	// NotificationCategorySubscriptions: list of string, required
	NotificationCategorySubscriptions terra.ListValue[terra.StringValue] `hcl:"notification_category_subscriptions,attr" validate:"required"`
	// Parent: string, required
	Parent terra.StringValue `hcl:"parent,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type googleEssentialContactsContactAttributes struct {
	ref terra.Reference
}

// Email returns a reference to field email of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(gecc.ref.Append("email"))
}

// Id returns a reference to field id of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gecc.ref.Append("id"))
}

// LanguageTag returns a reference to field language_tag of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) LanguageTag() terra.StringValue {
	return terra.ReferenceAsString(gecc.ref.Append("language_tag"))
}

// Name returns a reference to field name of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gecc.ref.Append("name"))
}

// NotificationCategorySubscriptions returns a reference to field notification_category_subscriptions of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) NotificationCategorySubscriptions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gecc.ref.Append("notification_category_subscriptions"))
}

// Parent returns a reference to field parent of google_essential_contacts_contact.
func (gecc googleEssentialContactsContactAttributes) Parent() terra.StringValue {
	return terra.ReferenceAsString(gecc.ref.Append("parent"))
}

func (gecc googleEssentialContactsContactAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](gecc.ref.Append("timeouts"))
}

type googleEssentialContactsContactState struct {
	Email                             string         `json:"email"`
	Id                                string         `json:"id"`
	LanguageTag                       string         `json:"language_tag"`
	Name                              string         `json:"name"`
	NotificationCategorySubscriptions []string       `json:"notification_category_subscriptions"`
	Parent                            string         `json:"parent"`
	Timeouts                          *TimeoutsState `json:"timeouts"`
}
