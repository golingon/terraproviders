// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package google_apigee_keystores_aliases_self_signed_cert

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Subject struct {
	// CommonName: string, optional
	CommonName terra.StringValue `hcl:"common_name,attr"`
	// CountryCode: string, optional
	CountryCode terra.StringValue `hcl:"country_code,attr"`
	// Email: string, optional
	Email terra.StringValue `hcl:"email,attr"`
	// Locality: string, optional
	Locality terra.StringValue `hcl:"locality,attr"`
	// Org: string, optional
	Org terra.StringValue `hcl:"org,attr"`
	// OrgUnit: string, optional
	OrgUnit terra.StringValue `hcl:"org_unit,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
}

type SubjectAlternativeDnsNames struct {
	// SubjectAlternativeName: string, optional
	SubjectAlternativeName terra.StringValue `hcl:"subject_alternative_name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type CertsInfoAttributes struct {
	ref terra.Reference
}

func (ci CertsInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CertsInfoAttributes) InternalWithRef(ref terra.Reference) CertsInfoAttributes {
	return CertsInfoAttributes{ref: ref}
}

func (ci CertsInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CertsInfoAttributes) CertInfo() terra.ListValue[CertsInfoCertInfoAttributes] {
	return terra.ReferenceAsList[CertsInfoCertInfoAttributes](ci.ref.Append("cert_info"))
}

type CertsInfoCertInfoAttributes struct {
	ref terra.Reference
}

func (ci CertsInfoCertInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci CertsInfoCertInfoAttributes) InternalWithRef(ref terra.Reference) CertsInfoCertInfoAttributes {
	return CertsInfoCertInfoAttributes{ref: ref}
}

func (ci CertsInfoCertInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci CertsInfoCertInfoAttributes) BasicConstraints() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("basic_constraints"))
}

func (ci CertsInfoCertInfoAttributes) ExpiryDate() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("expiry_date"))
}

func (ci CertsInfoCertInfoAttributes) IsValid() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("is_valid"))
}

func (ci CertsInfoCertInfoAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("issuer"))
}

func (ci CertsInfoCertInfoAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("public_key"))
}

func (ci CertsInfoCertInfoAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("serial_number"))
}

func (ci CertsInfoCertInfoAttributes) SigAlgName() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("sig_alg_name"))
}

func (ci CertsInfoCertInfoAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("subject"))
}

func (ci CertsInfoCertInfoAttributes) SubjectAlternativeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ci.ref.Append("subject_alternative_names"))
}

func (ci CertsInfoCertInfoAttributes) ValidFrom() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("valid_from"))
}

func (ci CertsInfoCertInfoAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("version"))
}

type SubjectAttributes struct {
	ref terra.Reference
}

func (s SubjectAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SubjectAttributes) InternalWithRef(ref terra.Reference) SubjectAttributes {
	return SubjectAttributes{ref: ref}
}

func (s SubjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SubjectAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("common_name"))
}

func (s SubjectAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("country_code"))
}

func (s SubjectAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("email"))
}

func (s SubjectAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("locality"))
}

func (s SubjectAttributes) Org() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("org"))
}

func (s SubjectAttributes) OrgUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("org_unit"))
}

func (s SubjectAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

type SubjectAlternativeDnsNamesAttributes struct {
	ref terra.Reference
}

func (sadn SubjectAlternativeDnsNamesAttributes) InternalRef() (terra.Reference, error) {
	return sadn.ref, nil
}

func (sadn SubjectAlternativeDnsNamesAttributes) InternalWithRef(ref terra.Reference) SubjectAlternativeDnsNamesAttributes {
	return SubjectAlternativeDnsNamesAttributes{ref: ref}
}

func (sadn SubjectAlternativeDnsNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sadn.ref.InternalTokens()
}

func (sadn SubjectAlternativeDnsNamesAttributes) SubjectAlternativeName() terra.StringValue {
	return terra.ReferenceAsString(sadn.ref.Append("subject_alternative_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type CertsInfoState struct {
	CertInfo []CertsInfoCertInfoState `json:"cert_info"`
}

type CertsInfoCertInfoState struct {
	BasicConstraints        string   `json:"basic_constraints"`
	ExpiryDate              string   `json:"expiry_date"`
	IsValid                 string   `json:"is_valid"`
	Issuer                  string   `json:"issuer"`
	PublicKey               string   `json:"public_key"`
	SerialNumber            string   `json:"serial_number"`
	SigAlgName              string   `json:"sig_alg_name"`
	Subject                 string   `json:"subject"`
	SubjectAlternativeNames []string `json:"subject_alternative_names"`
	ValidFrom               string   `json:"valid_from"`
	Version                 float64  `json:"version"`
}

type SubjectState struct {
	CommonName  string `json:"common_name"`
	CountryCode string `json:"country_code"`
	Email       string `json:"email"`
	Locality    string `json:"locality"`
	Org         string `json:"org"`
	OrgUnit     string `json:"org_unit"`
	State       string `json:"state"`
}

type SubjectAlternativeDnsNamesState struct {
	SubjectAlternativeName string `json:"subject_alternative_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
