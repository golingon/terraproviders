// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datalosspreventionjobtrigger

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type InspectJob struct {
	// InspectTemplateName: string, optional
	InspectTemplateName terra.StringValue `hcl:"inspect_template_name,attr"`
	// Actions: min=0
	Actions []Actions `hcl:"actions,block" validate:"min=0"`
	// InspectConfig: optional
	InspectConfig *InspectConfig `hcl:"inspect_config,block"`
	// StorageConfig: required
	StorageConfig *StorageConfig `hcl:"storage_config,block" validate:"required"`
}

type Actions struct {
	// Deidentify: optional
	Deidentify *Deidentify `hcl:"deidentify,block"`
	// JobNotificationEmails: optional
	JobNotificationEmails *JobNotificationEmails `hcl:"job_notification_emails,block"`
	// PubSub: optional
	PubSub *PubSub `hcl:"pub_sub,block"`
	// PublishFindingsToCloudDataCatalog: optional
	PublishFindingsToCloudDataCatalog *PublishFindingsToCloudDataCatalog `hcl:"publish_findings_to_cloud_data_catalog,block"`
	// PublishSummaryToCscc: optional
	PublishSummaryToCscc *PublishSummaryToCscc `hcl:"publish_summary_to_cscc,block"`
	// PublishToStackdriver: optional
	PublishToStackdriver *PublishToStackdriver `hcl:"publish_to_stackdriver,block"`
	// SaveFindings: optional
	SaveFindings *SaveFindings `hcl:"save_findings,block"`
}

type Deidentify struct {
	// CloudStorageOutput: string, required
	CloudStorageOutput terra.StringValue `hcl:"cloud_storage_output,attr" validate:"required"`
	// FileTypesToTransform: list of string, optional
	FileTypesToTransform terra.ListValue[terra.StringValue] `hcl:"file_types_to_transform,attr"`
	// TransformationConfig: optional
	TransformationConfig *TransformationConfig `hcl:"transformation_config,block"`
	// TransformationDetailsStorageConfig: optional
	TransformationDetailsStorageConfig *TransformationDetailsStorageConfig `hcl:"transformation_details_storage_config,block"`
}

type TransformationConfig struct {
	// DeidentifyTemplate: string, optional
	DeidentifyTemplate terra.StringValue `hcl:"deidentify_template,attr"`
	// ImageRedactTemplate: string, optional
	ImageRedactTemplate terra.StringValue `hcl:"image_redact_template,attr"`
	// StructuredDeidentifyTemplate: string, optional
	StructuredDeidentifyTemplate terra.StringValue `hcl:"structured_deidentify_template,attr"`
}

type TransformationDetailsStorageConfig struct {
	// TransformationDetailsStorageConfigTable: required
	Table *TransformationDetailsStorageConfigTable `hcl:"table,block" validate:"required"`
}

type TransformationDetailsStorageConfigTable struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, optional
	TableId terra.StringValue `hcl:"table_id,attr"`
}

type JobNotificationEmails struct{}

type PubSub struct {
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type PublishFindingsToCloudDataCatalog struct{}

type PublishSummaryToCscc struct{}

type PublishToStackdriver struct{}

type SaveFindings struct {
	// OutputConfig: required
	OutputConfig *OutputConfig `hcl:"output_config,block" validate:"required"`
}

type OutputConfig struct {
	// OutputSchema: string, optional
	OutputSchema terra.StringValue `hcl:"output_schema,attr"`
	// OutputConfigTable: required
	Table *OutputConfigTable `hcl:"table,block" validate:"required"`
}

type OutputConfigTable struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, optional
	TableId terra.StringValue `hcl:"table_id,attr"`
}

type InspectConfig struct {
	// ExcludeInfoTypes: bool, optional
	ExcludeInfoTypes terra.BoolValue `hcl:"exclude_info_types,attr"`
	// IncludeQuote: bool, optional
	IncludeQuote terra.BoolValue `hcl:"include_quote,attr"`
	// MinLikelihood: string, optional
	MinLikelihood terra.StringValue `hcl:"min_likelihood,attr"`
	// CustomInfoTypes: min=0
	CustomInfoTypes []CustomInfoTypes `hcl:"custom_info_types,block" validate:"min=0"`
	// InspectConfigInfoTypes: min=0
	InfoTypes []InspectConfigInfoTypes `hcl:"info_types,block" validate:"min=0"`
	// Limits: optional
	Limits *Limits `hcl:"limits,block"`
	// RuleSet: min=0
	RuleSet []RuleSet `hcl:"rule_set,block" validate:"min=0"`
}

type CustomInfoTypes struct {
	// ExclusionType: string, optional
	ExclusionType terra.StringValue `hcl:"exclusion_type,attr"`
	// Likelihood: string, optional
	Likelihood terra.StringValue `hcl:"likelihood,attr"`
	// CustomInfoTypesDictionary: optional
	Dictionary *CustomInfoTypesDictionary `hcl:"dictionary,block"`
	// CustomInfoTypesInfoType: required
	InfoType *CustomInfoTypesInfoType `hcl:"info_type,block" validate:"required"`
	// CustomInfoTypesRegex: optional
	Regex *CustomInfoTypesRegex `hcl:"regex,block"`
	// CustomInfoTypesSensitivityScore: optional
	SensitivityScore *CustomInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
	// StoredType: optional
	StoredType *StoredType `hcl:"stored_type,block"`
	// SurrogateType: optional
	SurrogateType *SurrogateType `hcl:"surrogate_type,block"`
}

type CustomInfoTypesDictionary struct {
	// CustomInfoTypesDictionaryCloudStoragePath: optional
	CloudStoragePath *CustomInfoTypesDictionaryCloudStoragePath `hcl:"cloud_storage_path,block"`
	// CustomInfoTypesDictionaryWordList: optional
	WordList *CustomInfoTypesDictionaryWordList `hcl:"word_list,block"`
}

type CustomInfoTypesDictionaryCloudStoragePath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CustomInfoTypesDictionaryWordList struct {
	// Words: list of string, required
	Words terra.ListValue[terra.StringValue] `hcl:"words,attr" validate:"required"`
}

type CustomInfoTypesInfoType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// CustomInfoTypesInfoTypeSensitivityScore: optional
	SensitivityScore *CustomInfoTypesInfoTypeSensitivityScore `hcl:"sensitivity_score,block"`
}

type CustomInfoTypesInfoTypeSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type CustomInfoTypesRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type CustomInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type StoredType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type SurrogateType struct{}

type InspectConfigInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// InspectConfigInfoTypesSensitivityScore: optional
	SensitivityScore *InspectConfigInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type InspectConfigInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type Limits struct {
	// MaxFindingsPerItem: number, optional
	MaxFindingsPerItem terra.NumberValue `hcl:"max_findings_per_item,attr"`
	// MaxFindingsPerRequest: number, optional
	MaxFindingsPerRequest terra.NumberValue `hcl:"max_findings_per_request,attr"`
	// MaxFindingsPerInfoType: min=0
	MaxFindingsPerInfoType []MaxFindingsPerInfoType `hcl:"max_findings_per_info_type,block" validate:"min=0"`
}

type MaxFindingsPerInfoType struct {
	// MaxFindings: number, optional
	MaxFindings terra.NumberValue `hcl:"max_findings,attr"`
	// MaxFindingsPerInfoTypeInfoType: optional
	InfoType *MaxFindingsPerInfoTypeInfoType `hcl:"info_type,block"`
}

type MaxFindingsPerInfoTypeInfoType struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// MaxFindingsPerInfoTypeInfoTypeSensitivityScore: optional
	SensitivityScore *MaxFindingsPerInfoTypeInfoTypeSensitivityScore `hcl:"sensitivity_score,block"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type RuleSet struct {
	// RuleSetInfoTypes: min=0
	InfoTypes []RuleSetInfoTypes `hcl:"info_types,block" validate:"min=0"`
	// Rules: min=1
	Rules []Rules `hcl:"rules,block" validate:"min=1"`
}

type RuleSetInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// RuleSetInfoTypesSensitivityScore: optional
	SensitivityScore *RuleSetInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type RuleSetInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type Rules struct {
	// ExclusionRule: optional
	ExclusionRule *ExclusionRule `hcl:"exclusion_rule,block"`
	// HotwordRule: optional
	HotwordRule *HotwordRule `hcl:"hotword_rule,block"`
}

type ExclusionRule struct {
	// MatchingType: string, required
	MatchingType terra.StringValue `hcl:"matching_type,attr" validate:"required"`
	// ExclusionRuleDictionary: optional
	Dictionary *ExclusionRuleDictionary `hcl:"dictionary,block"`
	// ExcludeByHotword: optional
	ExcludeByHotword *ExcludeByHotword `hcl:"exclude_by_hotword,block"`
	// ExcludeInfoTypes: optional
	ExcludeInfoTypes *ExcludeInfoTypes `hcl:"exclude_info_types,block"`
	// ExclusionRuleRegex: optional
	Regex *ExclusionRuleRegex `hcl:"regex,block"`
}

type ExclusionRuleDictionary struct {
	// ExclusionRuleDictionaryCloudStoragePath: optional
	CloudStoragePath *ExclusionRuleDictionaryCloudStoragePath `hcl:"cloud_storage_path,block"`
	// ExclusionRuleDictionaryWordList: optional
	WordList *ExclusionRuleDictionaryWordList `hcl:"word_list,block"`
}

type ExclusionRuleDictionaryCloudStoragePath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type ExclusionRuleDictionaryWordList struct {
	// Words: list of string, required
	Words terra.ListValue[terra.StringValue] `hcl:"words,attr" validate:"required"`
}

type ExcludeByHotword struct {
	// ExcludeByHotwordHotwordRegex: optional
	HotwordRegex *ExcludeByHotwordHotwordRegex `hcl:"hotword_regex,block"`
	// ExcludeByHotwordProximity: optional
	Proximity *ExcludeByHotwordProximity `hcl:"proximity,block"`
}

type ExcludeByHotwordHotwordRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, optional
	Pattern terra.StringValue `hcl:"pattern,attr"`
}

type ExcludeByHotwordProximity struct {
	// WindowAfter: number, optional
	WindowAfter terra.NumberValue `hcl:"window_after,attr"`
	// WindowBefore: number, optional
	WindowBefore terra.NumberValue `hcl:"window_before,attr"`
}

type ExcludeInfoTypes struct {
	// ExcludeInfoTypesInfoTypes: min=1
	InfoTypes []ExcludeInfoTypesInfoTypes `hcl:"info_types,block" validate:"min=1"`
}

type ExcludeInfoTypesInfoTypes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ExcludeInfoTypesInfoTypesSensitivityScore: optional
	SensitivityScore *ExcludeInfoTypesInfoTypesSensitivityScore `hcl:"sensitivity_score,block"`
}

type ExcludeInfoTypesInfoTypesSensitivityScore struct {
	// Score: string, required
	Score terra.StringValue `hcl:"score,attr" validate:"required"`
}

type ExclusionRuleRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type HotwordRule struct {
	// HotwordRuleHotwordRegex: optional
	HotwordRegex *HotwordRuleHotwordRegex `hcl:"hotword_regex,block"`
	// LikelihoodAdjustment: optional
	LikelihoodAdjustment *LikelihoodAdjustment `hcl:"likelihood_adjustment,block"`
	// HotwordRuleProximity: optional
	Proximity *HotwordRuleProximity `hcl:"proximity,block"`
}

type HotwordRuleHotwordRegex struct {
	// GroupIndexes: list of number, optional
	GroupIndexes terra.ListValue[terra.NumberValue] `hcl:"group_indexes,attr"`
	// Pattern: string, optional
	Pattern terra.StringValue `hcl:"pattern,attr"`
}

type LikelihoodAdjustment struct {
	// FixedLikelihood: string, optional
	FixedLikelihood terra.StringValue `hcl:"fixed_likelihood,attr"`
	// RelativeLikelihood: number, optional
	RelativeLikelihood terra.NumberValue `hcl:"relative_likelihood,attr"`
}

type HotwordRuleProximity struct {
	// WindowAfter: number, optional
	WindowAfter terra.NumberValue `hcl:"window_after,attr"`
	// WindowBefore: number, optional
	WindowBefore terra.NumberValue `hcl:"window_before,attr"`
}

type StorageConfig struct {
	// BigQueryOptions: optional
	BigQueryOptions *BigQueryOptions `hcl:"big_query_options,block"`
	// CloudStorageOptions: optional
	CloudStorageOptions *CloudStorageOptions `hcl:"cloud_storage_options,block"`
	// DatastoreOptions: optional
	DatastoreOptions *DatastoreOptions `hcl:"datastore_options,block"`
	// HybridOptions: optional
	HybridOptions *HybridOptions `hcl:"hybrid_options,block"`
	// TimespanConfig: optional
	TimespanConfig *TimespanConfig `hcl:"timespan_config,block"`
}

type BigQueryOptions struct {
	// RowsLimit: number, optional
	RowsLimit terra.NumberValue `hcl:"rows_limit,attr"`
	// RowsLimitPercent: number, optional
	RowsLimitPercent terra.NumberValue `hcl:"rows_limit_percent,attr"`
	// SampleMethod: string, optional
	SampleMethod terra.StringValue `hcl:"sample_method,attr"`
	// ExcludedFields: min=0
	ExcludedFields []ExcludedFields `hcl:"excluded_fields,block" validate:"min=0"`
	// BigQueryOptionsIdentifyingFields: min=0
	IdentifyingFields []BigQueryOptionsIdentifyingFields `hcl:"identifying_fields,block" validate:"min=0"`
	// IncludedFields: min=0
	IncludedFields []IncludedFields `hcl:"included_fields,block" validate:"min=0"`
	// TableReference: required
	TableReference *TableReference `hcl:"table_reference,block" validate:"required"`
}

type ExcludedFields struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type BigQueryOptionsIdentifyingFields struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type IncludedFields struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TableReference struct {
	// DatasetId: string, required
	DatasetId terra.StringValue `hcl:"dataset_id,attr" validate:"required"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// TableId: string, required
	TableId terra.StringValue `hcl:"table_id,attr" validate:"required"`
}

type CloudStorageOptions struct {
	// BytesLimitPerFile: number, optional
	BytesLimitPerFile terra.NumberValue `hcl:"bytes_limit_per_file,attr"`
	// BytesLimitPerFilePercent: number, optional
	BytesLimitPerFilePercent terra.NumberValue `hcl:"bytes_limit_per_file_percent,attr"`
	// FileTypes: list of string, optional
	FileTypes terra.ListValue[terra.StringValue] `hcl:"file_types,attr"`
	// FilesLimitPercent: number, optional
	FilesLimitPercent terra.NumberValue `hcl:"files_limit_percent,attr"`
	// SampleMethod: string, optional
	SampleMethod terra.StringValue `hcl:"sample_method,attr"`
	// FileSet: required
	FileSet *FileSet `hcl:"file_set,block" validate:"required"`
}

type FileSet struct {
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// RegexFileSet: optional
	RegexFileSet *RegexFileSet `hcl:"regex_file_set,block"`
}

type RegexFileSet struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// ExcludeRegex: list of string, optional
	ExcludeRegex terra.ListValue[terra.StringValue] `hcl:"exclude_regex,attr"`
	// IncludeRegex: list of string, optional
	IncludeRegex terra.ListValue[terra.StringValue] `hcl:"include_regex,attr"`
}

type DatastoreOptions struct {
	// Kind: required
	Kind *Kind `hcl:"kind,block" validate:"required"`
	// PartitionId: required
	PartitionId *PartitionId `hcl:"partition_id,block" validate:"required"`
}

type Kind struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type PartitionId struct {
	// NamespaceId: string, optional
	NamespaceId terra.StringValue `hcl:"namespace_id,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
}

type HybridOptions struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// RequiredFindingLabelKeys: list of string, optional
	RequiredFindingLabelKeys terra.ListValue[terra.StringValue] `hcl:"required_finding_label_keys,attr"`
	// TableOptions: optional
	TableOptions *TableOptions `hcl:"table_options,block"`
}

type TableOptions struct {
	// TableOptionsIdentifyingFields: min=0
	IdentifyingFields []TableOptionsIdentifyingFields `hcl:"identifying_fields,block" validate:"min=0"`
}

type TableOptionsIdentifyingFields struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type TimespanConfig struct {
	// EnableAutoPopulationOfTimespanConfig: bool, optional
	EnableAutoPopulationOfTimespanConfig terra.BoolValue `hcl:"enable_auto_population_of_timespan_config,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimestampField: required
	TimestampField *TimestampField `hcl:"timestamp_field,block" validate:"required"`
}

type TimestampField struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Triggers struct {
	// Manual: optional
	Manual *Manual `hcl:"manual,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
}

type Manual struct{}

type Schedule struct {
	// RecurrencePeriodDuration: string, optional
	RecurrencePeriodDuration terra.StringValue `hcl:"recurrence_period_duration,attr"`
}

type InspectJobAttributes struct {
	ref terra.Reference
}

func (ij InspectJobAttributes) InternalRef() (terra.Reference, error) {
	return ij.ref, nil
}

func (ij InspectJobAttributes) InternalWithRef(ref terra.Reference) InspectJobAttributes {
	return InspectJobAttributes{ref: ref}
}

func (ij InspectJobAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ij.ref.InternalTokens()
}

func (ij InspectJobAttributes) InspectTemplateName() terra.StringValue {
	return terra.ReferenceAsString(ij.ref.Append("inspect_template_name"))
}

func (ij InspectJobAttributes) Actions() terra.ListValue[ActionsAttributes] {
	return terra.ReferenceAsList[ActionsAttributes](ij.ref.Append("actions"))
}

func (ij InspectJobAttributes) InspectConfig() terra.ListValue[InspectConfigAttributes] {
	return terra.ReferenceAsList[InspectConfigAttributes](ij.ref.Append("inspect_config"))
}

func (ij InspectJobAttributes) StorageConfig() terra.ListValue[StorageConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigAttributes](ij.ref.Append("storage_config"))
}

type ActionsAttributes struct {
	ref terra.Reference
}

func (a ActionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionsAttributes) InternalWithRef(ref terra.Reference) ActionsAttributes {
	return ActionsAttributes{ref: ref}
}

func (a ActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionsAttributes) Deidentify() terra.ListValue[DeidentifyAttributes] {
	return terra.ReferenceAsList[DeidentifyAttributes](a.ref.Append("deidentify"))
}

func (a ActionsAttributes) JobNotificationEmails() terra.ListValue[JobNotificationEmailsAttributes] {
	return terra.ReferenceAsList[JobNotificationEmailsAttributes](a.ref.Append("job_notification_emails"))
}

func (a ActionsAttributes) PubSub() terra.ListValue[PubSubAttributes] {
	return terra.ReferenceAsList[PubSubAttributes](a.ref.Append("pub_sub"))
}

func (a ActionsAttributes) PublishFindingsToCloudDataCatalog() terra.ListValue[PublishFindingsToCloudDataCatalogAttributes] {
	return terra.ReferenceAsList[PublishFindingsToCloudDataCatalogAttributes](a.ref.Append("publish_findings_to_cloud_data_catalog"))
}

func (a ActionsAttributes) PublishSummaryToCscc() terra.ListValue[PublishSummaryToCsccAttributes] {
	return terra.ReferenceAsList[PublishSummaryToCsccAttributes](a.ref.Append("publish_summary_to_cscc"))
}

func (a ActionsAttributes) PublishToStackdriver() terra.ListValue[PublishToStackdriverAttributes] {
	return terra.ReferenceAsList[PublishToStackdriverAttributes](a.ref.Append("publish_to_stackdriver"))
}

func (a ActionsAttributes) SaveFindings() terra.ListValue[SaveFindingsAttributes] {
	return terra.ReferenceAsList[SaveFindingsAttributes](a.ref.Append("save_findings"))
}

type DeidentifyAttributes struct {
	ref terra.Reference
}

func (d DeidentifyAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DeidentifyAttributes) InternalWithRef(ref terra.Reference) DeidentifyAttributes {
	return DeidentifyAttributes{ref: ref}
}

func (d DeidentifyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DeidentifyAttributes) CloudStorageOutput() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("cloud_storage_output"))
}

func (d DeidentifyAttributes) FileTypesToTransform() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](d.ref.Append("file_types_to_transform"))
}

func (d DeidentifyAttributes) TransformationConfig() terra.ListValue[TransformationConfigAttributes] {
	return terra.ReferenceAsList[TransformationConfigAttributes](d.ref.Append("transformation_config"))
}

func (d DeidentifyAttributes) TransformationDetailsStorageConfig() terra.ListValue[TransformationDetailsStorageConfigAttributes] {
	return terra.ReferenceAsList[TransformationDetailsStorageConfigAttributes](d.ref.Append("transformation_details_storage_config"))
}

type TransformationConfigAttributes struct {
	ref terra.Reference
}

func (tc TransformationConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TransformationConfigAttributes) InternalWithRef(ref terra.Reference) TransformationConfigAttributes {
	return TransformationConfigAttributes{ref: ref}
}

func (tc TransformationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TransformationConfigAttributes) DeidentifyTemplate() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("deidentify_template"))
}

func (tc TransformationConfigAttributes) ImageRedactTemplate() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("image_redact_template"))
}

func (tc TransformationConfigAttributes) StructuredDeidentifyTemplate() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("structured_deidentify_template"))
}

type TransformationDetailsStorageConfigAttributes struct {
	ref terra.Reference
}

func (tdsc TransformationDetailsStorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return tdsc.ref, nil
}

func (tdsc TransformationDetailsStorageConfigAttributes) InternalWithRef(ref terra.Reference) TransformationDetailsStorageConfigAttributes {
	return TransformationDetailsStorageConfigAttributes{ref: ref}
}

func (tdsc TransformationDetailsStorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tdsc.ref.InternalTokens()
}

func (tdsc TransformationDetailsStorageConfigAttributes) Table() terra.ListValue[TransformationDetailsStorageConfigTableAttributes] {
	return terra.ReferenceAsList[TransformationDetailsStorageConfigTableAttributes](tdsc.ref.Append("table"))
}

type TransformationDetailsStorageConfigTableAttributes struct {
	ref terra.Reference
}

func (t TransformationDetailsStorageConfigTableAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TransformationDetailsStorageConfigTableAttributes) InternalWithRef(ref terra.Reference) TransformationDetailsStorageConfigTableAttributes {
	return TransformationDetailsStorageConfigTableAttributes{ref: ref}
}

func (t TransformationDetailsStorageConfigTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TransformationDetailsStorageConfigTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("dataset_id"))
}

func (t TransformationDetailsStorageConfigTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("project_id"))
}

func (t TransformationDetailsStorageConfigTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_id"))
}

type JobNotificationEmailsAttributes struct {
	ref terra.Reference
}

func (jne JobNotificationEmailsAttributes) InternalRef() (terra.Reference, error) {
	return jne.ref, nil
}

func (jne JobNotificationEmailsAttributes) InternalWithRef(ref terra.Reference) JobNotificationEmailsAttributes {
	return JobNotificationEmailsAttributes{ref: ref}
}

func (jne JobNotificationEmailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jne.ref.InternalTokens()
}

type PubSubAttributes struct {
	ref terra.Reference
}

func (ps PubSubAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PubSubAttributes) InternalWithRef(ref terra.Reference) PubSubAttributes {
	return PubSubAttributes{ref: ref}
}

func (ps PubSubAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PubSubAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("topic"))
}

type PublishFindingsToCloudDataCatalogAttributes struct {
	ref terra.Reference
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalRef() (terra.Reference, error) {
	return pftcdc.ref, nil
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalWithRef(ref terra.Reference) PublishFindingsToCloudDataCatalogAttributes {
	return PublishFindingsToCloudDataCatalogAttributes{ref: ref}
}

func (pftcdc PublishFindingsToCloudDataCatalogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pftcdc.ref.InternalTokens()
}

type PublishSummaryToCsccAttributes struct {
	ref terra.Reference
}

func (pstc PublishSummaryToCsccAttributes) InternalRef() (terra.Reference, error) {
	return pstc.ref, nil
}

func (pstc PublishSummaryToCsccAttributes) InternalWithRef(ref terra.Reference) PublishSummaryToCsccAttributes {
	return PublishSummaryToCsccAttributes{ref: ref}
}

func (pstc PublishSummaryToCsccAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pstc.ref.InternalTokens()
}

type PublishToStackdriverAttributes struct {
	ref terra.Reference
}

func (pts PublishToStackdriverAttributes) InternalRef() (terra.Reference, error) {
	return pts.ref, nil
}

func (pts PublishToStackdriverAttributes) InternalWithRef(ref terra.Reference) PublishToStackdriverAttributes {
	return PublishToStackdriverAttributes{ref: ref}
}

func (pts PublishToStackdriverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pts.ref.InternalTokens()
}

type SaveFindingsAttributes struct {
	ref terra.Reference
}

func (sf SaveFindingsAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf SaveFindingsAttributes) InternalWithRef(ref terra.Reference) SaveFindingsAttributes {
	return SaveFindingsAttributes{ref: ref}
}

func (sf SaveFindingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf SaveFindingsAttributes) OutputConfig() terra.ListValue[OutputConfigAttributes] {
	return terra.ReferenceAsList[OutputConfigAttributes](sf.ref.Append("output_config"))
}

type OutputConfigAttributes struct {
	ref terra.Reference
}

func (oc OutputConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OutputConfigAttributes) InternalWithRef(ref terra.Reference) OutputConfigAttributes {
	return OutputConfigAttributes{ref: ref}
}

func (oc OutputConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OutputConfigAttributes) OutputSchema() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("output_schema"))
}

func (oc OutputConfigAttributes) Table() terra.ListValue[OutputConfigTableAttributes] {
	return terra.ReferenceAsList[OutputConfigTableAttributes](oc.ref.Append("table"))
}

type OutputConfigTableAttributes struct {
	ref terra.Reference
}

func (t OutputConfigTableAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t OutputConfigTableAttributes) InternalWithRef(ref terra.Reference) OutputConfigTableAttributes {
	return OutputConfigTableAttributes{ref: ref}
}

func (t OutputConfigTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t OutputConfigTableAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("dataset_id"))
}

func (t OutputConfigTableAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("project_id"))
}

func (t OutputConfigTableAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_id"))
}

type InspectConfigAttributes struct {
	ref terra.Reference
}

func (ic InspectConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InspectConfigAttributes) InternalWithRef(ref terra.Reference) InspectConfigAttributes {
	return InspectConfigAttributes{ref: ref}
}

func (ic InspectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InspectConfigAttributes) ExcludeInfoTypes() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("exclude_info_types"))
}

func (ic InspectConfigAttributes) IncludeQuote() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("include_quote"))
}

func (ic InspectConfigAttributes) MinLikelihood() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("min_likelihood"))
}

func (ic InspectConfigAttributes) CustomInfoTypes() terra.ListValue[CustomInfoTypesAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesAttributes](ic.ref.Append("custom_info_types"))
}

func (ic InspectConfigAttributes) InfoTypes() terra.ListValue[InspectConfigInfoTypesAttributes] {
	return terra.ReferenceAsList[InspectConfigInfoTypesAttributes](ic.ref.Append("info_types"))
}

func (ic InspectConfigAttributes) Limits() terra.ListValue[LimitsAttributes] {
	return terra.ReferenceAsList[LimitsAttributes](ic.ref.Append("limits"))
}

func (ic InspectConfigAttributes) RuleSet() terra.ListValue[RuleSetAttributes] {
	return terra.ReferenceAsList[RuleSetAttributes](ic.ref.Append("rule_set"))
}

type CustomInfoTypesAttributes struct {
	ref terra.Reference
}

func (cit CustomInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return cit.ref, nil
}

func (cit CustomInfoTypesAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesAttributes {
	return CustomInfoTypesAttributes{ref: ref}
}

func (cit CustomInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cit.ref.InternalTokens()
}

func (cit CustomInfoTypesAttributes) ExclusionType() terra.StringValue {
	return terra.ReferenceAsString(cit.ref.Append("exclusion_type"))
}

func (cit CustomInfoTypesAttributes) Likelihood() terra.StringValue {
	return terra.ReferenceAsString(cit.ref.Append("likelihood"))
}

func (cit CustomInfoTypesAttributes) Dictionary() terra.ListValue[CustomInfoTypesDictionaryAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryAttributes](cit.ref.Append("dictionary"))
}

func (cit CustomInfoTypesAttributes) InfoType() terra.ListValue[CustomInfoTypesInfoTypeAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesInfoTypeAttributes](cit.ref.Append("info_type"))
}

func (cit CustomInfoTypesAttributes) Regex() terra.ListValue[CustomInfoTypesRegexAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesRegexAttributes](cit.ref.Append("regex"))
}

func (cit CustomInfoTypesAttributes) SensitivityScore() terra.ListValue[CustomInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesSensitivityScoreAttributes](cit.ref.Append("sensitivity_score"))
}

func (cit CustomInfoTypesAttributes) StoredType() terra.ListValue[StoredTypeAttributes] {
	return terra.ReferenceAsList[StoredTypeAttributes](cit.ref.Append("stored_type"))
}

func (cit CustomInfoTypesAttributes) SurrogateType() terra.ListValue[SurrogateTypeAttributes] {
	return terra.ReferenceAsList[SurrogateTypeAttributes](cit.ref.Append("surrogate_type"))
}

type CustomInfoTypesDictionaryAttributes struct {
	ref terra.Reference
}

func (d CustomInfoTypesDictionaryAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d CustomInfoTypesDictionaryAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryAttributes {
	return CustomInfoTypesDictionaryAttributes{ref: ref}
}

func (d CustomInfoTypesDictionaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d CustomInfoTypesDictionaryAttributes) CloudStoragePath() terra.ListValue[CustomInfoTypesDictionaryCloudStoragePathAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryCloudStoragePathAttributes](d.ref.Append("cloud_storage_path"))
}

func (d CustomInfoTypesDictionaryAttributes) WordList() terra.ListValue[CustomInfoTypesDictionaryWordListAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesDictionaryWordListAttributes](d.ref.Append("word_list"))
}

type CustomInfoTypesDictionaryCloudStoragePathAttributes struct {
	ref terra.Reference
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalRef() (terra.Reference, error) {
	return csp.ref, nil
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryCloudStoragePathAttributes {
	return CustomInfoTypesDictionaryCloudStoragePathAttributes{ref: ref}
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csp.ref.InternalTokens()
}

func (csp CustomInfoTypesDictionaryCloudStoragePathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(csp.ref.Append("path"))
}

type CustomInfoTypesDictionaryWordListAttributes struct {
	ref terra.Reference
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesDictionaryWordListAttributes {
	return CustomInfoTypesDictionaryWordListAttributes{ref: ref}
}

func (wl CustomInfoTypesDictionaryWordListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl CustomInfoTypesDictionaryWordListAttributes) Words() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wl.ref.Append("words"))
}

type CustomInfoTypesInfoTypeAttributes struct {
	ref terra.Reference
}

func (it CustomInfoTypesInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it CustomInfoTypesInfoTypeAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesInfoTypeAttributes {
	return CustomInfoTypesInfoTypeAttributes{ref: ref}
}

func (it CustomInfoTypesInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it CustomInfoTypesInfoTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it CustomInfoTypesInfoTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it CustomInfoTypesInfoTypeAttributes) SensitivityScore() terra.ListValue[CustomInfoTypesInfoTypeSensitivityScoreAttributes] {
	return terra.ReferenceAsList[CustomInfoTypesInfoTypeSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type CustomInfoTypesInfoTypeSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesInfoTypeSensitivityScoreAttributes {
	return CustomInfoTypesInfoTypeSensitivityScoreAttributes{ref: ref}
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CustomInfoTypesInfoTypeSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type CustomInfoTypesRegexAttributes struct {
	ref terra.Reference
}

func (r CustomInfoTypesRegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r CustomInfoTypesRegexAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesRegexAttributes {
	return CustomInfoTypesRegexAttributes{ref: ref}
}

func (r CustomInfoTypesRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r CustomInfoTypesRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("group_indexes"))
}

func (r CustomInfoTypesRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("pattern"))
}

type CustomInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) CustomInfoTypesSensitivityScoreAttributes {
	return CustomInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss CustomInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CustomInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type StoredTypeAttributes struct {
	ref terra.Reference
}

func (st StoredTypeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st StoredTypeAttributes) InternalWithRef(ref terra.Reference) StoredTypeAttributes {
	return StoredTypeAttributes{ref: ref}
}

func (st StoredTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st StoredTypeAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("create_time"))
}

func (st StoredTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("name"))
}

type SurrogateTypeAttributes struct {
	ref terra.Reference
}

func (st SurrogateTypeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st SurrogateTypeAttributes) InternalWithRef(ref terra.Reference) SurrogateTypeAttributes {
	return SurrogateTypeAttributes{ref: ref}
}

func (st SurrogateTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

type InspectConfigInfoTypesAttributes struct {
	ref terra.Reference
}

func (it InspectConfigInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it InspectConfigInfoTypesAttributes) InternalWithRef(ref terra.Reference) InspectConfigInfoTypesAttributes {
	return InspectConfigInfoTypesAttributes{ref: ref}
}

func (it InspectConfigInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it InspectConfigInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it InspectConfigInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it InspectConfigInfoTypesAttributes) SensitivityScore() terra.ListValue[InspectConfigInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[InspectConfigInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type InspectConfigInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) InspectConfigInfoTypesSensitivityScoreAttributes {
	return InspectConfigInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss InspectConfigInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type LimitsAttributes struct {
	ref terra.Reference
}

func (l LimitsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LimitsAttributes) InternalWithRef(ref terra.Reference) LimitsAttributes {
	return LimitsAttributes{ref: ref}
}

func (l LimitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LimitsAttributes) MaxFindingsPerItem() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_findings_per_item"))
}

func (l LimitsAttributes) MaxFindingsPerRequest() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("max_findings_per_request"))
}

func (l LimitsAttributes) MaxFindingsPerInfoType() terra.ListValue[MaxFindingsPerInfoTypeAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeAttributes](l.ref.Append("max_findings_per_info_type"))
}

type MaxFindingsPerInfoTypeAttributes struct {
	ref terra.Reference
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return mfpit.ref, nil
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeAttributes {
	return MaxFindingsPerInfoTypeAttributes{ref: ref}
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mfpit.ref.InternalTokens()
}

func (mfpit MaxFindingsPerInfoTypeAttributes) MaxFindings() terra.NumberValue {
	return terra.ReferenceAsNumber(mfpit.ref.Append("max_findings"))
}

func (mfpit MaxFindingsPerInfoTypeAttributes) InfoType() terra.ListValue[MaxFindingsPerInfoTypeInfoTypeAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeInfoTypeAttributes](mfpit.ref.Append("info_type"))
}

type MaxFindingsPerInfoTypeInfoTypeAttributes struct {
	ref terra.Reference
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeInfoTypeAttributes {
	return MaxFindingsPerInfoTypeInfoTypeAttributes{ref: ref}
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it MaxFindingsPerInfoTypeInfoTypeAttributes) SensitivityScore() terra.ListValue[MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes] {
	return terra.ReferenceAsList[MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes {
	return MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes{ref: ref}
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss MaxFindingsPerInfoTypeInfoTypeSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type RuleSetAttributes struct {
	ref terra.Reference
}

func (rs RuleSetAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RuleSetAttributes) InternalWithRef(ref terra.Reference) RuleSetAttributes {
	return RuleSetAttributes{ref: ref}
}

func (rs RuleSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RuleSetAttributes) InfoTypes() terra.ListValue[RuleSetInfoTypesAttributes] {
	return terra.ReferenceAsList[RuleSetInfoTypesAttributes](rs.ref.Append("info_types"))
}

func (rs RuleSetAttributes) Rules() terra.ListValue[RulesAttributes] {
	return terra.ReferenceAsList[RulesAttributes](rs.ref.Append("rules"))
}

type RuleSetInfoTypesAttributes struct {
	ref terra.Reference
}

func (it RuleSetInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it RuleSetInfoTypesAttributes) InternalWithRef(ref terra.Reference) RuleSetInfoTypesAttributes {
	return RuleSetInfoTypesAttributes{ref: ref}
}

func (it RuleSetInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it RuleSetInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it RuleSetInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it RuleSetInfoTypesAttributes) SensitivityScore() terra.ListValue[RuleSetInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[RuleSetInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type RuleSetInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) RuleSetInfoTypesSensitivityScoreAttributes {
	return RuleSetInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss RuleSetInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type RulesAttributes struct {
	ref terra.Reference
}

func (r RulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RulesAttributes) InternalWithRef(ref terra.Reference) RulesAttributes {
	return RulesAttributes{ref: ref}
}

func (r RulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RulesAttributes) ExclusionRule() terra.ListValue[ExclusionRuleAttributes] {
	return terra.ReferenceAsList[ExclusionRuleAttributes](r.ref.Append("exclusion_rule"))
}

func (r RulesAttributes) HotwordRule() terra.ListValue[HotwordRuleAttributes] {
	return terra.ReferenceAsList[HotwordRuleAttributes](r.ref.Append("hotword_rule"))
}

type ExclusionRuleAttributes struct {
	ref terra.Reference
}

func (er ExclusionRuleAttributes) InternalRef() (terra.Reference, error) {
	return er.ref, nil
}

func (er ExclusionRuleAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleAttributes {
	return ExclusionRuleAttributes{ref: ref}
}

func (er ExclusionRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return er.ref.InternalTokens()
}

func (er ExclusionRuleAttributes) MatchingType() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("matching_type"))
}

func (er ExclusionRuleAttributes) Dictionary() terra.ListValue[ExclusionRuleDictionaryAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryAttributes](er.ref.Append("dictionary"))
}

func (er ExclusionRuleAttributes) ExcludeByHotword() terra.ListValue[ExcludeByHotwordAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordAttributes](er.ref.Append("exclude_by_hotword"))
}

func (er ExclusionRuleAttributes) ExcludeInfoTypes() terra.ListValue[ExcludeInfoTypesAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesAttributes](er.ref.Append("exclude_info_types"))
}

func (er ExclusionRuleAttributes) Regex() terra.ListValue[ExclusionRuleRegexAttributes] {
	return terra.ReferenceAsList[ExclusionRuleRegexAttributes](er.ref.Append("regex"))
}

type ExclusionRuleDictionaryAttributes struct {
	ref terra.Reference
}

func (d ExclusionRuleDictionaryAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ExclusionRuleDictionaryAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryAttributes {
	return ExclusionRuleDictionaryAttributes{ref: ref}
}

func (d ExclusionRuleDictionaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ExclusionRuleDictionaryAttributes) CloudStoragePath() terra.ListValue[ExclusionRuleDictionaryCloudStoragePathAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryCloudStoragePathAttributes](d.ref.Append("cloud_storage_path"))
}

func (d ExclusionRuleDictionaryAttributes) WordList() terra.ListValue[ExclusionRuleDictionaryWordListAttributes] {
	return terra.ReferenceAsList[ExclusionRuleDictionaryWordListAttributes](d.ref.Append("word_list"))
}

type ExclusionRuleDictionaryCloudStoragePathAttributes struct {
	ref terra.Reference
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalRef() (terra.Reference, error) {
	return csp.ref, nil
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryCloudStoragePathAttributes {
	return ExclusionRuleDictionaryCloudStoragePathAttributes{ref: ref}
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csp.ref.InternalTokens()
}

func (csp ExclusionRuleDictionaryCloudStoragePathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(csp.ref.Append("path"))
}

type ExclusionRuleDictionaryWordListAttributes struct {
	ref terra.Reference
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalRef() (terra.Reference, error) {
	return wl.ref, nil
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleDictionaryWordListAttributes {
	return ExclusionRuleDictionaryWordListAttributes{ref: ref}
}

func (wl ExclusionRuleDictionaryWordListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wl.ref.InternalTokens()
}

func (wl ExclusionRuleDictionaryWordListAttributes) Words() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](wl.ref.Append("words"))
}

type ExcludeByHotwordAttributes struct {
	ref terra.Reference
}

func (ebh ExcludeByHotwordAttributes) InternalRef() (terra.Reference, error) {
	return ebh.ref, nil
}

func (ebh ExcludeByHotwordAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordAttributes {
	return ExcludeByHotwordAttributes{ref: ref}
}

func (ebh ExcludeByHotwordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebh.ref.InternalTokens()
}

func (ebh ExcludeByHotwordAttributes) HotwordRegex() terra.ListValue[ExcludeByHotwordHotwordRegexAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordHotwordRegexAttributes](ebh.ref.Append("hotword_regex"))
}

func (ebh ExcludeByHotwordAttributes) Proximity() terra.ListValue[ExcludeByHotwordProximityAttributes] {
	return terra.ReferenceAsList[ExcludeByHotwordProximityAttributes](ebh.ref.Append("proximity"))
}

type ExcludeByHotwordHotwordRegexAttributes struct {
	ref terra.Reference
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordHotwordRegexAttributes {
	return ExcludeByHotwordHotwordRegexAttributes{ref: ref}
}

func (hr ExcludeByHotwordHotwordRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr ExcludeByHotwordHotwordRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](hr.ref.Append("group_indexes"))
}

func (hr ExcludeByHotwordHotwordRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("pattern"))
}

type ExcludeByHotwordProximityAttributes struct {
	ref terra.Reference
}

func (p ExcludeByHotwordProximityAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ExcludeByHotwordProximityAttributes) InternalWithRef(ref terra.Reference) ExcludeByHotwordProximityAttributes {
	return ExcludeByHotwordProximityAttributes{ref: ref}
}

func (p ExcludeByHotwordProximityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ExcludeByHotwordProximityAttributes) WindowAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_after"))
}

func (p ExcludeByHotwordProximityAttributes) WindowBefore() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_before"))
}

type ExcludeInfoTypesAttributes struct {
	ref terra.Reference
}

func (eit ExcludeInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return eit.ref, nil
}

func (eit ExcludeInfoTypesAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesAttributes {
	return ExcludeInfoTypesAttributes{ref: ref}
}

func (eit ExcludeInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eit.ref.InternalTokens()
}

func (eit ExcludeInfoTypesAttributes) InfoTypes() terra.ListValue[ExcludeInfoTypesInfoTypesAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesInfoTypesAttributes](eit.ref.Append("info_types"))
}

type ExcludeInfoTypesInfoTypesAttributes struct {
	ref terra.Reference
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesInfoTypesAttributes {
	return ExcludeInfoTypesInfoTypesAttributes{ref: ref}
}

func (it ExcludeInfoTypesInfoTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it ExcludeInfoTypesInfoTypesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("name"))
}

func (it ExcludeInfoTypesInfoTypesAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("version"))
}

func (it ExcludeInfoTypesInfoTypesAttributes) SensitivityScore() terra.ListValue[ExcludeInfoTypesInfoTypesSensitivityScoreAttributes] {
	return terra.ReferenceAsList[ExcludeInfoTypesInfoTypesSensitivityScoreAttributes](it.ref.Append("sensitivity_score"))
}

type ExcludeInfoTypesInfoTypesSensitivityScoreAttributes struct {
	ref terra.Reference
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalWithRef(ref terra.Reference) ExcludeInfoTypesInfoTypesSensitivityScoreAttributes {
	return ExcludeInfoTypesInfoTypesSensitivityScoreAttributes{ref: ref}
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss ExcludeInfoTypesInfoTypesSensitivityScoreAttributes) Score() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("score"))
}

type ExclusionRuleRegexAttributes struct {
	ref terra.Reference
}

func (r ExclusionRuleRegexAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ExclusionRuleRegexAttributes) InternalWithRef(ref terra.Reference) ExclusionRuleRegexAttributes {
	return ExclusionRuleRegexAttributes{ref: ref}
}

func (r ExclusionRuleRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ExclusionRuleRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](r.ref.Append("group_indexes"))
}

func (r ExclusionRuleRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("pattern"))
}

type HotwordRuleAttributes struct {
	ref terra.Reference
}

func (hr HotwordRuleAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HotwordRuleAttributes) InternalWithRef(ref terra.Reference) HotwordRuleAttributes {
	return HotwordRuleAttributes{ref: ref}
}

func (hr HotwordRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HotwordRuleAttributes) HotwordRegex() terra.ListValue[HotwordRuleHotwordRegexAttributes] {
	return terra.ReferenceAsList[HotwordRuleHotwordRegexAttributes](hr.ref.Append("hotword_regex"))
}

func (hr HotwordRuleAttributes) LikelihoodAdjustment() terra.ListValue[LikelihoodAdjustmentAttributes] {
	return terra.ReferenceAsList[LikelihoodAdjustmentAttributes](hr.ref.Append("likelihood_adjustment"))
}

func (hr HotwordRuleAttributes) Proximity() terra.ListValue[HotwordRuleProximityAttributes] {
	return terra.ReferenceAsList[HotwordRuleProximityAttributes](hr.ref.Append("proximity"))
}

type HotwordRuleHotwordRegexAttributes struct {
	ref terra.Reference
}

func (hr HotwordRuleHotwordRegexAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HotwordRuleHotwordRegexAttributes) InternalWithRef(ref terra.Reference) HotwordRuleHotwordRegexAttributes {
	return HotwordRuleHotwordRegexAttributes{ref: ref}
}

func (hr HotwordRuleHotwordRegexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HotwordRuleHotwordRegexAttributes) GroupIndexes() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceAsList[terra.NumberValue](hr.ref.Append("group_indexes"))
}

func (hr HotwordRuleHotwordRegexAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(hr.ref.Append("pattern"))
}

type LikelihoodAdjustmentAttributes struct {
	ref terra.Reference
}

func (la LikelihoodAdjustmentAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la LikelihoodAdjustmentAttributes) InternalWithRef(ref terra.Reference) LikelihoodAdjustmentAttributes {
	return LikelihoodAdjustmentAttributes{ref: ref}
}

func (la LikelihoodAdjustmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la LikelihoodAdjustmentAttributes) FixedLikelihood() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("fixed_likelihood"))
}

func (la LikelihoodAdjustmentAttributes) RelativeLikelihood() terra.NumberValue {
	return terra.ReferenceAsNumber(la.ref.Append("relative_likelihood"))
}

type HotwordRuleProximityAttributes struct {
	ref terra.Reference
}

func (p HotwordRuleProximityAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HotwordRuleProximityAttributes) InternalWithRef(ref terra.Reference) HotwordRuleProximityAttributes {
	return HotwordRuleProximityAttributes{ref: ref}
}

func (p HotwordRuleProximityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HotwordRuleProximityAttributes) WindowAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_after"))
}

func (p HotwordRuleProximityAttributes) WindowBefore() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("window_before"))
}

type StorageConfigAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigAttributes {
	return StorageConfigAttributes{ref: ref}
}

func (sc StorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigAttributes) BigQueryOptions() terra.ListValue[BigQueryOptionsAttributes] {
	return terra.ReferenceAsList[BigQueryOptionsAttributes](sc.ref.Append("big_query_options"))
}

func (sc StorageConfigAttributes) CloudStorageOptions() terra.ListValue[CloudStorageOptionsAttributes] {
	return terra.ReferenceAsList[CloudStorageOptionsAttributes](sc.ref.Append("cloud_storage_options"))
}

func (sc StorageConfigAttributes) DatastoreOptions() terra.ListValue[DatastoreOptionsAttributes] {
	return terra.ReferenceAsList[DatastoreOptionsAttributes](sc.ref.Append("datastore_options"))
}

func (sc StorageConfigAttributes) HybridOptions() terra.ListValue[HybridOptionsAttributes] {
	return terra.ReferenceAsList[HybridOptionsAttributes](sc.ref.Append("hybrid_options"))
}

func (sc StorageConfigAttributes) TimespanConfig() terra.ListValue[TimespanConfigAttributes] {
	return terra.ReferenceAsList[TimespanConfigAttributes](sc.ref.Append("timespan_config"))
}

type BigQueryOptionsAttributes struct {
	ref terra.Reference
}

func (bqo BigQueryOptionsAttributes) InternalRef() (terra.Reference, error) {
	return bqo.ref, nil
}

func (bqo BigQueryOptionsAttributes) InternalWithRef(ref terra.Reference) BigQueryOptionsAttributes {
	return BigQueryOptionsAttributes{ref: ref}
}

func (bqo BigQueryOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bqo.ref.InternalTokens()
}

func (bqo BigQueryOptionsAttributes) RowsLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(bqo.ref.Append("rows_limit"))
}

func (bqo BigQueryOptionsAttributes) RowsLimitPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(bqo.ref.Append("rows_limit_percent"))
}

func (bqo BigQueryOptionsAttributes) SampleMethod() terra.StringValue {
	return terra.ReferenceAsString(bqo.ref.Append("sample_method"))
}

func (bqo BigQueryOptionsAttributes) ExcludedFields() terra.ListValue[ExcludedFieldsAttributes] {
	return terra.ReferenceAsList[ExcludedFieldsAttributes](bqo.ref.Append("excluded_fields"))
}

func (bqo BigQueryOptionsAttributes) IdentifyingFields() terra.ListValue[BigQueryOptionsIdentifyingFieldsAttributes] {
	return terra.ReferenceAsList[BigQueryOptionsIdentifyingFieldsAttributes](bqo.ref.Append("identifying_fields"))
}

func (bqo BigQueryOptionsAttributes) IncludedFields() terra.ListValue[IncludedFieldsAttributes] {
	return terra.ReferenceAsList[IncludedFieldsAttributes](bqo.ref.Append("included_fields"))
}

func (bqo BigQueryOptionsAttributes) TableReference() terra.ListValue[TableReferenceAttributes] {
	return terra.ReferenceAsList[TableReferenceAttributes](bqo.ref.Append("table_reference"))
}

type ExcludedFieldsAttributes struct {
	ref terra.Reference
}

func (ef ExcludedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef ExcludedFieldsAttributes) InternalWithRef(ref terra.Reference) ExcludedFieldsAttributes {
	return ExcludedFieldsAttributes{ref: ref}
}

func (ef ExcludedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef ExcludedFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("name"))
}

type BigQueryOptionsIdentifyingFieldsAttributes struct {
	ref terra.Reference
}

func (_if BigQueryOptionsIdentifyingFieldsAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if BigQueryOptionsIdentifyingFieldsAttributes) InternalWithRef(ref terra.Reference) BigQueryOptionsIdentifyingFieldsAttributes {
	return BigQueryOptionsIdentifyingFieldsAttributes{ref: ref}
}

func (_if BigQueryOptionsIdentifyingFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if BigQueryOptionsIdentifyingFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("name"))
}

type IncludedFieldsAttributes struct {
	ref terra.Reference
}

func (_if IncludedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if IncludedFieldsAttributes) InternalWithRef(ref terra.Reference) IncludedFieldsAttributes {
	return IncludedFieldsAttributes{ref: ref}
}

func (_if IncludedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if IncludedFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("name"))
}

type TableReferenceAttributes struct {
	ref terra.Reference
}

func (tr TableReferenceAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TableReferenceAttributes) InternalWithRef(ref terra.Reference) TableReferenceAttributes {
	return TableReferenceAttributes{ref: ref}
}

func (tr TableReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TableReferenceAttributes) DatasetId() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("dataset_id"))
}

func (tr TableReferenceAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("project_id"))
}

func (tr TableReferenceAttributes) TableId() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("table_id"))
}

type CloudStorageOptionsAttributes struct {
	ref terra.Reference
}

func (cso CloudStorageOptionsAttributes) InternalRef() (terra.Reference, error) {
	return cso.ref, nil
}

func (cso CloudStorageOptionsAttributes) InternalWithRef(ref terra.Reference) CloudStorageOptionsAttributes {
	return CloudStorageOptionsAttributes{ref: ref}
}

func (cso CloudStorageOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cso.ref.InternalTokens()
}

func (cso CloudStorageOptionsAttributes) BytesLimitPerFile() terra.NumberValue {
	return terra.ReferenceAsNumber(cso.ref.Append("bytes_limit_per_file"))
}

func (cso CloudStorageOptionsAttributes) BytesLimitPerFilePercent() terra.NumberValue {
	return terra.ReferenceAsNumber(cso.ref.Append("bytes_limit_per_file_percent"))
}

func (cso CloudStorageOptionsAttributes) FileTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cso.ref.Append("file_types"))
}

func (cso CloudStorageOptionsAttributes) FilesLimitPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(cso.ref.Append("files_limit_percent"))
}

func (cso CloudStorageOptionsAttributes) SampleMethod() terra.StringValue {
	return terra.ReferenceAsString(cso.ref.Append("sample_method"))
}

func (cso CloudStorageOptionsAttributes) FileSet() terra.ListValue[FileSetAttributes] {
	return terra.ReferenceAsList[FileSetAttributes](cso.ref.Append("file_set"))
}

type FileSetAttributes struct {
	ref terra.Reference
}

func (fs FileSetAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FileSetAttributes) InternalWithRef(ref terra.Reference) FileSetAttributes {
	return FileSetAttributes{ref: ref}
}

func (fs FileSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FileSetAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("url"))
}

func (fs FileSetAttributes) RegexFileSet() terra.ListValue[RegexFileSetAttributes] {
	return terra.ReferenceAsList[RegexFileSetAttributes](fs.ref.Append("regex_file_set"))
}

type RegexFileSetAttributes struct {
	ref terra.Reference
}

func (rfs RegexFileSetAttributes) InternalRef() (terra.Reference, error) {
	return rfs.ref, nil
}

func (rfs RegexFileSetAttributes) InternalWithRef(ref terra.Reference) RegexFileSetAttributes {
	return RegexFileSetAttributes{ref: ref}
}

func (rfs RegexFileSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rfs.ref.InternalTokens()
}

func (rfs RegexFileSetAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(rfs.ref.Append("bucket_name"))
}

func (rfs RegexFileSetAttributes) ExcludeRegex() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rfs.ref.Append("exclude_regex"))
}

func (rfs RegexFileSetAttributes) IncludeRegex() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rfs.ref.Append("include_regex"))
}

type DatastoreOptionsAttributes struct {
	ref terra.Reference
}

func (do DatastoreOptionsAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DatastoreOptionsAttributes) InternalWithRef(ref terra.Reference) DatastoreOptionsAttributes {
	return DatastoreOptionsAttributes{ref: ref}
}

func (do DatastoreOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DatastoreOptionsAttributes) Kind() terra.ListValue[KindAttributes] {
	return terra.ReferenceAsList[KindAttributes](do.ref.Append("kind"))
}

func (do DatastoreOptionsAttributes) PartitionId() terra.ListValue[PartitionIdAttributes] {
	return terra.ReferenceAsList[PartitionIdAttributes](do.ref.Append("partition_id"))
}

type KindAttributes struct {
	ref terra.Reference
}

func (k KindAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KindAttributes) InternalWithRef(ref terra.Reference) KindAttributes {
	return KindAttributes{ref: ref}
}

func (k KindAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KindAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("name"))
}

type PartitionIdAttributes struct {
	ref terra.Reference
}

func (pi PartitionIdAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi PartitionIdAttributes) InternalWithRef(ref terra.Reference) PartitionIdAttributes {
	return PartitionIdAttributes{ref: ref}
}

func (pi PartitionIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi PartitionIdAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("namespace_id"))
}

func (pi PartitionIdAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("project_id"))
}

type HybridOptionsAttributes struct {
	ref terra.Reference
}

func (ho HybridOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho HybridOptionsAttributes) InternalWithRef(ref terra.Reference) HybridOptionsAttributes {
	return HybridOptionsAttributes{ref: ref}
}

func (ho HybridOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho HybridOptionsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ho.ref.Append("description"))
}

func (ho HybridOptionsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ho.ref.Append("labels"))
}

func (ho HybridOptionsAttributes) RequiredFindingLabelKeys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ho.ref.Append("required_finding_label_keys"))
}

func (ho HybridOptionsAttributes) TableOptions() terra.ListValue[TableOptionsAttributes] {
	return terra.ReferenceAsList[TableOptionsAttributes](ho.ref.Append("table_options"))
}

type TableOptionsAttributes struct {
	ref terra.Reference
}

func (to TableOptionsAttributes) InternalRef() (terra.Reference, error) {
	return to.ref, nil
}

func (to TableOptionsAttributes) InternalWithRef(ref terra.Reference) TableOptionsAttributes {
	return TableOptionsAttributes{ref: ref}
}

func (to TableOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return to.ref.InternalTokens()
}

func (to TableOptionsAttributes) IdentifyingFields() terra.ListValue[TableOptionsIdentifyingFieldsAttributes] {
	return terra.ReferenceAsList[TableOptionsIdentifyingFieldsAttributes](to.ref.Append("identifying_fields"))
}

type TableOptionsIdentifyingFieldsAttributes struct {
	ref terra.Reference
}

func (_if TableOptionsIdentifyingFieldsAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if TableOptionsIdentifyingFieldsAttributes) InternalWithRef(ref terra.Reference) TableOptionsIdentifyingFieldsAttributes {
	return TableOptionsIdentifyingFieldsAttributes{ref: ref}
}

func (_if TableOptionsIdentifyingFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if TableOptionsIdentifyingFieldsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("name"))
}

type TimespanConfigAttributes struct {
	ref terra.Reference
}

func (tc TimespanConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TimespanConfigAttributes) InternalWithRef(ref terra.Reference) TimespanConfigAttributes {
	return TimespanConfigAttributes{ref: ref}
}

func (tc TimespanConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TimespanConfigAttributes) EnableAutoPopulationOfTimespanConfig() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("enable_auto_population_of_timespan_config"))
}

func (tc TimespanConfigAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("end_time"))
}

func (tc TimespanConfigAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("start_time"))
}

func (tc TimespanConfigAttributes) TimestampField() terra.ListValue[TimestampFieldAttributes] {
	return terra.ReferenceAsList[TimestampFieldAttributes](tc.ref.Append("timestamp_field"))
}

type TimestampFieldAttributes struct {
	ref terra.Reference
}

func (tf TimestampFieldAttributes) InternalRef() (terra.Reference, error) {
	return tf.ref, nil
}

func (tf TimestampFieldAttributes) InternalWithRef(ref terra.Reference) TimestampFieldAttributes {
	return TimestampFieldAttributes{ref: ref}
}

func (tf TimestampFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tf.ref.InternalTokens()
}

func (tf TimestampFieldAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TriggersAttributes struct {
	ref terra.Reference
}

func (t TriggersAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggersAttributes) InternalWithRef(ref terra.Reference) TriggersAttributes {
	return TriggersAttributes{ref: ref}
}

func (t TriggersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggersAttributes) Manual() terra.ListValue[ManualAttributes] {
	return terra.ReferenceAsList[ManualAttributes](t.ref.Append("manual"))
}

func (t TriggersAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](t.ref.Append("schedule"))
}

type ManualAttributes struct {
	ref terra.Reference
}

func (m ManualAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ManualAttributes) InternalWithRef(ref terra.Reference) ManualAttributes {
	return ManualAttributes{ref: ref}
}

func (m ManualAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) RecurrencePeriodDuration() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("recurrence_period_duration"))
}

type InspectJobState struct {
	InspectTemplateName string               `json:"inspect_template_name"`
	Actions             []ActionsState       `json:"actions"`
	InspectConfig       []InspectConfigState `json:"inspect_config"`
	StorageConfig       []StorageConfigState `json:"storage_config"`
}

type ActionsState struct {
	Deidentify                        []DeidentifyState                        `json:"deidentify"`
	JobNotificationEmails             []JobNotificationEmailsState             `json:"job_notification_emails"`
	PubSub                            []PubSubState                            `json:"pub_sub"`
	PublishFindingsToCloudDataCatalog []PublishFindingsToCloudDataCatalogState `json:"publish_findings_to_cloud_data_catalog"`
	PublishSummaryToCscc              []PublishSummaryToCsccState              `json:"publish_summary_to_cscc"`
	PublishToStackdriver              []PublishToStackdriverState              `json:"publish_to_stackdriver"`
	SaveFindings                      []SaveFindingsState                      `json:"save_findings"`
}

type DeidentifyState struct {
	CloudStorageOutput                 string                                    `json:"cloud_storage_output"`
	FileTypesToTransform               []string                                  `json:"file_types_to_transform"`
	TransformationConfig               []TransformationConfigState               `json:"transformation_config"`
	TransformationDetailsStorageConfig []TransformationDetailsStorageConfigState `json:"transformation_details_storage_config"`
}

type TransformationConfigState struct {
	DeidentifyTemplate           string `json:"deidentify_template"`
	ImageRedactTemplate          string `json:"image_redact_template"`
	StructuredDeidentifyTemplate string `json:"structured_deidentify_template"`
}

type TransformationDetailsStorageConfigState struct {
	Table []TransformationDetailsStorageConfigTableState `json:"table"`
}

type TransformationDetailsStorageConfigTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type JobNotificationEmailsState struct{}

type PubSubState struct {
	Topic string `json:"topic"`
}

type PublishFindingsToCloudDataCatalogState struct{}

type PublishSummaryToCsccState struct{}

type PublishToStackdriverState struct{}

type SaveFindingsState struct {
	OutputConfig []OutputConfigState `json:"output_config"`
}

type OutputConfigState struct {
	OutputSchema string                   `json:"output_schema"`
	Table        []OutputConfigTableState `json:"table"`
}

type OutputConfigTableState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type InspectConfigState struct {
	ExcludeInfoTypes bool                          `json:"exclude_info_types"`
	IncludeQuote     bool                          `json:"include_quote"`
	MinLikelihood    string                        `json:"min_likelihood"`
	CustomInfoTypes  []CustomInfoTypesState        `json:"custom_info_types"`
	InfoTypes        []InspectConfigInfoTypesState `json:"info_types"`
	Limits           []LimitsState                 `json:"limits"`
	RuleSet          []RuleSetState                `json:"rule_set"`
}

type CustomInfoTypesState struct {
	ExclusionType    string                                 `json:"exclusion_type"`
	Likelihood       string                                 `json:"likelihood"`
	Dictionary       []CustomInfoTypesDictionaryState       `json:"dictionary"`
	InfoType         []CustomInfoTypesInfoTypeState         `json:"info_type"`
	Regex            []CustomInfoTypesRegexState            `json:"regex"`
	SensitivityScore []CustomInfoTypesSensitivityScoreState `json:"sensitivity_score"`
	StoredType       []StoredTypeState                      `json:"stored_type"`
	SurrogateType    []SurrogateTypeState                   `json:"surrogate_type"`
}

type CustomInfoTypesDictionaryState struct {
	CloudStoragePath []CustomInfoTypesDictionaryCloudStoragePathState `json:"cloud_storage_path"`
	WordList         []CustomInfoTypesDictionaryWordListState         `json:"word_list"`
}

type CustomInfoTypesDictionaryCloudStoragePathState struct {
	Path string `json:"path"`
}

type CustomInfoTypesDictionaryWordListState struct {
	Words []string `json:"words"`
}

type CustomInfoTypesInfoTypeState struct {
	Name             string                                         `json:"name"`
	Version          string                                         `json:"version"`
	SensitivityScore []CustomInfoTypesInfoTypeSensitivityScoreState `json:"sensitivity_score"`
}

type CustomInfoTypesInfoTypeSensitivityScoreState struct {
	Score string `json:"score"`
}

type CustomInfoTypesRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type CustomInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type StoredTypeState struct {
	CreateTime string `json:"create_time"`
	Name       string `json:"name"`
}

type SurrogateTypeState struct{}

type InspectConfigInfoTypesState struct {
	Name             string                                        `json:"name"`
	Version          string                                        `json:"version"`
	SensitivityScore []InspectConfigInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type InspectConfigInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type LimitsState struct {
	MaxFindingsPerItem     float64                       `json:"max_findings_per_item"`
	MaxFindingsPerRequest  float64                       `json:"max_findings_per_request"`
	MaxFindingsPerInfoType []MaxFindingsPerInfoTypeState `json:"max_findings_per_info_type"`
}

type MaxFindingsPerInfoTypeState struct {
	MaxFindings float64                               `json:"max_findings"`
	InfoType    []MaxFindingsPerInfoTypeInfoTypeState `json:"info_type"`
}

type MaxFindingsPerInfoTypeInfoTypeState struct {
	Name             string                                                `json:"name"`
	Version          string                                                `json:"version"`
	SensitivityScore []MaxFindingsPerInfoTypeInfoTypeSensitivityScoreState `json:"sensitivity_score"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreState struct {
	Score string `json:"score"`
}

type RuleSetState struct {
	InfoTypes []RuleSetInfoTypesState `json:"info_types"`
	Rules     []RulesState            `json:"rules"`
}

type RuleSetInfoTypesState struct {
	Name             string                                  `json:"name"`
	Version          string                                  `json:"version"`
	SensitivityScore []RuleSetInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type RuleSetInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type RulesState struct {
	ExclusionRule []ExclusionRuleState `json:"exclusion_rule"`
	HotwordRule   []HotwordRuleState   `json:"hotword_rule"`
}

type ExclusionRuleState struct {
	MatchingType     string                         `json:"matching_type"`
	Dictionary       []ExclusionRuleDictionaryState `json:"dictionary"`
	ExcludeByHotword []ExcludeByHotwordState        `json:"exclude_by_hotword"`
	ExcludeInfoTypes []ExcludeInfoTypesState        `json:"exclude_info_types"`
	Regex            []ExclusionRuleRegexState      `json:"regex"`
}

type ExclusionRuleDictionaryState struct {
	CloudStoragePath []ExclusionRuleDictionaryCloudStoragePathState `json:"cloud_storage_path"`
	WordList         []ExclusionRuleDictionaryWordListState         `json:"word_list"`
}

type ExclusionRuleDictionaryCloudStoragePathState struct {
	Path string `json:"path"`
}

type ExclusionRuleDictionaryWordListState struct {
	Words []string `json:"words"`
}

type ExcludeByHotwordState struct {
	HotwordRegex []ExcludeByHotwordHotwordRegexState `json:"hotword_regex"`
	Proximity    []ExcludeByHotwordProximityState    `json:"proximity"`
}

type ExcludeByHotwordHotwordRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type ExcludeByHotwordProximityState struct {
	WindowAfter  float64 `json:"window_after"`
	WindowBefore float64 `json:"window_before"`
}

type ExcludeInfoTypesState struct {
	InfoTypes []ExcludeInfoTypesInfoTypesState `json:"info_types"`
}

type ExcludeInfoTypesInfoTypesState struct {
	Name             string                                           `json:"name"`
	Version          string                                           `json:"version"`
	SensitivityScore []ExcludeInfoTypesInfoTypesSensitivityScoreState `json:"sensitivity_score"`
}

type ExcludeInfoTypesInfoTypesSensitivityScoreState struct {
	Score string `json:"score"`
}

type ExclusionRuleRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type HotwordRuleState struct {
	HotwordRegex         []HotwordRuleHotwordRegexState `json:"hotword_regex"`
	LikelihoodAdjustment []LikelihoodAdjustmentState    `json:"likelihood_adjustment"`
	Proximity            []HotwordRuleProximityState    `json:"proximity"`
}

type HotwordRuleHotwordRegexState struct {
	GroupIndexes []float64 `json:"group_indexes"`
	Pattern      string    `json:"pattern"`
}

type LikelihoodAdjustmentState struct {
	FixedLikelihood    string  `json:"fixed_likelihood"`
	RelativeLikelihood float64 `json:"relative_likelihood"`
}

type HotwordRuleProximityState struct {
	WindowAfter  float64 `json:"window_after"`
	WindowBefore float64 `json:"window_before"`
}

type StorageConfigState struct {
	BigQueryOptions     []BigQueryOptionsState     `json:"big_query_options"`
	CloudStorageOptions []CloudStorageOptionsState `json:"cloud_storage_options"`
	DatastoreOptions    []DatastoreOptionsState    `json:"datastore_options"`
	HybridOptions       []HybridOptionsState       `json:"hybrid_options"`
	TimespanConfig      []TimespanConfigState      `json:"timespan_config"`
}

type BigQueryOptionsState struct {
	RowsLimit         float64                                 `json:"rows_limit"`
	RowsLimitPercent  float64                                 `json:"rows_limit_percent"`
	SampleMethod      string                                  `json:"sample_method"`
	ExcludedFields    []ExcludedFieldsState                   `json:"excluded_fields"`
	IdentifyingFields []BigQueryOptionsIdentifyingFieldsState `json:"identifying_fields"`
	IncludedFields    []IncludedFieldsState                   `json:"included_fields"`
	TableReference    []TableReferenceState                   `json:"table_reference"`
}

type ExcludedFieldsState struct {
	Name string `json:"name"`
}

type BigQueryOptionsIdentifyingFieldsState struct {
	Name string `json:"name"`
}

type IncludedFieldsState struct {
	Name string `json:"name"`
}

type TableReferenceState struct {
	DatasetId string `json:"dataset_id"`
	ProjectId string `json:"project_id"`
	TableId   string `json:"table_id"`
}

type CloudStorageOptionsState struct {
	BytesLimitPerFile        float64        `json:"bytes_limit_per_file"`
	BytesLimitPerFilePercent float64        `json:"bytes_limit_per_file_percent"`
	FileTypes                []string       `json:"file_types"`
	FilesLimitPercent        float64        `json:"files_limit_percent"`
	SampleMethod             string         `json:"sample_method"`
	FileSet                  []FileSetState `json:"file_set"`
}

type FileSetState struct {
	Url          string              `json:"url"`
	RegexFileSet []RegexFileSetState `json:"regex_file_set"`
}

type RegexFileSetState struct {
	BucketName   string   `json:"bucket_name"`
	ExcludeRegex []string `json:"exclude_regex"`
	IncludeRegex []string `json:"include_regex"`
}

type DatastoreOptionsState struct {
	Kind        []KindState        `json:"kind"`
	PartitionId []PartitionIdState `json:"partition_id"`
}

type KindState struct {
	Name string `json:"name"`
}

type PartitionIdState struct {
	NamespaceId string `json:"namespace_id"`
	ProjectId   string `json:"project_id"`
}

type HybridOptionsState struct {
	Description              string              `json:"description"`
	Labels                   map[string]string   `json:"labels"`
	RequiredFindingLabelKeys []string            `json:"required_finding_label_keys"`
	TableOptions             []TableOptionsState `json:"table_options"`
}

type TableOptionsState struct {
	IdentifyingFields []TableOptionsIdentifyingFieldsState `json:"identifying_fields"`
}

type TableOptionsIdentifyingFieldsState struct {
	Name string `json:"name"`
}

type TimespanConfigState struct {
	EnableAutoPopulationOfTimespanConfig bool                  `json:"enable_auto_population_of_timespan_config"`
	EndTime                              string                `json:"end_time"`
	StartTime                            string                `json:"start_time"`
	TimestampField                       []TimestampFieldState `json:"timestamp_field"`
}

type TimestampFieldState struct {
	Name string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TriggersState struct {
	Manual   []ManualState   `json:"manual"`
	Schedule []ScheduleState `json:"schedule"`
}

type ManualState struct{}

type ScheduleState struct {
	RecurrencePeriodDuration string `json:"recurrence_period_duration"`
}
