// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package certificatemanagertrustconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TrustStores struct {
	// IntermediateCas: min=0
	IntermediateCas []IntermediateCas `hcl:"intermediate_cas,block" validate:"min=0"`
	// TrustAnchors: min=0
	TrustAnchors []TrustAnchors `hcl:"trust_anchors,block" validate:"min=0"`
}

type IntermediateCas struct {
	// PemCertificate: string, optional
	PemCertificate terra.StringValue `hcl:"pem_certificate,attr"`
}

type TrustAnchors struct {
	// PemCertificate: string, optional
	PemCertificate terra.StringValue `hcl:"pem_certificate,attr"`
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TrustStoresAttributes struct {
	ref terra.Reference
}

func (ts TrustStoresAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrustStoresAttributes) InternalWithRef(ref terra.Reference) TrustStoresAttributes {
	return TrustStoresAttributes{ref: ref}
}

func (ts TrustStoresAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrustStoresAttributes) IntermediateCas() terra.ListValue[IntermediateCasAttributes] {
	return terra.ReferenceAsList[IntermediateCasAttributes](ts.ref.Append("intermediate_cas"))
}

func (ts TrustStoresAttributes) TrustAnchors() terra.ListValue[TrustAnchorsAttributes] {
	return terra.ReferenceAsList[TrustAnchorsAttributes](ts.ref.Append("trust_anchors"))
}

type IntermediateCasAttributes struct {
	ref terra.Reference
}

func (ic IntermediateCasAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic IntermediateCasAttributes) InternalWithRef(ref terra.Reference) IntermediateCasAttributes {
	return IntermediateCasAttributes{ref: ref}
}

func (ic IntermediateCasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic IntermediateCasAttributes) PemCertificate() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("pem_certificate"))
}

type TrustAnchorsAttributes struct {
	ref terra.Reference
}

func (ta TrustAnchorsAttributes) InternalRef() (terra.Reference, error) {
	return ta.ref, nil
}

func (ta TrustAnchorsAttributes) InternalWithRef(ref terra.Reference) TrustAnchorsAttributes {
	return TrustAnchorsAttributes{ref: ref}
}

func (ta TrustAnchorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ta.ref.InternalTokens()
}

func (ta TrustAnchorsAttributes) PemCertificate() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("pem_certificate"))
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TrustStoresState struct {
	IntermediateCas []IntermediateCasState `json:"intermediate_cas"`
	TrustAnchors    []TrustAnchorsState    `json:"trust_anchors"`
}

type IntermediateCasState struct {
	PemCertificate string `json:"pem_certificate"`
}

type TrustAnchorsState struct {
	PemCertificate string `json:"pem_certificate"`
}
