// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	biglakecatalog "github.com/golingon/terraproviders/google/4.81.0/biglakecatalog"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewBiglakeCatalog creates a new instance of [BiglakeCatalog].
func NewBiglakeCatalog(name string, args BiglakeCatalogArgs) *BiglakeCatalog {
	return &BiglakeCatalog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BiglakeCatalog)(nil)

// BiglakeCatalog represents the Terraform resource google_biglake_catalog.
type BiglakeCatalog struct {
	Name      string
	Args      BiglakeCatalogArgs
	state     *biglakeCatalogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BiglakeCatalog].
func (bc *BiglakeCatalog) Type() string {
	return "google_biglake_catalog"
}

// LocalName returns the local name for [BiglakeCatalog].
func (bc *BiglakeCatalog) LocalName() string {
	return bc.Name
}

// Configuration returns the configuration (args) for [BiglakeCatalog].
func (bc *BiglakeCatalog) Configuration() interface{} {
	return bc.Args
}

// DependOn is used for other resources to depend on [BiglakeCatalog].
func (bc *BiglakeCatalog) DependOn() terra.Reference {
	return terra.ReferenceResource(bc)
}

// Dependencies returns the list of resources [BiglakeCatalog] depends_on.
func (bc *BiglakeCatalog) Dependencies() terra.Dependencies {
	return bc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BiglakeCatalog].
func (bc *BiglakeCatalog) LifecycleManagement() *terra.Lifecycle {
	return bc.Lifecycle
}

// Attributes returns the attributes for [BiglakeCatalog].
func (bc *BiglakeCatalog) Attributes() biglakeCatalogAttributes {
	return biglakeCatalogAttributes{ref: terra.ReferenceResource(bc)}
}

// ImportState imports the given attribute values into [BiglakeCatalog]'s state.
func (bc *BiglakeCatalog) ImportState(av io.Reader) error {
	bc.state = &biglakeCatalogState{}
	if err := json.NewDecoder(av).Decode(bc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bc.Type(), bc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BiglakeCatalog] has state.
func (bc *BiglakeCatalog) State() (*biglakeCatalogState, bool) {
	return bc.state, bc.state != nil
}

// StateMust returns the state for [BiglakeCatalog]. Panics if the state is nil.
func (bc *BiglakeCatalog) StateMust() *biglakeCatalogState {
	if bc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bc.Type(), bc.LocalName()))
	}
	return bc.state
}

// BiglakeCatalogArgs contains the configurations for google_biglake_catalog.
type BiglakeCatalogArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Timeouts: optional
	Timeouts *biglakecatalog.Timeouts `hcl:"timeouts,block"`
}
type biglakeCatalogAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_biglake_catalog.
func (bc biglakeCatalogAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_biglake_catalog.
func (bc biglakeCatalogAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("delete_time"))
}

// ExpireTime returns a reference to field expire_time of google_biglake_catalog.
func (bc biglakeCatalogAttributes) ExpireTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("expire_time"))
}

// Id returns a reference to field id of google_biglake_catalog.
func (bc biglakeCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("id"))
}

// Location returns a reference to field location of google_biglake_catalog.
func (bc biglakeCatalogAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("location"))
}

// Name returns a reference to field name of google_biglake_catalog.
func (bc biglakeCatalogAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("name"))
}

// Project returns a reference to field project of google_biglake_catalog.
func (bc biglakeCatalogAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("project"))
}

// UpdateTime returns a reference to field update_time of google_biglake_catalog.
func (bc biglakeCatalogAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(bc.ref.Append("update_time"))
}

func (bc biglakeCatalogAttributes) Timeouts() biglakecatalog.TimeoutsAttributes {
	return terra.ReferenceAsSingle[biglakecatalog.TimeoutsAttributes](bc.ref.Append("timeouts"))
}

type biglakeCatalogState struct {
	CreateTime string                        `json:"create_time"`
	DeleteTime string                        `json:"delete_time"`
	ExpireTime string                        `json:"expire_time"`
	Id         string                        `json:"id"`
	Location   string                        `json:"location"`
	Name       string                        `json:"name"`
	Project    string                        `json:"project"`
	UpdateTime string                        `json:"update_time"`
	Timeouts   *biglakecatalog.TimeoutsState `json:"timeouts"`
}
