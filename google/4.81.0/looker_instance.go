// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	lookerinstance "github.com/golingon/terraproviders/google/4.81.0/lookerinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLookerInstance creates a new instance of [LookerInstance].
func NewLookerInstance(name string, args LookerInstanceArgs) *LookerInstance {
	return &LookerInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LookerInstance)(nil)

// LookerInstance represents the Terraform resource google_looker_instance.
type LookerInstance struct {
	Name      string
	Args      LookerInstanceArgs
	state     *lookerInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LookerInstance].
func (li *LookerInstance) Type() string {
	return "google_looker_instance"
}

// LocalName returns the local name for [LookerInstance].
func (li *LookerInstance) LocalName() string {
	return li.Name
}

// Configuration returns the configuration (args) for [LookerInstance].
func (li *LookerInstance) Configuration() interface{} {
	return li.Args
}

// DependOn is used for other resources to depend on [LookerInstance].
func (li *LookerInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(li)
}

// Dependencies returns the list of resources [LookerInstance] depends_on.
func (li *LookerInstance) Dependencies() terra.Dependencies {
	return li.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LookerInstance].
func (li *LookerInstance) LifecycleManagement() *terra.Lifecycle {
	return li.Lifecycle
}

// Attributes returns the attributes for [LookerInstance].
func (li *LookerInstance) Attributes() lookerInstanceAttributes {
	return lookerInstanceAttributes{ref: terra.ReferenceResource(li)}
}

// ImportState imports the given attribute values into [LookerInstance]'s state.
func (li *LookerInstance) ImportState(av io.Reader) error {
	li.state = &lookerInstanceState{}
	if err := json.NewDecoder(av).Decode(li.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", li.Type(), li.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LookerInstance] has state.
func (li *LookerInstance) State() (*lookerInstanceState, bool) {
	return li.state, li.state != nil
}

// StateMust returns the state for [LookerInstance]. Panics if the state is nil.
func (li *LookerInstance) StateMust() *lookerInstanceState {
	if li.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", li.Type(), li.LocalName()))
	}
	return li.state
}

// LookerInstanceArgs contains the configurations for google_looker_instance.
type LookerInstanceArgs struct {
	// ConsumerNetwork: string, optional
	ConsumerNetwork terra.StringValue `hcl:"consumer_network,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformEdition: string, optional
	PlatformEdition terra.StringValue `hcl:"platform_edition,attr"`
	// PrivateIpEnabled: bool, optional
	PrivateIpEnabled terra.BoolValue `hcl:"private_ip_enabled,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// PublicIpEnabled: bool, optional
	PublicIpEnabled terra.BoolValue `hcl:"public_ip_enabled,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// ReservedRange: string, optional
	ReservedRange terra.StringValue `hcl:"reserved_range,attr"`
	// AdminSettings: optional
	AdminSettings *lookerinstance.AdminSettings `hcl:"admin_settings,block"`
	// DenyMaintenancePeriod: optional
	DenyMaintenancePeriod *lookerinstance.DenyMaintenancePeriod `hcl:"deny_maintenance_period,block"`
	// EncryptionConfig: optional
	EncryptionConfig *lookerinstance.EncryptionConfig `hcl:"encryption_config,block"`
	// MaintenanceWindow: optional
	MaintenanceWindow *lookerinstance.MaintenanceWindow `hcl:"maintenance_window,block"`
	// OauthConfig: optional
	OauthConfig *lookerinstance.OauthConfig `hcl:"oauth_config,block"`
	// Timeouts: optional
	Timeouts *lookerinstance.Timeouts `hcl:"timeouts,block"`
	// UserMetadata: optional
	UserMetadata *lookerinstance.UserMetadata `hcl:"user_metadata,block"`
}
type lookerInstanceAttributes struct {
	ref terra.Reference
}

// ConsumerNetwork returns a reference to field consumer_network of google_looker_instance.
func (li lookerInstanceAttributes) ConsumerNetwork() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("consumer_network"))
}

// CreateTime returns a reference to field create_time of google_looker_instance.
func (li lookerInstanceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("create_time"))
}

// EgressPublicIp returns a reference to field egress_public_ip of google_looker_instance.
func (li lookerInstanceAttributes) EgressPublicIp() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("egress_public_ip"))
}

// Id returns a reference to field id of google_looker_instance.
func (li lookerInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("id"))
}

// IngressPrivateIp returns a reference to field ingress_private_ip of google_looker_instance.
func (li lookerInstanceAttributes) IngressPrivateIp() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("ingress_private_ip"))
}

// IngressPublicIp returns a reference to field ingress_public_ip of google_looker_instance.
func (li lookerInstanceAttributes) IngressPublicIp() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("ingress_public_ip"))
}

// LookerUri returns a reference to field looker_uri of google_looker_instance.
func (li lookerInstanceAttributes) LookerUri() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("looker_uri"))
}

// LookerVersion returns a reference to field looker_version of google_looker_instance.
func (li lookerInstanceAttributes) LookerVersion() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("looker_version"))
}

// Name returns a reference to field name of google_looker_instance.
func (li lookerInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("name"))
}

// PlatformEdition returns a reference to field platform_edition of google_looker_instance.
func (li lookerInstanceAttributes) PlatformEdition() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("platform_edition"))
}

// PrivateIpEnabled returns a reference to field private_ip_enabled of google_looker_instance.
func (li lookerInstanceAttributes) PrivateIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(li.ref.Append("private_ip_enabled"))
}

// Project returns a reference to field project of google_looker_instance.
func (li lookerInstanceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("project"))
}

// PublicIpEnabled returns a reference to field public_ip_enabled of google_looker_instance.
func (li lookerInstanceAttributes) PublicIpEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(li.ref.Append("public_ip_enabled"))
}

// Region returns a reference to field region of google_looker_instance.
func (li lookerInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("region"))
}

// ReservedRange returns a reference to field reserved_range of google_looker_instance.
func (li lookerInstanceAttributes) ReservedRange() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("reserved_range"))
}

// UpdateTime returns a reference to field update_time of google_looker_instance.
func (li lookerInstanceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("update_time"))
}

func (li lookerInstanceAttributes) AdminSettings() terra.ListValue[lookerinstance.AdminSettingsAttributes] {
	return terra.ReferenceAsList[lookerinstance.AdminSettingsAttributes](li.ref.Append("admin_settings"))
}

func (li lookerInstanceAttributes) DenyMaintenancePeriod() terra.ListValue[lookerinstance.DenyMaintenancePeriodAttributes] {
	return terra.ReferenceAsList[lookerinstance.DenyMaintenancePeriodAttributes](li.ref.Append("deny_maintenance_period"))
}

func (li lookerInstanceAttributes) EncryptionConfig() terra.ListValue[lookerinstance.EncryptionConfigAttributes] {
	return terra.ReferenceAsList[lookerinstance.EncryptionConfigAttributes](li.ref.Append("encryption_config"))
}

func (li lookerInstanceAttributes) MaintenanceWindow() terra.ListValue[lookerinstance.MaintenanceWindowAttributes] {
	return terra.ReferenceAsList[lookerinstance.MaintenanceWindowAttributes](li.ref.Append("maintenance_window"))
}

func (li lookerInstanceAttributes) OauthConfig() terra.ListValue[lookerinstance.OauthConfigAttributes] {
	return terra.ReferenceAsList[lookerinstance.OauthConfigAttributes](li.ref.Append("oauth_config"))
}

func (li lookerInstanceAttributes) Timeouts() lookerinstance.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lookerinstance.TimeoutsAttributes](li.ref.Append("timeouts"))
}

func (li lookerInstanceAttributes) UserMetadata() terra.ListValue[lookerinstance.UserMetadataAttributes] {
	return terra.ReferenceAsList[lookerinstance.UserMetadataAttributes](li.ref.Append("user_metadata"))
}

type lookerInstanceState struct {
	ConsumerNetwork       string                                      `json:"consumer_network"`
	CreateTime            string                                      `json:"create_time"`
	EgressPublicIp        string                                      `json:"egress_public_ip"`
	Id                    string                                      `json:"id"`
	IngressPrivateIp      string                                      `json:"ingress_private_ip"`
	IngressPublicIp       string                                      `json:"ingress_public_ip"`
	LookerUri             string                                      `json:"looker_uri"`
	LookerVersion         string                                      `json:"looker_version"`
	Name                  string                                      `json:"name"`
	PlatformEdition       string                                      `json:"platform_edition"`
	PrivateIpEnabled      bool                                        `json:"private_ip_enabled"`
	Project               string                                      `json:"project"`
	PublicIpEnabled       bool                                        `json:"public_ip_enabled"`
	Region                string                                      `json:"region"`
	ReservedRange         string                                      `json:"reserved_range"`
	UpdateTime            string                                      `json:"update_time"`
	AdminSettings         []lookerinstance.AdminSettingsState         `json:"admin_settings"`
	DenyMaintenancePeriod []lookerinstance.DenyMaintenancePeriodState `json:"deny_maintenance_period"`
	EncryptionConfig      []lookerinstance.EncryptionConfigState      `json:"encryption_config"`
	MaintenanceWindow     []lookerinstance.MaintenanceWindowState     `json:"maintenance_window"`
	OauthConfig           []lookerinstance.OauthConfigState           `json:"oauth_config"`
	Timeouts              *lookerinstance.TimeoutsState               `json:"timeouts"`
	UserMetadata          []lookerinstance.UserMetadataState          `json:"user_metadata"`
}
