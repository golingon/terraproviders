// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkehubscopeiambinding "github.com/golingon/terraproviders/google/4.81.0/gkehubscopeiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubScopeIamBinding creates a new instance of [GkeHubScopeIamBinding].
func NewGkeHubScopeIamBinding(name string, args GkeHubScopeIamBindingArgs) *GkeHubScopeIamBinding {
	return &GkeHubScopeIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubScopeIamBinding)(nil)

// GkeHubScopeIamBinding represents the Terraform resource google_gke_hub_scope_iam_binding.
type GkeHubScopeIamBinding struct {
	Name      string
	Args      GkeHubScopeIamBindingArgs
	state     *gkeHubScopeIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) Type() string {
	return "google_gke_hub_scope_iam_binding"
}

// LocalName returns the local name for [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) LocalName() string {
	return ghsib.Name
}

// Configuration returns the configuration (args) for [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) Configuration() interface{} {
	return ghsib.Args
}

// DependOn is used for other resources to depend on [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ghsib)
}

// Dependencies returns the list of resources [GkeHubScopeIamBinding] depends_on.
func (ghsib *GkeHubScopeIamBinding) Dependencies() terra.Dependencies {
	return ghsib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) LifecycleManagement() *terra.Lifecycle {
	return ghsib.Lifecycle
}

// Attributes returns the attributes for [GkeHubScopeIamBinding].
func (ghsib *GkeHubScopeIamBinding) Attributes() gkeHubScopeIamBindingAttributes {
	return gkeHubScopeIamBindingAttributes{ref: terra.ReferenceResource(ghsib)}
}

// ImportState imports the given attribute values into [GkeHubScopeIamBinding]'s state.
func (ghsib *GkeHubScopeIamBinding) ImportState(av io.Reader) error {
	ghsib.state = &gkeHubScopeIamBindingState{}
	if err := json.NewDecoder(av).Decode(ghsib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghsib.Type(), ghsib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubScopeIamBinding] has state.
func (ghsib *GkeHubScopeIamBinding) State() (*gkeHubScopeIamBindingState, bool) {
	return ghsib.state, ghsib.state != nil
}

// StateMust returns the state for [GkeHubScopeIamBinding]. Panics if the state is nil.
func (ghsib *GkeHubScopeIamBinding) StateMust() *gkeHubScopeIamBindingState {
	if ghsib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghsib.Type(), ghsib.LocalName()))
	}
	return ghsib.state
}

// GkeHubScopeIamBindingArgs contains the configurations for google_gke_hub_scope_iam_binding.
type GkeHubScopeIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// Condition: optional
	Condition *gkehubscopeiambinding.Condition `hcl:"condition,block"`
}
type gkeHubScopeIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(ghsib.ref.Append("etag"))
}

// Id returns a reference to field id of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghsib.ref.Append("id"))
}

// Members returns a reference to field members of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ghsib.ref.Append("members"))
}

// Project returns a reference to field project of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghsib.ref.Append("project"))
}

// Role returns a reference to field role of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ghsib.ref.Append("role"))
}

// ScopeId returns a reference to field scope_id of google_gke_hub_scope_iam_binding.
func (ghsib gkeHubScopeIamBindingAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(ghsib.ref.Append("scope_id"))
}

func (ghsib gkeHubScopeIamBindingAttributes) Condition() terra.ListValue[gkehubscopeiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[gkehubscopeiambinding.ConditionAttributes](ghsib.ref.Append("condition"))
}

type gkeHubScopeIamBindingState struct {
	Etag      string                                 `json:"etag"`
	Id        string                                 `json:"id"`
	Members   []string                               `json:"members"`
	Project   string                                 `json:"project"`
	Role      string                                 `json:"role"`
	ScopeId   string                                 `json:"scope_id"`
	Condition []gkehubscopeiambinding.ConditionState `json:"condition"`
}
