// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gameservicesgameserverconfig

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type FleetConfigs struct {
	// FleetSpec: string, required
	FleetSpec terra.StringValue `hcl:"fleet_spec,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type ScalingConfigs struct {
	// FleetAutoscalerSpec: string, required
	FleetAutoscalerSpec terra.StringValue `hcl:"fleet_autoscaler_spec,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedules: min=0
	Schedules []Schedules `hcl:"schedules,block" validate:"min=0"`
	// Selectors: min=0
	Selectors []Selectors `hcl:"selectors,block" validate:"min=0"`
}

type Schedules struct {
	// CronJobDuration: string, optional
	CronJobDuration terra.StringValue `hcl:"cron_job_duration,attr"`
	// CronSpec: string, optional
	CronSpec terra.StringValue `hcl:"cron_spec,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
}

type Selectors struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type FleetConfigsAttributes struct {
	ref terra.Reference
}

func (fc FleetConfigsAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc FleetConfigsAttributes) InternalWithRef(ref terra.Reference) FleetConfigsAttributes {
	return FleetConfigsAttributes{ref: ref}
}

func (fc FleetConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc FleetConfigsAttributes) FleetSpec() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("fleet_spec"))
}

func (fc FleetConfigsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("name"))
}

type ScalingConfigsAttributes struct {
	ref terra.Reference
}

func (sc ScalingConfigsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ScalingConfigsAttributes) InternalWithRef(ref terra.Reference) ScalingConfigsAttributes {
	return ScalingConfigsAttributes{ref: ref}
}

func (sc ScalingConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ScalingConfigsAttributes) FleetAutoscalerSpec() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("fleet_autoscaler_spec"))
}

func (sc ScalingConfigsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

func (sc ScalingConfigsAttributes) Schedules() terra.ListValue[SchedulesAttributes] {
	return terra.ReferenceAsList[SchedulesAttributes](sc.ref.Append("schedules"))
}

func (sc ScalingConfigsAttributes) Selectors() terra.ListValue[SelectorsAttributes] {
	return terra.ReferenceAsList[SelectorsAttributes](sc.ref.Append("selectors"))
}

type SchedulesAttributes struct {
	ref terra.Reference
}

func (s SchedulesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SchedulesAttributes) InternalWithRef(ref terra.Reference) SchedulesAttributes {
	return SchedulesAttributes{ref: ref}
}

func (s SchedulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SchedulesAttributes) CronJobDuration() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cron_job_duration"))
}

func (s SchedulesAttributes) CronSpec() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cron_spec"))
}

func (s SchedulesAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("end_time"))
}

func (s SchedulesAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

type SelectorsAttributes struct {
	ref terra.Reference
}

func (s SelectorsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SelectorsAttributes) InternalWithRef(ref terra.Reference) SelectorsAttributes {
	return SelectorsAttributes{ref: ref}
}

func (s SelectorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SelectorsAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("labels"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type FleetConfigsState struct {
	FleetSpec string `json:"fleet_spec"`
	Name      string `json:"name"`
}

type ScalingConfigsState struct {
	FleetAutoscalerSpec string           `json:"fleet_autoscaler_spec"`
	Name                string           `json:"name"`
	Schedules           []SchedulesState `json:"schedules"`
	Selectors           []SelectorsState `json:"selectors"`
}

type SchedulesState struct {
	CronJobDuration string `json:"cron_job_duration"`
	CronSpec        string `json:"cron_spec"`
	EndTime         string `json:"end_time"`
	StartTime       string `json:"start_time"`
}

type SelectorsState struct {
	Labels map[string]string `json:"labels"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
