// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package assuredworkloadsworkload

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Resources struct{}

type KmsSettings struct {
	// NextRotationTime: string, required
	NextRotationTime terra.StringValue `hcl:"next_rotation_time,attr" validate:"required"`
	// RotationPeriod: string, required
	RotationPeriod terra.StringValue `hcl:"rotation_period,attr" validate:"required"`
}

type ResourceSettings struct {
	// ResourceId: string, optional
	ResourceId terra.StringValue `hcl:"resource_id,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ResourcesAttributes struct {
	ref terra.Reference
}

func (r ResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ResourcesAttributes) InternalWithRef(ref terra.Reference) ResourcesAttributes {
	return ResourcesAttributes{ref: ref}
}

func (r ResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ResourcesAttributes) ResourceId() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("resource_id"))
}

func (r ResourcesAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_type"))
}

type KmsSettingsAttributes struct {
	ref terra.Reference
}

func (ks KmsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks KmsSettingsAttributes) InternalWithRef(ref terra.Reference) KmsSettingsAttributes {
	return KmsSettingsAttributes{ref: ref}
}

func (ks KmsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks KmsSettingsAttributes) NextRotationTime() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("next_rotation_time"))
}

func (ks KmsSettingsAttributes) RotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("rotation_period"))
}

type ResourceSettingsAttributes struct {
	ref terra.Reference
}

func (rs ResourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs ResourceSettingsAttributes) InternalWithRef(ref terra.Reference) ResourceSettingsAttributes {
	return ResourceSettingsAttributes{ref: ref}
}

func (rs ResourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs ResourceSettingsAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("resource_id"))
}

func (rs ResourceSettingsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("resource_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ResourcesState struct {
	ResourceId   float64 `json:"resource_id"`
	ResourceType string  `json:"resource_type"`
}

type KmsSettingsState struct {
	NextRotationTime string `json:"next_rotation_time"`
	RotationPeriod   string `json:"rotation_period"`
}

type ResourceSettingsState struct {
	ResourceId   string `json:"resource_id"`
	ResourceType string `json:"resource_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
