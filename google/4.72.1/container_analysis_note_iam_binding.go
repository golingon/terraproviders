// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	containeranalysisnoteiambinding "github.com/golingon/terraproviders/google/4.72.1/containeranalysisnoteiambinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewContainerAnalysisNoteIamBinding creates a new instance of [ContainerAnalysisNoteIamBinding].
func NewContainerAnalysisNoteIamBinding(name string, args ContainerAnalysisNoteIamBindingArgs) *ContainerAnalysisNoteIamBinding {
	return &ContainerAnalysisNoteIamBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ContainerAnalysisNoteIamBinding)(nil)

// ContainerAnalysisNoteIamBinding represents the Terraform resource google_container_analysis_note_iam_binding.
type ContainerAnalysisNoteIamBinding struct {
	Name      string
	Args      ContainerAnalysisNoteIamBindingArgs
	state     *containerAnalysisNoteIamBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) Type() string {
	return "google_container_analysis_note_iam_binding"
}

// LocalName returns the local name for [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) LocalName() string {
	return canib.Name
}

// Configuration returns the configuration (args) for [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) Configuration() interface{} {
	return canib.Args
}

// DependOn is used for other resources to depend on [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(canib)
}

// Dependencies returns the list of resources [ContainerAnalysisNoteIamBinding] depends_on.
func (canib *ContainerAnalysisNoteIamBinding) Dependencies() terra.Dependencies {
	return canib.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) LifecycleManagement() *terra.Lifecycle {
	return canib.Lifecycle
}

// Attributes returns the attributes for [ContainerAnalysisNoteIamBinding].
func (canib *ContainerAnalysisNoteIamBinding) Attributes() containerAnalysisNoteIamBindingAttributes {
	return containerAnalysisNoteIamBindingAttributes{ref: terra.ReferenceResource(canib)}
}

// ImportState imports the given attribute values into [ContainerAnalysisNoteIamBinding]'s state.
func (canib *ContainerAnalysisNoteIamBinding) ImportState(av io.Reader) error {
	canib.state = &containerAnalysisNoteIamBindingState{}
	if err := json.NewDecoder(av).Decode(canib.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", canib.Type(), canib.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ContainerAnalysisNoteIamBinding] has state.
func (canib *ContainerAnalysisNoteIamBinding) State() (*containerAnalysisNoteIamBindingState, bool) {
	return canib.state, canib.state != nil
}

// StateMust returns the state for [ContainerAnalysisNoteIamBinding]. Panics if the state is nil.
func (canib *ContainerAnalysisNoteIamBinding) StateMust() *containerAnalysisNoteIamBindingState {
	if canib.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", canib.Type(), canib.LocalName()))
	}
	return canib.state
}

// ContainerAnalysisNoteIamBindingArgs contains the configurations for google_container_analysis_note_iam_binding.
type ContainerAnalysisNoteIamBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Note: string, required
	Note terra.StringValue `hcl:"note,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *containeranalysisnoteiambinding.Condition `hcl:"condition,block"`
}
type containerAnalysisNoteIamBindingAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(canib.ref.Append("etag"))
}

// Id returns a reference to field id of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(canib.ref.Append("id"))
}

// Members returns a reference to field members of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](canib.ref.Append("members"))
}

// Note returns a reference to field note of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Note() terra.StringValue {
	return terra.ReferenceAsString(canib.ref.Append("note"))
}

// Project returns a reference to field project of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(canib.ref.Append("project"))
}

// Role returns a reference to field role of google_container_analysis_note_iam_binding.
func (canib containerAnalysisNoteIamBindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(canib.ref.Append("role"))
}

func (canib containerAnalysisNoteIamBindingAttributes) Condition() terra.ListValue[containeranalysisnoteiambinding.ConditionAttributes] {
	return terra.ReferenceAsList[containeranalysisnoteiambinding.ConditionAttributes](canib.ref.Append("condition"))
}

type containerAnalysisNoteIamBindingState struct {
	Etag      string                                           `json:"etag"`
	Id        string                                           `json:"id"`
	Members   []string                                         `json:"members"`
	Note      string                                           `json:"note"`
	Project   string                                           `json:"project"`
	Role      string                                           `json:"role"`
	Condition []containeranalysisnoteiambinding.ConditionState `json:"condition"`
}
