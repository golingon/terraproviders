// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	storageinsightsreportconfig "github.com/golingon/terraproviders/google/5.0.0/storageinsightsreportconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewStorageInsightsReportConfig creates a new instance of [StorageInsightsReportConfig].
func NewStorageInsightsReportConfig(name string, args StorageInsightsReportConfigArgs) *StorageInsightsReportConfig {
	return &StorageInsightsReportConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StorageInsightsReportConfig)(nil)

// StorageInsightsReportConfig represents the Terraform resource google_storage_insights_report_config.
type StorageInsightsReportConfig struct {
	Name      string
	Args      StorageInsightsReportConfigArgs
	state     *storageInsightsReportConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) Type() string {
	return "google_storage_insights_report_config"
}

// LocalName returns the local name for [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) LocalName() string {
	return sirc.Name
}

// Configuration returns the configuration (args) for [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) Configuration() interface{} {
	return sirc.Args
}

// DependOn is used for other resources to depend on [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(sirc)
}

// Dependencies returns the list of resources [StorageInsightsReportConfig] depends_on.
func (sirc *StorageInsightsReportConfig) Dependencies() terra.Dependencies {
	return sirc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) LifecycleManagement() *terra.Lifecycle {
	return sirc.Lifecycle
}

// Attributes returns the attributes for [StorageInsightsReportConfig].
func (sirc *StorageInsightsReportConfig) Attributes() storageInsightsReportConfigAttributes {
	return storageInsightsReportConfigAttributes{ref: terra.ReferenceResource(sirc)}
}

// ImportState imports the given attribute values into [StorageInsightsReportConfig]'s state.
func (sirc *StorageInsightsReportConfig) ImportState(av io.Reader) error {
	sirc.state = &storageInsightsReportConfigState{}
	if err := json.NewDecoder(av).Decode(sirc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sirc.Type(), sirc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [StorageInsightsReportConfig] has state.
func (sirc *StorageInsightsReportConfig) State() (*storageInsightsReportConfigState, bool) {
	return sirc.state, sirc.state != nil
}

// StateMust returns the state for [StorageInsightsReportConfig]. Panics if the state is nil.
func (sirc *StorageInsightsReportConfig) StateMust() *storageInsightsReportConfigState {
	if sirc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sirc.Type(), sirc.LocalName()))
	}
	return sirc.state
}

// StorageInsightsReportConfigArgs contains the configurations for google_storage_insights_report_config.
type StorageInsightsReportConfigArgs struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// CsvOptions: required
	CsvOptions *storageinsightsreportconfig.CsvOptions `hcl:"csv_options,block" validate:"required"`
	// FrequencyOptions: optional
	FrequencyOptions *storageinsightsreportconfig.FrequencyOptions `hcl:"frequency_options,block"`
	// ObjectMetadataReportOptions: optional
	ObjectMetadataReportOptions *storageinsightsreportconfig.ObjectMetadataReportOptions `hcl:"object_metadata_report_options,block"`
	// Timeouts: optional
	Timeouts *storageinsightsreportconfig.Timeouts `hcl:"timeouts,block"`
}
type storageInsightsReportConfigAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of google_storage_insights_report_config.
func (sirc storageInsightsReportConfigAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(sirc.ref.Append("display_name"))
}

// Id returns a reference to field id of google_storage_insights_report_config.
func (sirc storageInsightsReportConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sirc.ref.Append("id"))
}

// Location returns a reference to field location of google_storage_insights_report_config.
func (sirc storageInsightsReportConfigAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sirc.ref.Append("location"))
}

// Name returns a reference to field name of google_storage_insights_report_config.
func (sirc storageInsightsReportConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sirc.ref.Append("name"))
}

// Project returns a reference to field project of google_storage_insights_report_config.
func (sirc storageInsightsReportConfigAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(sirc.ref.Append("project"))
}

func (sirc storageInsightsReportConfigAttributes) CsvOptions() terra.ListValue[storageinsightsreportconfig.CsvOptionsAttributes] {
	return terra.ReferenceAsList[storageinsightsreportconfig.CsvOptionsAttributes](sirc.ref.Append("csv_options"))
}

func (sirc storageInsightsReportConfigAttributes) FrequencyOptions() terra.ListValue[storageinsightsreportconfig.FrequencyOptionsAttributes] {
	return terra.ReferenceAsList[storageinsightsreportconfig.FrequencyOptionsAttributes](sirc.ref.Append("frequency_options"))
}

func (sirc storageInsightsReportConfigAttributes) ObjectMetadataReportOptions() terra.ListValue[storageinsightsreportconfig.ObjectMetadataReportOptionsAttributes] {
	return terra.ReferenceAsList[storageinsightsreportconfig.ObjectMetadataReportOptionsAttributes](sirc.ref.Append("object_metadata_report_options"))
}

func (sirc storageInsightsReportConfigAttributes) Timeouts() storageinsightsreportconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[storageinsightsreportconfig.TimeoutsAttributes](sirc.ref.Append("timeouts"))
}

type storageInsightsReportConfigState struct {
	DisplayName                 string                                                         `json:"display_name"`
	Id                          string                                                         `json:"id"`
	Location                    string                                                         `json:"location"`
	Name                        string                                                         `json:"name"`
	Project                     string                                                         `json:"project"`
	CsvOptions                  []storageinsightsreportconfig.CsvOptionsState                  `json:"csv_options"`
	FrequencyOptions            []storageinsightsreportconfig.FrequencyOptionsState            `json:"frequency_options"`
	ObjectMetadataReportOptions []storageinsightsreportconfig.ObjectMetadataReportOptionsState `json:"object_metadata_report_options"`
	Timeouts                    *storageinsightsreportconfig.TimeoutsState                     `json:"timeouts"`
}
