// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkehubnamespace "github.com/golingon/terraproviders/google/5.0.0/gkehubnamespace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubNamespace creates a new instance of [GkeHubNamespace].
func NewGkeHubNamespace(name string, args GkeHubNamespaceArgs) *GkeHubNamespace {
	return &GkeHubNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubNamespace)(nil)

// GkeHubNamespace represents the Terraform resource google_gke_hub_namespace.
type GkeHubNamespace struct {
	Name      string
	Args      GkeHubNamespaceArgs
	state     *gkeHubNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubNamespace].
func (ghn *GkeHubNamespace) Type() string {
	return "google_gke_hub_namespace"
}

// LocalName returns the local name for [GkeHubNamespace].
func (ghn *GkeHubNamespace) LocalName() string {
	return ghn.Name
}

// Configuration returns the configuration (args) for [GkeHubNamespace].
func (ghn *GkeHubNamespace) Configuration() interface{} {
	return ghn.Args
}

// DependOn is used for other resources to depend on [GkeHubNamespace].
func (ghn *GkeHubNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(ghn)
}

// Dependencies returns the list of resources [GkeHubNamespace] depends_on.
func (ghn *GkeHubNamespace) Dependencies() terra.Dependencies {
	return ghn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubNamespace].
func (ghn *GkeHubNamespace) LifecycleManagement() *terra.Lifecycle {
	return ghn.Lifecycle
}

// Attributes returns the attributes for [GkeHubNamespace].
func (ghn *GkeHubNamespace) Attributes() gkeHubNamespaceAttributes {
	return gkeHubNamespaceAttributes{ref: terra.ReferenceResource(ghn)}
}

// ImportState imports the given attribute values into [GkeHubNamespace]'s state.
func (ghn *GkeHubNamespace) ImportState(av io.Reader) error {
	ghn.state = &gkeHubNamespaceState{}
	if err := json.NewDecoder(av).Decode(ghn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghn.Type(), ghn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubNamespace] has state.
func (ghn *GkeHubNamespace) State() (*gkeHubNamespaceState, bool) {
	return ghn.state, ghn.state != nil
}

// StateMust returns the state for [GkeHubNamespace]. Panics if the state is nil.
func (ghn *GkeHubNamespace) StateMust() *gkeHubNamespaceState {
	if ghn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghn.Type(), ghn.LocalName()))
	}
	return ghn.state
}

// GkeHubNamespaceArgs contains the configurations for google_gke_hub_namespace.
type GkeHubNamespaceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NamespaceLabels: map of string, optional
	NamespaceLabels terra.MapValue[terra.StringValue] `hcl:"namespace_labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// ScopeNamespaceId: string, required
	ScopeNamespaceId terra.StringValue `hcl:"scope_namespace_id,attr" validate:"required"`
	// State: min=0
	State []gkehubnamespace.State `hcl:"state,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gkehubnamespace.Timeouts `hcl:"timeouts,block"`
}
type gkeHubNamespaceAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("delete_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghn.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghn.ref.Append("labels"))
}

// Name returns a reference to field name of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("name"))
}

// NamespaceLabels returns a reference to field namespace_labels of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) NamespaceLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghn.ref.Append("namespace_labels"))
}

// Project returns a reference to field project of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("project"))
}

// Scope returns a reference to field scope of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("scope"))
}

// ScopeId returns a reference to field scope_id of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("scope_id"))
}

// ScopeNamespaceId returns a reference to field scope_namespace_id of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) ScopeNamespaceId() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("scope_namespace_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghn.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_namespace.
func (ghn gkeHubNamespaceAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ghn.ref.Append("update_time"))
}

func (ghn gkeHubNamespaceAttributes) State() terra.ListValue[gkehubnamespace.StateAttributes] {
	return terra.ReferenceAsList[gkehubnamespace.StateAttributes](ghn.ref.Append("state"))
}

func (ghn gkeHubNamespaceAttributes) Timeouts() gkehubnamespace.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkehubnamespace.TimeoutsAttributes](ghn.ref.Append("timeouts"))
}

type gkeHubNamespaceState struct {
	CreateTime       string                         `json:"create_time"`
	DeleteTime       string                         `json:"delete_time"`
	EffectiveLabels  map[string]string              `json:"effective_labels"`
	Id               string                         `json:"id"`
	Labels           map[string]string              `json:"labels"`
	Name             string                         `json:"name"`
	NamespaceLabels  map[string]string              `json:"namespace_labels"`
	Project          string                         `json:"project"`
	Scope            string                         `json:"scope"`
	ScopeId          string                         `json:"scope_id"`
	ScopeNamespaceId string                         `json:"scope_namespace_id"`
	TerraformLabels  map[string]string              `json:"terraform_labels"`
	Uid              string                         `json:"uid"`
	UpdateTime       string                         `json:"update_time"`
	State            []gkehubnamespace.StateState   `json:"state"`
	Timeouts         *gkehubnamespace.TimeoutsState `json:"timeouts"`
}
