// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkehubmembershipbinding "github.com/golingon/terraproviders/google/5.0.0/gkehubmembershipbinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubMembershipBinding creates a new instance of [GkeHubMembershipBinding].
func NewGkeHubMembershipBinding(name string, args GkeHubMembershipBindingArgs) *GkeHubMembershipBinding {
	return &GkeHubMembershipBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubMembershipBinding)(nil)

// GkeHubMembershipBinding represents the Terraform resource google_gke_hub_membership_binding.
type GkeHubMembershipBinding struct {
	Name      string
	Args      GkeHubMembershipBindingArgs
	state     *gkeHubMembershipBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) Type() string {
	return "google_gke_hub_membership_binding"
}

// LocalName returns the local name for [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) LocalName() string {
	return ghmb.Name
}

// Configuration returns the configuration (args) for [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) Configuration() interface{} {
	return ghmb.Args
}

// DependOn is used for other resources to depend on [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ghmb)
}

// Dependencies returns the list of resources [GkeHubMembershipBinding] depends_on.
func (ghmb *GkeHubMembershipBinding) Dependencies() terra.Dependencies {
	return ghmb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) LifecycleManagement() *terra.Lifecycle {
	return ghmb.Lifecycle
}

// Attributes returns the attributes for [GkeHubMembershipBinding].
func (ghmb *GkeHubMembershipBinding) Attributes() gkeHubMembershipBindingAttributes {
	return gkeHubMembershipBindingAttributes{ref: terra.ReferenceResource(ghmb)}
}

// ImportState imports the given attribute values into [GkeHubMembershipBinding]'s state.
func (ghmb *GkeHubMembershipBinding) ImportState(av io.Reader) error {
	ghmb.state = &gkeHubMembershipBindingState{}
	if err := json.NewDecoder(av).Decode(ghmb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghmb.Type(), ghmb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubMembershipBinding] has state.
func (ghmb *GkeHubMembershipBinding) State() (*gkeHubMembershipBindingState, bool) {
	return ghmb.state, ghmb.state != nil
}

// StateMust returns the state for [GkeHubMembershipBinding]. Panics if the state is nil.
func (ghmb *GkeHubMembershipBinding) StateMust() *gkeHubMembershipBindingState {
	if ghmb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghmb.Type(), ghmb.LocalName()))
	}
	return ghmb.state
}

// GkeHubMembershipBindingArgs contains the configurations for google_gke_hub_membership_binding.
type GkeHubMembershipBindingArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// MembershipBindingId: string, required
	MembershipBindingId terra.StringValue `hcl:"membership_binding_id,attr" validate:"required"`
	// MembershipId: string, required
	MembershipId terra.StringValue `hcl:"membership_id,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// State: min=0
	State []gkehubmembershipbinding.State `hcl:"state,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *gkehubmembershipbinding.Timeouts `hcl:"timeouts,block"`
}
type gkeHubMembershipBindingAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("delete_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghmb.ref.Append("effective_labels"))
}

// Id returns a reference to field id of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghmb.ref.Append("labels"))
}

// Location returns a reference to field location of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("location"))
}

// MembershipBindingId returns a reference to field membership_binding_id of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) MembershipBindingId() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("membership_binding_id"))
}

// MembershipId returns a reference to field membership_id of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) MembershipId() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("membership_id"))
}

// Name returns a reference to field name of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("project"))
}

// Scope returns a reference to field scope of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("scope"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghmb.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_membership_binding.
func (ghmb gkeHubMembershipBindingAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ghmb.ref.Append("update_time"))
}

func (ghmb gkeHubMembershipBindingAttributes) State() terra.ListValue[gkehubmembershipbinding.StateAttributes] {
	return terra.ReferenceAsList[gkehubmembershipbinding.StateAttributes](ghmb.ref.Append("state"))
}

func (ghmb gkeHubMembershipBindingAttributes) Timeouts() gkehubmembershipbinding.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkehubmembershipbinding.TimeoutsAttributes](ghmb.ref.Append("timeouts"))
}

type gkeHubMembershipBindingState struct {
	CreateTime          string                                 `json:"create_time"`
	DeleteTime          string                                 `json:"delete_time"`
	EffectiveLabels     map[string]string                      `json:"effective_labels"`
	Id                  string                                 `json:"id"`
	Labels              map[string]string                      `json:"labels"`
	Location            string                                 `json:"location"`
	MembershipBindingId string                                 `json:"membership_binding_id"`
	MembershipId        string                                 `json:"membership_id"`
	Name                string                                 `json:"name"`
	Project             string                                 `json:"project"`
	Scope               string                                 `json:"scope"`
	TerraformLabels     map[string]string                      `json:"terraform_labels"`
	Uid                 string                                 `json:"uid"`
	UpdateTime          string                                 `json:"update_time"`
	State               []gkehubmembershipbinding.StateState   `json:"state"`
	Timeouts            *gkehubmembershipbinding.TimeoutsState `json:"timeouts"`
}
