// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	gkehubscoperbacrolebinding "github.com/golingon/terraproviders/google/5.0.0/gkehubscoperbacrolebinding"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGkeHubScopeRbacRoleBinding creates a new instance of [GkeHubScopeRbacRoleBinding].
func NewGkeHubScopeRbacRoleBinding(name string, args GkeHubScopeRbacRoleBindingArgs) *GkeHubScopeRbacRoleBinding {
	return &GkeHubScopeRbacRoleBinding{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GkeHubScopeRbacRoleBinding)(nil)

// GkeHubScopeRbacRoleBinding represents the Terraform resource google_gke_hub_scope_rbac_role_binding.
type GkeHubScopeRbacRoleBinding struct {
	Name      string
	Args      GkeHubScopeRbacRoleBindingArgs
	state     *gkeHubScopeRbacRoleBindingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) Type() string {
	return "google_gke_hub_scope_rbac_role_binding"
}

// LocalName returns the local name for [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) LocalName() string {
	return ghsrrb.Name
}

// Configuration returns the configuration (args) for [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) Configuration() interface{} {
	return ghsrrb.Args
}

// DependOn is used for other resources to depend on [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) DependOn() terra.Reference {
	return terra.ReferenceResource(ghsrrb)
}

// Dependencies returns the list of resources [GkeHubScopeRbacRoleBinding] depends_on.
func (ghsrrb *GkeHubScopeRbacRoleBinding) Dependencies() terra.Dependencies {
	return ghsrrb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) LifecycleManagement() *terra.Lifecycle {
	return ghsrrb.Lifecycle
}

// Attributes returns the attributes for [GkeHubScopeRbacRoleBinding].
func (ghsrrb *GkeHubScopeRbacRoleBinding) Attributes() gkeHubScopeRbacRoleBindingAttributes {
	return gkeHubScopeRbacRoleBindingAttributes{ref: terra.ReferenceResource(ghsrrb)}
}

// ImportState imports the given attribute values into [GkeHubScopeRbacRoleBinding]'s state.
func (ghsrrb *GkeHubScopeRbacRoleBinding) ImportState(av io.Reader) error {
	ghsrrb.state = &gkeHubScopeRbacRoleBindingState{}
	if err := json.NewDecoder(av).Decode(ghsrrb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ghsrrb.Type(), ghsrrb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GkeHubScopeRbacRoleBinding] has state.
func (ghsrrb *GkeHubScopeRbacRoleBinding) State() (*gkeHubScopeRbacRoleBindingState, bool) {
	return ghsrrb.state, ghsrrb.state != nil
}

// StateMust returns the state for [GkeHubScopeRbacRoleBinding]. Panics if the state is nil.
func (ghsrrb *GkeHubScopeRbacRoleBinding) StateMust() *gkeHubScopeRbacRoleBindingState {
	if ghsrrb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ghsrrb.Type(), ghsrrb.LocalName()))
	}
	return ghsrrb.state
}

// GkeHubScopeRbacRoleBindingArgs contains the configurations for google_gke_hub_scope_rbac_role_binding.
type GkeHubScopeRbacRoleBindingArgs struct {
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// ScopeId: string, required
	ScopeId terra.StringValue `hcl:"scope_id,attr" validate:"required"`
	// ScopeRbacRoleBindingId: string, required
	ScopeRbacRoleBindingId terra.StringValue `hcl:"scope_rbac_role_binding_id,attr" validate:"required"`
	// User: string, optional
	User terra.StringValue `hcl:"user,attr"`
	// State: min=0
	State []gkehubscoperbacrolebinding.State `hcl:"state,block" validate:"min=0"`
	// Role: required
	Role *gkehubscoperbacrolebinding.Role `hcl:"role,block" validate:"required"`
	// Timeouts: optional
	Timeouts *gkehubscoperbacrolebinding.Timeouts `hcl:"timeouts,block"`
}
type gkeHubScopeRbacRoleBindingAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("create_time"))
}

// DeleteTime returns a reference to field delete_time of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) DeleteTime() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("delete_time"))
}

// EffectiveLabels returns a reference to field effective_labels of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) EffectiveLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghsrrb.ref.Append("effective_labels"))
}

// Group returns a reference to field group of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("group"))
}

// Id returns a reference to field id of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("id"))
}

// Labels returns a reference to field labels of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghsrrb.ref.Append("labels"))
}

// Name returns a reference to field name of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("name"))
}

// Project returns a reference to field project of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("project"))
}

// ScopeId returns a reference to field scope_id of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) ScopeId() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("scope_id"))
}

// ScopeRbacRoleBindingId returns a reference to field scope_rbac_role_binding_id of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) ScopeRbacRoleBindingId() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("scope_rbac_role_binding_id"))
}

// TerraformLabels returns a reference to field terraform_labels of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) TerraformLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ghsrrb.ref.Append("terraform_labels"))
}

// Uid returns a reference to field uid of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("uid"))
}

// UpdateTime returns a reference to field update_time of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("update_time"))
}

// User returns a reference to field user of google_gke_hub_scope_rbac_role_binding.
func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(ghsrrb.ref.Append("user"))
}

func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) State() terra.ListValue[gkehubscoperbacrolebinding.StateAttributes] {
	return terra.ReferenceAsList[gkehubscoperbacrolebinding.StateAttributes](ghsrrb.ref.Append("state"))
}

func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Role() terra.ListValue[gkehubscoperbacrolebinding.RoleAttributes] {
	return terra.ReferenceAsList[gkehubscoperbacrolebinding.RoleAttributes](ghsrrb.ref.Append("role"))
}

func (ghsrrb gkeHubScopeRbacRoleBindingAttributes) Timeouts() gkehubscoperbacrolebinding.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gkehubscoperbacrolebinding.TimeoutsAttributes](ghsrrb.ref.Append("timeouts"))
}

type gkeHubScopeRbacRoleBindingState struct {
	CreateTime             string                                    `json:"create_time"`
	DeleteTime             string                                    `json:"delete_time"`
	EffectiveLabels        map[string]string                         `json:"effective_labels"`
	Group                  string                                    `json:"group"`
	Id                     string                                    `json:"id"`
	Labels                 map[string]string                         `json:"labels"`
	Name                   string                                    `json:"name"`
	Project                string                                    `json:"project"`
	ScopeId                string                                    `json:"scope_id"`
	ScopeRbacRoleBindingId string                                    `json:"scope_rbac_role_binding_id"`
	TerraformLabels        map[string]string                         `json:"terraform_labels"`
	Uid                    string                                    `json:"uid"`
	UpdateTime             string                                    `json:"update_time"`
	User                   string                                    `json:"user"`
	State                  []gkehubscoperbacrolebinding.StateState   `json:"state"`
	Role                   []gkehubscoperbacrolebinding.RoleState    `json:"role"`
	Timeouts               *gkehubscoperbacrolebinding.TimeoutsState `json:"timeouts"`
}
