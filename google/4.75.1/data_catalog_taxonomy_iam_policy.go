// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package google

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDataCatalogTaxonomyIamPolicy creates a new instance of [DataCatalogTaxonomyIamPolicy].
func NewDataCatalogTaxonomyIamPolicy(name string, args DataCatalogTaxonomyIamPolicyArgs) *DataCatalogTaxonomyIamPolicy {
	return &DataCatalogTaxonomyIamPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataCatalogTaxonomyIamPolicy)(nil)

// DataCatalogTaxonomyIamPolicy represents the Terraform resource google_data_catalog_taxonomy_iam_policy.
type DataCatalogTaxonomyIamPolicy struct {
	Name      string
	Args      DataCatalogTaxonomyIamPolicyArgs
	state     *dataCatalogTaxonomyIamPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) Type() string {
	return "google_data_catalog_taxonomy_iam_policy"
}

// LocalName returns the local name for [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) LocalName() string {
	return dctip.Name
}

// Configuration returns the configuration (args) for [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) Configuration() interface{} {
	return dctip.Args
}

// DependOn is used for other resources to depend on [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(dctip)
}

// Dependencies returns the list of resources [DataCatalogTaxonomyIamPolicy] depends_on.
func (dctip *DataCatalogTaxonomyIamPolicy) Dependencies() terra.Dependencies {
	return dctip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) LifecycleManagement() *terra.Lifecycle {
	return dctip.Lifecycle
}

// Attributes returns the attributes for [DataCatalogTaxonomyIamPolicy].
func (dctip *DataCatalogTaxonomyIamPolicy) Attributes() dataCatalogTaxonomyIamPolicyAttributes {
	return dataCatalogTaxonomyIamPolicyAttributes{ref: terra.ReferenceResource(dctip)}
}

// ImportState imports the given attribute values into [DataCatalogTaxonomyIamPolicy]'s state.
func (dctip *DataCatalogTaxonomyIamPolicy) ImportState(av io.Reader) error {
	dctip.state = &dataCatalogTaxonomyIamPolicyState{}
	if err := json.NewDecoder(av).Decode(dctip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dctip.Type(), dctip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DataCatalogTaxonomyIamPolicy] has state.
func (dctip *DataCatalogTaxonomyIamPolicy) State() (*dataCatalogTaxonomyIamPolicyState, bool) {
	return dctip.state, dctip.state != nil
}

// StateMust returns the state for [DataCatalogTaxonomyIamPolicy]. Panics if the state is nil.
func (dctip *DataCatalogTaxonomyIamPolicy) StateMust() *dataCatalogTaxonomyIamPolicyState {
	if dctip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dctip.Type(), dctip.LocalName()))
	}
	return dctip.state
}

// DataCatalogTaxonomyIamPolicyArgs contains the configurations for google_data_catalog_taxonomy_iam_policy.
type DataCatalogTaxonomyIamPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyData: string, required
	PolicyData terra.StringValue `hcl:"policy_data,attr" validate:"required"`
	// Project: string, optional
	Project terra.StringValue `hcl:"project,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Taxonomy: string, required
	Taxonomy terra.StringValue `hcl:"taxonomy,attr" validate:"required"`
}
type dataCatalogTaxonomyIamPolicyAttributes struct {
	ref terra.Reference
}

// Etag returns a reference to field etag of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("etag"))
}

// Id returns a reference to field id of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("id"))
}

// PolicyData returns a reference to field policy_data of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) PolicyData() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("policy_data"))
}

// Project returns a reference to field project of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("project"))
}

// Region returns a reference to field region of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("region"))
}

// Taxonomy returns a reference to field taxonomy of google_data_catalog_taxonomy_iam_policy.
func (dctip dataCatalogTaxonomyIamPolicyAttributes) Taxonomy() terra.StringValue {
	return terra.ReferenceAsString(dctip.ref.Append("taxonomy"))
}

type dataCatalogTaxonomyIamPolicyState struct {
	Etag       string `json:"etag"`
	Id         string `json:"id"`
	PolicyData string `json:"policy_data"`
	Project    string `json:"project"`
	Region     string `json:"region"`
	Taxonomy   string `json:"taxonomy"`
}
