// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataiampolicy

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AuditConfig struct {
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// AuditLogConfigs: min=1
	AuditLogConfigs []AuditLogConfigs `hcl:"audit_log_configs,block" validate:"min=1"`
}

type AuditLogConfigs struct {
	// ExemptedMembers: set of string, optional
	ExemptedMembers terra.SetValue[terra.StringValue] `hcl:"exempted_members,attr"`
	// LogType: string, required
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type Binding struct {
	// Members: set of string, required
	Members terra.SetValue[terra.StringValue] `hcl:"members,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type Condition struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
}

type AuditConfigAttributes struct {
	ref terra.Reference
}

func (ac AuditConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AuditConfigAttributes) InternalWithRef(ref terra.Reference) AuditConfigAttributes {
	return AuditConfigAttributes{ref: ref}
}

func (ac AuditConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AuditConfigAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("service"))
}

func (ac AuditConfigAttributes) AuditLogConfigs() terra.SetValue[AuditLogConfigsAttributes] {
	return terra.ReferenceAsSet[AuditLogConfigsAttributes](ac.ref.Append("audit_log_configs"))
}

type AuditLogConfigsAttributes struct {
	ref terra.Reference
}

func (alc AuditLogConfigsAttributes) InternalRef() (terra.Reference, error) {
	return alc.ref, nil
}

func (alc AuditLogConfigsAttributes) InternalWithRef(ref terra.Reference) AuditLogConfigsAttributes {
	return AuditLogConfigsAttributes{ref: ref}
}

func (alc AuditLogConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alc.ref.InternalTokens()
}

func (alc AuditLogConfigsAttributes) ExemptedMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alc.ref.Append("exempted_members"))
}

func (alc AuditLogConfigsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("log_type"))
}

type BindingAttributes struct {
	ref terra.Reference
}

func (b BindingAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BindingAttributes) InternalWithRef(ref terra.Reference) BindingAttributes {
	return BindingAttributes{ref: ref}
}

func (b BindingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BindingAttributes) Members() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](b.ref.Append("members"))
}

func (b BindingAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("role"))
}

func (b BindingAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](b.ref.Append("condition"))
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("description"))
}

func (c ConditionAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

func (c ConditionAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("title"))
}

type AuditConfigState struct {
	Service         string                 `json:"service"`
	AuditLogConfigs []AuditLogConfigsState `json:"audit_log_configs"`
}

type AuditLogConfigsState struct {
	ExemptedMembers []string `json:"exempted_members"`
	LogType         string   `json:"log_type"`
}

type BindingState struct {
	Members   []string         `json:"members"`
	Role      string           `json:"role"`
	Condition []ConditionState `json:"condition"`
}

type ConditionState struct {
	Description string `json:"description"`
	Expression  string `json:"expression"`
	Title       string `json:"title"`
}
