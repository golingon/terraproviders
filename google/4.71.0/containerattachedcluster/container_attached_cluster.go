// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package containerattachedcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Errors struct{}

type WorkloadIdentityConfig struct{}

type Authorization struct {
	// AdminUsers: list of string, optional
	AdminUsers terra.ListValue[terra.StringValue] `hcl:"admin_users,attr"`
}

type Fleet struct {
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
}

type LoggingConfig struct {
	// ComponentConfig: optional
	ComponentConfig *ComponentConfig `hcl:"component_config,block"`
}

type ComponentConfig struct {
	// EnableComponents: list of string, optional
	EnableComponents terra.ListValue[terra.StringValue] `hcl:"enable_components,attr"`
}

type MonitoringConfig struct {
	// ManagedPrometheusConfig: optional
	ManagedPrometheusConfig *ManagedPrometheusConfig `hcl:"managed_prometheus_config,block"`
}

type ManagedPrometheusConfig struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type OidcConfig struct {
	// IssuerUrl: string, required
	IssuerUrl terra.StringValue `hcl:"issuer_url,attr" validate:"required"`
	// Jwks: string, optional
	Jwks terra.StringValue `hcl:"jwks,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ErrorsAttributes struct {
	ref terra.Reference
}

func (e ErrorsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ErrorsAttributes) InternalWithRef(ref terra.Reference) ErrorsAttributes {
	return ErrorsAttributes{ref: ref}
}

func (e ErrorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ErrorsAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("message"))
}

type WorkloadIdentityConfigAttributes struct {
	ref terra.Reference
}

func (wic WorkloadIdentityConfigAttributes) InternalRef() (terra.Reference, error) {
	return wic.ref, nil
}

func (wic WorkloadIdentityConfigAttributes) InternalWithRef(ref terra.Reference) WorkloadIdentityConfigAttributes {
	return WorkloadIdentityConfigAttributes{ref: ref}
}

func (wic WorkloadIdentityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wic.ref.InternalTokens()
}

func (wic WorkloadIdentityConfigAttributes) IdentityProvider() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("identity_provider"))
}

func (wic WorkloadIdentityConfigAttributes) IssuerUri() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("issuer_uri"))
}

func (wic WorkloadIdentityConfigAttributes) WorkloadPool() terra.StringValue {
	return terra.ReferenceAsString(wic.ref.Append("workload_pool"))
}

type AuthorizationAttributes struct {
	ref terra.Reference
}

func (a AuthorizationAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AuthorizationAttributes) InternalWithRef(ref terra.Reference) AuthorizationAttributes {
	return AuthorizationAttributes{ref: ref}
}

func (a AuthorizationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AuthorizationAttributes) AdminUsers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("admin_users"))
}

type FleetAttributes struct {
	ref terra.Reference
}

func (f FleetAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FleetAttributes) InternalWithRef(ref terra.Reference) FleetAttributes {
	return FleetAttributes{ref: ref}
}

func (f FleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FleetAttributes) Membership() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("membership"))
}

func (f FleetAttributes) Project() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("project"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) ComponentConfig() terra.ListValue[ComponentConfigAttributes] {
	return terra.ReferenceAsList[ComponentConfigAttributes](lc.ref.Append("component_config"))
}

type ComponentConfigAttributes struct {
	ref terra.Reference
}

func (cc ComponentConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc ComponentConfigAttributes) InternalWithRef(ref terra.Reference) ComponentConfigAttributes {
	return ComponentConfigAttributes{ref: ref}
}

func (cc ComponentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc ComponentConfigAttributes) EnableComponents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("enable_components"))
}

type MonitoringConfigAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitoringConfigAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigAttributes {
	return MonitoringConfigAttributes{ref: ref}
}

func (mc MonitoringConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigAttributes) ManagedPrometheusConfig() terra.ListValue[ManagedPrometheusConfigAttributes] {
	return terra.ReferenceAsList[ManagedPrometheusConfigAttributes](mc.ref.Append("managed_prometheus_config"))
}

type ManagedPrometheusConfigAttributes struct {
	ref terra.Reference
}

func (mpc ManagedPrometheusConfigAttributes) InternalRef() (terra.Reference, error) {
	return mpc.ref, nil
}

func (mpc ManagedPrometheusConfigAttributes) InternalWithRef(ref terra.Reference) ManagedPrometheusConfigAttributes {
	return ManagedPrometheusConfigAttributes{ref: ref}
}

func (mpc ManagedPrometheusConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mpc.ref.InternalTokens()
}

func (mpc ManagedPrometheusConfigAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(mpc.ref.Append("enabled"))
}

type OidcConfigAttributes struct {
	ref terra.Reference
}

func (oc OidcConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OidcConfigAttributes) InternalWithRef(ref terra.Reference) OidcConfigAttributes {
	return OidcConfigAttributes{ref: ref}
}

func (oc OidcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OidcConfigAttributes) IssuerUrl() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("issuer_url"))
}

func (oc OidcConfigAttributes) Jwks() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("jwks"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ErrorsState struct {
	Message string `json:"message"`
}

type WorkloadIdentityConfigState struct {
	IdentityProvider string `json:"identity_provider"`
	IssuerUri        string `json:"issuer_uri"`
	WorkloadPool     string `json:"workload_pool"`
}

type AuthorizationState struct {
	AdminUsers []string `json:"admin_users"`
}

type FleetState struct {
	Membership string `json:"membership"`
	Project    string `json:"project"`
}

type LoggingConfigState struct {
	ComponentConfig []ComponentConfigState `json:"component_config"`
}

type ComponentConfigState struct {
	EnableComponents []string `json:"enable_components"`
}

type MonitoringConfigState struct {
	ManagedPrometheusConfig []ManagedPrometheusConfigState `json:"managed_prometheus_config"`
}

type ManagedPrometheusConfigState struct {
	Enabled bool `json:"enabled"`
}

type OidcConfigState struct {
	IssuerUrl string `json:"issuer_url"`
	Jwks      string `json:"jwks"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
