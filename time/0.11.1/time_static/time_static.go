// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package time_static

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource time_static.
type Resource struct {
	Name      string
	Args      Args
	state     *timeStaticState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ts *Resource) Type() string {
	return "time_static"
}

// LocalName returns the local name for [Resource].
func (ts *Resource) LocalName() string {
	return ts.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ts *Resource) Configuration() interface{} {
	return ts.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ts *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ts)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ts *Resource) Dependencies() terra.Dependencies {
	return ts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ts *Resource) LifecycleManagement() *terra.Lifecycle {
	return ts.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ts *Resource) Attributes() timeStaticAttributes {
	return timeStaticAttributes{ref: terra.ReferenceResource(ts)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ts *Resource) ImportState(state io.Reader) error {
	ts.state = &timeStaticState{}
	if err := json.NewDecoder(state).Decode(ts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ts.Type(), ts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ts *Resource) State() (*timeStaticState, bool) {
	return ts.state, ts.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ts *Resource) StateMust() *timeStaticState {
	if ts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ts.Type(), ts.LocalName()))
	}
	return ts.state
}

// Args contains the configurations for time_static.
type Args struct {
	// Rfc3339: string, optional
	Rfc3339 terra.StringValue `hcl:"rfc3339,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}

type timeStaticAttributes struct {
	ref terra.Reference
}

// Day returns a reference to field day of time_static.
func (ts timeStaticAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("day"))
}

// Hour returns a reference to field hour of time_static.
func (ts timeStaticAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("hour"))
}

// Id returns a reference to field id of time_static.
func (ts timeStaticAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("id"))
}

// Minute returns a reference to field minute of time_static.
func (ts timeStaticAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("minute"))
}

// Month returns a reference to field month of time_static.
func (ts timeStaticAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("month"))
}

// Rfc3339 returns a reference to field rfc3339 of time_static.
func (ts timeStaticAttributes) Rfc3339() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("rfc3339"))
}

// Second returns a reference to field second of time_static.
func (ts timeStaticAttributes) Second() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("second"))
}

// Triggers returns a reference to field triggers of time_static.
func (ts timeStaticAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ts.ref.Append("triggers"))
}

// Unix returns a reference to field unix of time_static.
func (ts timeStaticAttributes) Unix() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("unix"))
}

// Year returns a reference to field year of time_static.
func (ts timeStaticAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(ts.ref.Append("year"))
}

type timeStaticState struct {
	Day      float64           `json:"day"`
	Hour     float64           `json:"hour"`
	Id       string            `json:"id"`
	Minute   float64           `json:"minute"`
	Month    float64           `json:"month"`
	Rfc3339  string            `json:"rfc3339"`
	Second   float64           `json:"second"`
	Triggers map[string]string `json:"triggers"`
	Unix     float64           `json:"unix"`
	Year     float64           `json:"year"`
}
