// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package time

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewOffset creates a new instance of [Offset].
func NewOffset(name string, args OffsetArgs) *Offset {
	return &Offset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Offset)(nil)

// Offset represents the Terraform resource time_offset.
type Offset struct {
	Name      string
	Args      OffsetArgs
	state     *offsetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Offset].
func (o *Offset) Type() string {
	return "time_offset"
}

// LocalName returns the local name for [Offset].
func (o *Offset) LocalName() string {
	return o.Name
}

// Configuration returns the configuration (args) for [Offset].
func (o *Offset) Configuration() interface{} {
	return o.Args
}

// DependOn is used for other resources to depend on [Offset].
func (o *Offset) DependOn() terra.Reference {
	return terra.ReferenceResource(o)
}

// Dependencies returns the list of resources [Offset] depends_on.
func (o *Offset) Dependencies() terra.Dependencies {
	return o.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Offset].
func (o *Offset) LifecycleManagement() *terra.Lifecycle {
	return o.Lifecycle
}

// Attributes returns the attributes for [Offset].
func (o *Offset) Attributes() offsetAttributes {
	return offsetAttributes{ref: terra.ReferenceResource(o)}
}

// ImportState imports the given attribute values into [Offset]'s state.
func (o *Offset) ImportState(av io.Reader) error {
	o.state = &offsetState{}
	if err := json.NewDecoder(av).Decode(o.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", o.Type(), o.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Offset] has state.
func (o *Offset) State() (*offsetState, bool) {
	return o.state, o.state != nil
}

// StateMust returns the state for [Offset]. Panics if the state is nil.
func (o *Offset) StateMust() *offsetState {
	if o.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", o.Type(), o.LocalName()))
	}
	return o.state
}

// OffsetArgs contains the configurations for time_offset.
type OffsetArgs struct {
	// BaseRfc3339: string, optional
	BaseRfc3339 terra.StringValue `hcl:"base_rfc3339,attr"`
	// OffsetDays: number, optional
	OffsetDays terra.NumberValue `hcl:"offset_days,attr"`
	// OffsetHours: number, optional
	OffsetHours terra.NumberValue `hcl:"offset_hours,attr"`
	// OffsetMinutes: number, optional
	OffsetMinutes terra.NumberValue `hcl:"offset_minutes,attr"`
	// OffsetMonths: number, optional
	OffsetMonths terra.NumberValue `hcl:"offset_months,attr"`
	// OffsetSeconds: number, optional
	OffsetSeconds terra.NumberValue `hcl:"offset_seconds,attr"`
	// OffsetYears: number, optional
	OffsetYears terra.NumberValue `hcl:"offset_years,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}
type offsetAttributes struct {
	ref terra.Reference
}

// BaseRfc3339 returns a reference to field base_rfc3339 of time_offset.
func (o offsetAttributes) BaseRfc3339() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("base_rfc3339"))
}

// Day returns a reference to field day of time_offset.
func (o offsetAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("day"))
}

// Hour returns a reference to field hour of time_offset.
func (o offsetAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("hour"))
}

// Id returns a reference to field id of time_offset.
func (o offsetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("id"))
}

// Minute returns a reference to field minute of time_offset.
func (o offsetAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("minute"))
}

// Month returns a reference to field month of time_offset.
func (o offsetAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("month"))
}

// OffsetDays returns a reference to field offset_days of time_offset.
func (o offsetAttributes) OffsetDays() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_days"))
}

// OffsetHours returns a reference to field offset_hours of time_offset.
func (o offsetAttributes) OffsetHours() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_hours"))
}

// OffsetMinutes returns a reference to field offset_minutes of time_offset.
func (o offsetAttributes) OffsetMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_minutes"))
}

// OffsetMonths returns a reference to field offset_months of time_offset.
func (o offsetAttributes) OffsetMonths() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_months"))
}

// OffsetSeconds returns a reference to field offset_seconds of time_offset.
func (o offsetAttributes) OffsetSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_seconds"))
}

// OffsetYears returns a reference to field offset_years of time_offset.
func (o offsetAttributes) OffsetYears() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("offset_years"))
}

// Rfc3339 returns a reference to field rfc3339 of time_offset.
func (o offsetAttributes) Rfc3339() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("rfc3339"))
}

// Second returns a reference to field second of time_offset.
func (o offsetAttributes) Second() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("second"))
}

// Triggers returns a reference to field triggers of time_offset.
func (o offsetAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](o.ref.Append("triggers"))
}

// Unix returns a reference to field unix of time_offset.
func (o offsetAttributes) Unix() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("unix"))
}

// Year returns a reference to field year of time_offset.
func (o offsetAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("year"))
}

type offsetState struct {
	BaseRfc3339   string            `json:"base_rfc3339"`
	Day           float64           `json:"day"`
	Hour          float64           `json:"hour"`
	Id            string            `json:"id"`
	Minute        float64           `json:"minute"`
	Month         float64           `json:"month"`
	OffsetDays    float64           `json:"offset_days"`
	OffsetHours   float64           `json:"offset_hours"`
	OffsetMinutes float64           `json:"offset_minutes"`
	OffsetMonths  float64           `json:"offset_months"`
	OffsetSeconds float64           `json:"offset_seconds"`
	OffsetYears   float64           `json:"offset_years"`
	Rfc3339       string            `json:"rfc3339"`
	Second        float64           `json:"second"`
	Triggers      map[string]string `json:"triggers"`
	Unix          float64           `json:"unix"`
	Year          float64           `json:"year"`
}
