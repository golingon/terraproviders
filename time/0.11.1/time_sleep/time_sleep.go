// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package time_sleep

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource time_sleep.
type Resource struct {
	Name      string
	Args      Args
	state     *timeSleepState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ts *Resource) Type() string {
	return "time_sleep"
}

// LocalName returns the local name for [Resource].
func (ts *Resource) LocalName() string {
	return ts.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ts *Resource) Configuration() interface{} {
	return ts.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ts *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ts)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ts *Resource) Dependencies() terra.Dependencies {
	return ts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ts *Resource) LifecycleManagement() *terra.Lifecycle {
	return ts.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ts *Resource) Attributes() timeSleepAttributes {
	return timeSleepAttributes{ref: terra.ReferenceResource(ts)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ts *Resource) ImportState(state io.Reader) error {
	ts.state = &timeSleepState{}
	if err := json.NewDecoder(state).Decode(ts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ts.Type(), ts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ts *Resource) State() (*timeSleepState, bool) {
	return ts.state, ts.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ts *Resource) StateMust() *timeSleepState {
	if ts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ts.Type(), ts.LocalName()))
	}
	return ts.state
}

// Args contains the configurations for time_sleep.
type Args struct {
	// CreateDuration: string, optional
	CreateDuration terra.StringValue `hcl:"create_duration,attr"`
	// DestroyDuration: string, optional
	DestroyDuration terra.StringValue `hcl:"destroy_duration,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}

type timeSleepAttributes struct {
	ref terra.Reference
}

// CreateDuration returns a reference to field create_duration of time_sleep.
func (ts timeSleepAttributes) CreateDuration() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("create_duration"))
}

// DestroyDuration returns a reference to field destroy_duration of time_sleep.
func (ts timeSleepAttributes) DestroyDuration() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("destroy_duration"))
}

// Id returns a reference to field id of time_sleep.
func (ts timeSleepAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("id"))
}

// Triggers returns a reference to field triggers of time_sleep.
func (ts timeSleepAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ts.ref.Append("triggers"))
}

type timeSleepState struct {
	CreateDuration  string            `json:"create_duration"`
	DestroyDuration string            `json:"destroy_duration"`
	Id              string            `json:"id"`
	Triggers        map[string]string `json:"triggers"`
}
