// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package time

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewStatic creates a new instance of [Static].
func NewStatic(name string, args StaticArgs) *Static {
	return &Static{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Static)(nil)

// Static represents the Terraform resource time_static.
type Static struct {
	Name      string
	Args      StaticArgs
	state     *staticState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Static].
func (s *Static) Type() string {
	return "time_static"
}

// LocalName returns the local name for [Static].
func (s *Static) LocalName() string {
	return s.Name
}

// Configuration returns the configuration (args) for [Static].
func (s *Static) Configuration() interface{} {
	return s.Args
}

// DependOn is used for other resources to depend on [Static].
func (s *Static) DependOn() terra.Reference {
	return terra.ReferenceResource(s)
}

// Dependencies returns the list of resources [Static] depends_on.
func (s *Static) Dependencies() terra.Dependencies {
	return s.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Static].
func (s *Static) LifecycleManagement() *terra.Lifecycle {
	return s.Lifecycle
}

// Attributes returns the attributes for [Static].
func (s *Static) Attributes() staticAttributes {
	return staticAttributes{ref: terra.ReferenceResource(s)}
}

// ImportState imports the given attribute values into [Static]'s state.
func (s *Static) ImportState(av io.Reader) error {
	s.state = &staticState{}
	if err := json.NewDecoder(av).Decode(s.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", s.Type(), s.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Static] has state.
func (s *Static) State() (*staticState, bool) {
	return s.state, s.state != nil
}

// StateMust returns the state for [Static]. Panics if the state is nil.
func (s *Static) StateMust() *staticState {
	if s.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", s.Type(), s.LocalName()))
	}
	return s.state
}

// StaticArgs contains the configurations for time_static.
type StaticArgs struct {
	// Rfc3339: string, optional
	Rfc3339 terra.StringValue `hcl:"rfc3339,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}
type staticAttributes struct {
	ref terra.Reference
}

// Day returns a reference to field day of time_static.
func (s staticAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("day"))
}

// Hour returns a reference to field hour of time_static.
func (s staticAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("hour"))
}

// Id returns a reference to field id of time_static.
func (s staticAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

// Minute returns a reference to field minute of time_static.
func (s staticAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("minute"))
}

// Month returns a reference to field month of time_static.
func (s staticAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("month"))
}

// Rfc3339 returns a reference to field rfc3339 of time_static.
func (s staticAttributes) Rfc3339() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("rfc3339"))
}

// Second returns a reference to field second of time_static.
func (s staticAttributes) Second() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("second"))
}

// Triggers returns a reference to field triggers of time_static.
func (s staticAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("triggers"))
}

// Unix returns a reference to field unix of time_static.
func (s staticAttributes) Unix() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("unix"))
}

// Year returns a reference to field year of time_static.
func (s staticAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("year"))
}

type staticState struct {
	Day      float64           `json:"day"`
	Hour     float64           `json:"hour"`
	Id       string            `json:"id"`
	Minute   float64           `json:"minute"`
	Month    float64           `json:"month"`
	Rfc3339  string            `json:"rfc3339"`
	Second   float64           `json:"second"`
	Triggers map[string]string `json:"triggers"`
	Unix     float64           `json:"unix"`
	Year     float64           `json:"year"`
}
