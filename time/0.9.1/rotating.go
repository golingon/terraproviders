// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package time

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRotating creates a new instance of [Rotating].
func NewRotating(name string, args RotatingArgs) *Rotating {
	return &Rotating{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Rotating)(nil)

// Rotating represents the Terraform resource time_rotating.
type Rotating struct {
	Name      string
	Args      RotatingArgs
	state     *rotatingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Rotating].
func (r *Rotating) Type() string {
	return "time_rotating"
}

// LocalName returns the local name for [Rotating].
func (r *Rotating) LocalName() string {
	return r.Name
}

// Configuration returns the configuration (args) for [Rotating].
func (r *Rotating) Configuration() interface{} {
	return r.Args
}

// DependOn is used for other resources to depend on [Rotating].
func (r *Rotating) DependOn() terra.Reference {
	return terra.ReferenceResource(r)
}

// Dependencies returns the list of resources [Rotating] depends_on.
func (r *Rotating) Dependencies() terra.Dependencies {
	return r.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Rotating].
func (r *Rotating) LifecycleManagement() *terra.Lifecycle {
	return r.Lifecycle
}

// Attributes returns the attributes for [Rotating].
func (r *Rotating) Attributes() rotatingAttributes {
	return rotatingAttributes{ref: terra.ReferenceResource(r)}
}

// ImportState imports the given attribute values into [Rotating]'s state.
func (r *Rotating) ImportState(av io.Reader) error {
	r.state = &rotatingState{}
	if err := json.NewDecoder(av).Decode(r.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", r.Type(), r.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Rotating] has state.
func (r *Rotating) State() (*rotatingState, bool) {
	return r.state, r.state != nil
}

// StateMust returns the state for [Rotating]. Panics if the state is nil.
func (r *Rotating) StateMust() *rotatingState {
	if r.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", r.Type(), r.LocalName()))
	}
	return r.state
}

// RotatingArgs contains the configurations for time_rotating.
type RotatingArgs struct {
	// Rfc3339: string, optional
	Rfc3339 terra.StringValue `hcl:"rfc3339,attr"`
	// RotationDays: number, optional
	RotationDays terra.NumberValue `hcl:"rotation_days,attr"`
	// RotationHours: number, optional
	RotationHours terra.NumberValue `hcl:"rotation_hours,attr"`
	// RotationMinutes: number, optional
	RotationMinutes terra.NumberValue `hcl:"rotation_minutes,attr"`
	// RotationMonths: number, optional
	RotationMonths terra.NumberValue `hcl:"rotation_months,attr"`
	// RotationRfc3339: string, optional
	RotationRfc3339 terra.StringValue `hcl:"rotation_rfc3339,attr"`
	// RotationYears: number, optional
	RotationYears terra.NumberValue `hcl:"rotation_years,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}
type rotatingAttributes struct {
	ref terra.Reference
}

// Day returns a reference to field day of time_rotating.
func (r rotatingAttributes) Day() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("day"))
}

// Hour returns a reference to field hour of time_rotating.
func (r rotatingAttributes) Hour() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("hour"))
}

// Id returns a reference to field id of time_rotating.
func (r rotatingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

// Minute returns a reference to field minute of time_rotating.
func (r rotatingAttributes) Minute() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("minute"))
}

// Month returns a reference to field month of time_rotating.
func (r rotatingAttributes) Month() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("month"))
}

// Rfc3339 returns a reference to field rfc3339 of time_rotating.
func (r rotatingAttributes) Rfc3339() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rfc3339"))
}

// RotationDays returns a reference to field rotation_days of time_rotating.
func (r rotatingAttributes) RotationDays() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rotation_days"))
}

// RotationHours returns a reference to field rotation_hours of time_rotating.
func (r rotatingAttributes) RotationHours() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rotation_hours"))
}

// RotationMinutes returns a reference to field rotation_minutes of time_rotating.
func (r rotatingAttributes) RotationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rotation_minutes"))
}

// RotationMonths returns a reference to field rotation_months of time_rotating.
func (r rotatingAttributes) RotationMonths() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rotation_months"))
}

// RotationRfc3339 returns a reference to field rotation_rfc3339 of time_rotating.
func (r rotatingAttributes) RotationRfc3339() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rotation_rfc3339"))
}

// RotationYears returns a reference to field rotation_years of time_rotating.
func (r rotatingAttributes) RotationYears() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("rotation_years"))
}

// Second returns a reference to field second of time_rotating.
func (r rotatingAttributes) Second() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("second"))
}

// Triggers returns a reference to field triggers of time_rotating.
func (r rotatingAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("triggers"))
}

// Unix returns a reference to field unix of time_rotating.
func (r rotatingAttributes) Unix() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("unix"))
}

// Year returns a reference to field year of time_rotating.
func (r rotatingAttributes) Year() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("year"))
}

type rotatingState struct {
	Day             float64           `json:"day"`
	Hour            float64           `json:"hour"`
	Id              string            `json:"id"`
	Minute          float64           `json:"minute"`
	Month           float64           `json:"month"`
	Rfc3339         string            `json:"rfc3339"`
	RotationDays    float64           `json:"rotation_days"`
	RotationHours   float64           `json:"rotation_hours"`
	RotationMinutes float64           `json:"rotation_minutes"`
	RotationMonths  float64           `json:"rotation_months"`
	RotationRfc3339 string            `json:"rotation_rfc3339"`
	RotationYears   float64           `json:"rotation_years"`
	Second          float64           `json:"second"`
	Triggers        map[string]string `json:"triggers"`
	Unix            float64           `json:"unix"`
	Year            float64           `json:"year"`
}
